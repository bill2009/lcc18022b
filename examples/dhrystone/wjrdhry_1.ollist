 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 1 - 10/29/2020 11:28:14


       1/       0 :                     ; generated by lcc-xr18CX $Version: 5.2 - XR18CX $ on Thu Oct 29 11:28:12 2020
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 
       4/       0 : =0EH                memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =0FH                retVal:	equ	15
       7/       0 : =0CH                regArg1: equ	12
       8/       0 : =0DH                regArg2: equ	13
(1) 1159/       0 :                     	listing	on
(1) 1160/       0 : C0 32 EB            	lbr	lcc1802init
(1) 1161/       3 :                     	
(1) 1162/       3 :                     
      11/       3 :                     	listing on
      12/       3 : (MACRO)             	orgd
      13/       3 :                     _malloc_ptr:
      14/       3 : 60 00               	dw 24576
      15/       5 : (MACRO)             	orgc
      16/       5 :                     ;;function_start _malloc pointer to void function(int)
      17/       5 :                     _malloc:		
      18/       5 : (MACRO)             	reserve 2
      19/       7 :                     ;{
      20/       7 :                     ;  ret = (void*)malloc_ptr;
      21/       7 : (MACRO)             	ld2 R11,'D',(_malloc_ptr),0 
      22/      11 : (MACRO)             	st2 R11,'O',sp,(0+1)
      23/      1E :                     ;D*E*A*D  R11
      24/      1E :                     ;  malloc_ptr += size;
      25/      1E : (MACRO)             	alu2RRS R11,R12,'D',(_malloc_ptr),0,add,adc
      26/      2D : (MACRO)             	st2 R11,'D',(_malloc_ptr),0
      27/      38 :                     ;D*E*A*D  R11
      28/      38 :                     ;  return ret;
      29/      38 : (MACRO)             	ld2 R15,'O',sp,(0+1) 
      30/      44 :                     L6:
      31/      44 : (MACRO)             	release 2
      32/      46 : (MACRO)             	Cretn
      33/      47 :                     
      34/      47 :                     ;;function_end$$ _malloc
      35/      47 : (MACRO)             	orgd
      36/      47 :                     _Reg:
      37/      47 : 00 00               	dw 0
      38/      49 : (MACRO)             	orgc
      39/      49 :                     ;;function_start _Proc_6 int function(int,pointer to Enumeration)
      40/      49 :                     _Proc_6:		
      41/      49 : (MACRO)             	pushr R6
      42/      4D : (MACRO)             	pushr R7
      43/      51 : (MACRO)             	reserve 4
      44/      55 : (MACRO)             	st2 R12,'O',sp,(10+1)
      45/      62 : 1E                  	inc memaddr				
      46/      63 : (MACRO)             	str2 R13,memaddr
      47/      69 : (MACRO)             	ld2 R7,'O',sp,(10+1) 
      48/      75 :                     ;{
      49/      75 :                     ;  *Enum_Ref_Par = Enum_Val_Par;
      50/      75 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
      51/      81 : (MACRO)             	str2 R7,R11	
      52/      87 :                     ;D*E*A*D  R11
      53/      87 :                     ;  if (! Func_3 (Enum_Val_Par))
      54/      87 : (MACRO)             	cpy2 R12,R7 
      55/      8B : (MACRO)             	Ccall _Func_3
      56/      8E : (MACRO)             	jnzU2 R15,L8
      57/      96 :                     ;    *Enum_Ref_Par = Ident_4;
      58/      96 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 2 - 10/29/2020 11:28:14


      59/      A2 : (MACRO)             	str2I 3,R11	
      60/      AA :                     ;D*E*A*D  R11
      61/      AA :                     L8:
      62/      AA :                     ;  switch (Enum_Val_Par)
      63/      AA : (MACRO)             	cpy2 R6,R7 
      64/      AE :                     ;D*E*A*D  R7
      65/      AE : (MACRO)             	jcI2I R6,0,lbnf,L10  
      66/      BF : (MACRO)             	jnI2I R6,4,lbnf,L10
      67/      D0 : (MACRO)             	shlR2R	R11,R6	
      68/      D6 :                     ;D*E*A*D  R6
      69/      D6 : (MACRO)             	ld2 R11,'O',R11,(L20) 
      70/      E2 :                     ;D*E*A*D  R11
      71/      E2 : (MACRO)             	jumpv R11
      72/      EB : (MACRO)             	orgc
      73/      EB :                     L20:
      74/      EB : 00 F5               	dw L13
      75/      ED : 01 0C               	dw L14
      76/      EF : 01 55               	dw L17
      77/      F1 : 01 80               	dw L11
      78/      F3 : 01 6C               	dw L19
      79/      F5 : (MACRO)             	orgc
      80/      F5 :                     ;  {
      81/      F5 :                     L13:
      82/      F5 :                     ;      *Enum_Ref_Par = Ident_1;
      83/      F5 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
      84/     101 : (MACRO)             	str2I 0,R11	
      85/     109 :                     ;D*E*A*D  R11
      86/     109 :                     ;      break;
      87/     109 : C0 01 80            	lbr L11
      88/     10C :                     L14:
      89/     10C :                     ;      if (Int_Glob > 100)
      90/     10C : (MACRO)             	ld2 R11,'D',(_Int_Glob),0 
      91/     116 : (MACRO)             	jnI2I R11,100,lbdf,L15 
      92/     127 :                     ;D*E*A*D  R11
      93/     127 :                     ;      *Enum_Ref_Par = Ident_1;
      94/     127 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
      95/     133 : (MACRO)             	str2I 0,R11	
      96/     13B :                     ;D*E*A*D  R11
      97/     13B : C0 01 80            	lbr L11
      98/     13E :                     L15:
      99/     13E :                     ;      else *Enum_Ref_Par = Ident_4;
     100/     13E : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     101/     14A : (MACRO)             	str2I 3,R11	
     102/     152 :                     ;D*E*A*D  R11
     103/     152 :                     ;      break;
     104/     152 : C0 01 80            	lbr L11
     105/     155 :                     L17:
     106/     155 :                     ;      *Enum_Ref_Par = Ident_2;
     107/     155 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     108/     161 : (MACRO)             	str2I 1,R11	
     109/     169 :                     ;D*E*A*D  R11
     110/     169 :                     ;      break;
     111/     169 : C0 01 80            	lbr L11
     112/     16C :                     ;    case Ident_4: break;
     113/     16C :                     L19:
     114/     16C :                     ;      *Enum_Ref_Par = Ident_3;
     115/     16C : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     116/     178 : (MACRO)             	str2I 2,R11	
     117/     180 :                     ;D*E*A*D  R11
     118/     180 :                     ;      break;
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 3 - 10/29/2020 11:28:14


     119/     180 :                     L10:
     120/     180 :                     L11:
     121/     180 : (MACRO)             	ld2z R15
     122/     184 :                     ;} /* Proc_6 */
     123/     184 :                     L7:
     124/     184 : (MACRO)             	release 4
     125/     188 : (MACRO)             	popr R7
     126/     18D : (MACRO)             	popr R6
     127/     192 : (MACRO)             	Cretn
     128/     193 :                     
     129/     193 :                     ;;function_end$$ _Proc_6
     130/     193 :                     ;;function_start _Proc_7 int function(int,int,pointer to int)
     131/     193 :                     _Proc_7:		
     132/     193 : (MACRO)             	reserve 2
     133/     195 :                     ;{
     134/     195 :                     ;  Int_Loc = Int_1_Par_Val + 2;
     135/     195 : (MACRO)             	cpy2 R11,R12 
     136/     199 : (MACRO)             	incm R11,2
     137/     19B : (MACRO)             	st2 R11,'O',sp,(0+1)
     138/     1A8 :                     ;D*E*A*D  R11
     139/     1A8 :                     ;  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     140/     1A8 : (MACRO)             	ld2 R11,'O',sp,(8+1) 
     141/     1B4 : (MACRO)             	alu2RRS R10,R13,'O',sp,(0+1),add,adc
     142/     1C5 : (MACRO)             	str2 R10,R11	
     143/     1CB :                     ;D*E*A*D  R10
     144/     1CB :                     ;D*E*A*D  R11
     145/     1CB : (MACRO)             	ld2z R15
     146/     1CF :                     ;} /* Proc_7 */
     147/     1CF :                     L21:
     148/     1CF : (MACRO)             	release 2
     149/     1D1 : (MACRO)             	Cretn
     150/     1D2 :                     
     151/     1D2 :                     ;;function_end$$ _Proc_7
     152/     1D2 :                     ;;function_start _Proc_8 int function(pointer to int,pointer to array 50 of int,int,int)
     153/     1D2 :                     _Proc_8:		
     154/     1D2 : (MACRO)             	pushr R0
     155/     1D6 : (MACRO)             	pushr R1
     156/     1DA : (MACRO)             	pushr R6
     157/     1DE : (MACRO)             	pushr R7
     158/     1E2 : (MACRO)             	reserve 4
     159/     1E6 : (MACRO)             	cpy2 R7,R12
     160/     1EA : (MACRO)             	cpy2 R6,R13
     161/     1EE :                     ;{
     162/     1EE :                     ;  Int_Loc = Int_1_Par_Val + 5;
     163/     1EE : (MACRO)             	ld2 R11,'O',sp,(18+1) 
     164/     1FA : (MACRO)             	ldA2 R1,'O',R11,(5)
     165/     202 :                     ;D*E*A*D  R11
     166/     202 :                     ;  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
     167/     202 : (MACRO)             	shlR2R	R11,R1	
     168/     208 : (MACRO)             	alu2 R11,R11,R7,add,adc	
     169/     212 : (MACRO)             	ld2 R10,'O',sp,(20+1) 
     170/     21E : (MACRO)             	str2 R10,R11	
     171/     224 :                     ;D*E*A*D  R10
     172/     224 :                     ;D*E*A*D  R11
     173/     224 :                     ;  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
     174/     224 : (MACRO)             	shlR2R	R11,R1	
     175/     22A : (MACRO)             	cpy2 R10,R11 
     176/     22E : (MACRO)             	incm R10,2
     177/     230 : (MACRO)             	alu2 R10,R10,R7,add,adc	
     178/     23A : (MACRO)             	alu2 R11,R11,R7,add,adc	
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 4 - 10/29/2020 11:28:14


     179/     244 : (MACRO)             	mvcn2 R10,R11	
     180/     24B :                     ;D*E*A*D  R10
     181/     24B :                     ;D*E*A*D  R11
     182/     24B :                     ;  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
     183/     24B : (MACRO)             	shlR2R	R11,R1	
     184/     251 : (MACRO)             	ldA2 R11,'O',R11,(60)
     185/     259 : (MACRO)             	alu2 R11,R11,R7,add,adc	
     186/     263 : (MACRO)             	str2 R1,R11	
     187/     269 :                     ;D*E*A*D  R11
     188/     269 :                     ;  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
     189/     269 : (MACRO)             	cpy2 R0,R1 
     190/     26D : C0 02 DB            	lbr L26
     191/     270 :                     L23:
     192/     270 :                     ;    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
     193/     270 : (MACRO)             	cpy2 R13,R1 
     194/     274 :                     	
     195/     274 : (MACRO)             	ld2z R15
     196/     278 : (MACRO)             	shl2I	R13,1
     197/     27E : (MACRO)             	shl2I	R13,1
     198/     284 : (MACRO)             	alu2 R15,R15,R13,add,adc
     199/     28E : (MACRO)             	shl2I	R13,1
     200/     294 : (MACRO)             	shl2I	R13,1
     201/     29A : (MACRO)             	shl2I	R13,1
     202/     2A0 : (MACRO)             	alu2 R15,R15,R13,add,adc
     203/     2AA : (MACRO)             	shl2I	R13,1
     204/     2B0 : (MACRO)             	alu2 R15,R15,R13,add,adc
     205/     2BA : (MACRO)             	shlR2R	R10,R0	
     206/     2C0 : (MACRO)             	alu2 R11,R15,R6,add,adc	
     207/     2CA : (MACRO)             	alu2 R11,R10,R11,add,adc	
     208/     2D4 :                     ;D*E*A*D  R10
     209/     2D4 : (MACRO)             	str2 R1,R11	
     210/     2DA :                     ;D*E*A*D  R11
     211/     2DA :                     L24:
     212/     2DA :                     ;  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
     213/     2DA : (MACRO)             	incm R0,1
     214/     2DB :                     L26:
     215/     2DB : (MACRO)             	cpy2 R11,R1 
     216/     2DF : (MACRO)             	incm R11,1
     217/     2E0 : (MACRO)             	jcI2 R11,R0,lbdf,L23 
     218/     2F2 :                     ;D*E*A*D  R11
     219/     2F2 :                     ;  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
     220/     2F2 : (MACRO)             	cpy2 R13,R1 
     221/     2F6 :                     	
     222/     2F6 : (MACRO)             	ld2z R15
     223/     2FA : (MACRO)             	shl2I	R13,1
     224/     300 : (MACRO)             	shl2I	R13,1
     225/     306 : (MACRO)             	alu2 R15,R15,R13,add,adc
     226/     310 : (MACRO)             	shl2I	R13,1
     227/     316 : (MACRO)             	shl2I	R13,1
     228/     31C : (MACRO)             	shl2I	R13,1
     229/     322 : (MACRO)             	alu2 R15,R15,R13,add,adc
     230/     32C : (MACRO)             	shl2I	R13,1
     231/     332 : (MACRO)             	alu2 R15,R15,R13,add,adc
     232/     33C : (MACRO)             	shlR2R	R10,R1	
     233/     342 : (MACRO)             	decm R10,2	
     234/     344 : (MACRO)             	alu2 R11,R15,R6,add,adc	
     235/     34E : (MACRO)             	alu2 R11,R10,R11,add,adc	
     236/     358 :                     ;D*E*A*D  R10
     237/     358 : (MACRO)             	ldn2 R10,R11	
     238/     35D : (MACRO)             	incm R10,1
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 5 - 10/29/2020 11:28:14


     239/     35E : (MACRO)             	str2 R10,R11	
     240/     364 :                     ;D*E*A*D  R10
     241/     364 :                     ;D*E*A*D  R11
     242/     364 :                     ;  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
     243/     364 : (MACRO)             	cpy2 R13,R1 
     244/     368 :                     	
     245/     368 : (MACRO)             	ld2z R15
     246/     36C : (MACRO)             	shl2I	R13,1
     247/     372 : (MACRO)             	shl2I	R13,1
     248/     378 : (MACRO)             	alu2 R15,R15,R13,add,adc
     249/     382 : (MACRO)             	shl2I	R13,1
     250/     388 : (MACRO)             	shl2I	R13,1
     251/     38E : (MACRO)             	shl2I	R13,1
     252/     394 : (MACRO)             	alu2 R15,R15,R13,add,adc
     253/     39E : (MACRO)             	shl2I	R13,1
     254/     3A4 : (MACRO)             	alu2 R15,R15,R13,add,adc
     255/     3AE : (MACRO)             	shlR2R	R10,R1	
     256/     3B4 :                     ;D*E*A*D  R1
     257/     3B4 : (MACRO)             	ldA2 R11,'O',R15,(2000)
     258/     3BC : (MACRO)             	alu2 R11,R11,R6,add,adc	
     259/     3C6 :                     ;D*E*A*D  R6
     260/     3C6 : (MACRO)             	alu2 R11,R10,R11,add,adc	
     261/     3D0 : (MACRO)             	alu2 R10,R10,R7,add,adc	
     262/     3DA :                     ;D*E*A*D  R7
     263/     3DA : (MACRO)             	mvcn2 R11,R10	
     264/     3E1 :                     ;D*E*A*D  R11
     265/     3E1 :                     ;D*E*A*D  R10
     266/     3E1 :                     ;  Int_Glob = 5;
     267/     3E1 : (MACRO)             	st2I 5,'D',(_Int_Glob),0
     268/     3EE : (MACRO)             	ld2z R15
     269/     3F2 :                     ;} /* Proc_8 */
     270/     3F2 :                     L22:
     271/     3F2 : (MACRO)             	release 4
     272/     3F6 : (MACRO)             	popr R7
     273/     3FB : (MACRO)             	popr R6
     274/     400 : (MACRO)             	popr R1
     275/     405 : (MACRO)             	popr R0
     276/     40A : (MACRO)             	Cretn
     277/     40B :                     
     278/     40B :                     ;;function_end$$ _Proc_8
     279/     40B :                     ;;function_start _Func_1 Enumeration function(int,int)
     280/     40B :                     _Func_1:		
     281/     40B : (MACRO)             	reserve 2
     282/     40D :                     ;{
     283/     40D :                     ;  Ch_1_Loc = Ch_1_Par_Val;
     284/     40D : (MACRO)             	ldA2 R11,'O',sp,(1+1)
     285/     415 : (MACRO)             	str1 R12,R11
     286/     417 :                     ;D*E*A*D  R11
     287/     417 :                     ;  Ch_2_Loc = Ch_1_Loc;
     288/     417 : (MACRO)             	ldA2 R11,'O',sp,(0+1)
     289/     41F : (MACRO)             	ldA2 R10,'O',sp,(1+1)
     290/     427 : 0A                  	ldn R10
     291/     428 : 5B                  	str R11
     292/     429 :                     ;D*E*A*D  R11
     293/     429 :                     ;  if (Ch_2_Loc != Ch_2_Par_Val)
     294/     429 : (MACRO)             	ld1 R11,'O',sp,(0+1)
     295/     433 : (MACRO)             	zExt R11 
     296/     436 : (MACRO)             	cpy1 R10,R13
     297/     438 : (MACRO)             	zExt R10 
     298/     43B : (MACRO)             	jeqI2 R11,R10,L28
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 6 - 10/29/2020 11:28:14


     299/     449 :                     ;D*E*A*D  R11
     300/     449 :                     ;D*E*A*D  R10
     301/     449 :                     ;    return (Ident_1);
     302/     449 : (MACRO)             	ld2z R15
     303/     44D : C0 04 66            	lbr L27
     304/     450 :                     L28:
     305/     450 :                     ;  {
     306/     450 :                     ;    Ch_1_Glob = Ch_1_Loc;
     307/     450 : (MACRO)             	ldaD R11,_Ch_1_Glob
     308/     456 : (MACRO)             	ldA2 R10,'O',sp,(1+1)
     309/     45E : 0A                  	ldn R10
     310/     45F : 5B                  	str R11
     311/     460 :                     ;D*E*A*D  R11
     312/     460 :                     ;    return (Ident_2);
     313/     460 : (MACRO)             	ldaD R15,1
     314/     466 :                     L27:
     315/     466 : (MACRO)             	release 2
     316/     468 : (MACRO)             	Cretn
     317/     469 :                     
     318/     469 :                     ;;function_end$$ _Func_1
     319/     469 :                     ;;function_start _Func_2 int function(pointer to char,pointer to char)
     320/     469 :                     _Func_2:		
     321/     469 : (MACRO)             	pushr R0
     322/     46D : (MACRO)             	pushr R1
     323/     471 : (MACRO)             	pushr R6
     324/     475 : (MACRO)             	pushr R7
     325/     479 : (MACRO)             	reserve 4
     326/     47D : (MACRO)             	cpy2 R7,R12
     327/     481 : (MACRO)             	cpy2 R6,R13
     328/     485 :                     ;{
     329/     485 :                     ;  Int_Loc = 2;
     330/     485 : (MACRO)             	ldaD R1,2
     331/     48B : C0 04 C3            	lbr L32
     332/     48E :                     L31:
     333/     48E :                     ;    if (Func_1 (Str_1_Par_Ref[Int_Loc],
     334/     48E : (MACRO)             	alu2 R11,R1,R7,add,adc	
     335/     498 : (MACRO)             	ldn1 R12,R11	
     336/     49A :                     ;D*E*A*D  R11
     337/     49A : (MACRO)             	zExt R12 
     338/     49D : (MACRO)             	cpy2 R11,R1 
     339/     4A1 : (MACRO)             	incm R11,1
     340/     4A2 : (MACRO)             	alu2 R11,R11,R6,add,adc	
     341/     4AC : (MACRO)             	ldn1 R13,R11	
     342/     4AE :                     ;D*E*A*D  R11
     343/     4AE : (MACRO)             	zExt R13 
     344/     4B1 : (MACRO)             	Ccall _Func_1
     345/     4B4 : (MACRO)             	jnzU2 R15,L34
     346/     4BC :                     ;    {
     347/     4BC :                     ;      Ch_Loc = 'A';
     348/     4BC : (MACRO)             	ldaD R0,65
     349/     4C2 :                     ;      Int_Loc += 1;
     350/     4C2 : (MACRO)             	incm R1,1
     351/     4C3 :                     ;    } /* if, while */
     352/     4C3 :                     L34:
     353/     4C3 :                     L32:
     354/     4C3 :                     ;  while (Int_Loc <= 2) /* loop body executed once */
     355/     4C3 : (MACRO)             	jnI2I R1,2,lbdf,L31 
     356/     4D4 :                     ;  if (Ch_Loc >= 'W' && Ch_Loc < 'Z')
     357/     4D4 : (MACRO)             	cpy1 R11,R0
     358/     4D6 : (MACRO)             	zExt R11 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 7 - 10/29/2020 11:28:14


     359/     4D9 : (MACRO)             	jcI2I R11,87,lbnf,L36  
     360/     4EA : (MACRO)             	jcI2I R11,90,lbdf,L36
     361/     4FB :                     ;D*E*A*D  R11
     362/     4FB :                     ;    Int_Loc = 7;
     363/     4FB : (MACRO)             	ldaD R1,7
     364/     501 :                     L36:
     365/     501 :                     ;  if (Ch_Loc == 'R')
     366/     501 : (MACRO)             	jneU1I R0,82,L38	
     367/     507 :                     ;D*E*A*D  R0
     368/     507 :                     ;    return (true);
     369/     507 : (MACRO)             	ldaD R15,1
     370/     50D : C0 05 4C            	lbr L30
     371/     510 :                     L38:
     372/     510 :                     ;  {
     373/     510 :                     ;    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
     374/     510 : (MACRO)             	cpy2 R12,R7 
     375/     514 :                     ;D*E*A*D  R7
     376/     514 : (MACRO)             	cpy2 R13,R6 
     377/     518 :                     ;D*E*A*D  R6
     378/     518 : (MACRO)             	Ccall _strcmp
     379/     51B : (MACRO)             	jnI2I R15,0,lbdf,L40 
     380/     52C :                     ;    {
     381/     52C :                     ;      Int_Loc += 7;
     382/     52C : (MACRO)             	ldA2 R1,'O',R1,(7)
     383/     534 :                     ;      Int_Glob = Int_Loc;
     384/     534 : (MACRO)             	st2 R1,'D',(_Int_Glob),0
     385/     53F :                     ;D*E*A*D  R1
     386/     53F :                     ;      return (true);
     387/     53F : (MACRO)             	ldaD R15,1
     388/     545 : C0 05 4C            	lbr L30
     389/     548 :                     L40:
     390/     548 :                     ;      return (false);
     391/     548 : (MACRO)             	ld2z R15
     392/     54C :                     L30:
     393/     54C : (MACRO)             	release 4
     394/     550 : (MACRO)             	popr R7
     395/     555 : (MACRO)             	popr R6
     396/     55A : (MACRO)             	popr R1
     397/     55F : (MACRO)             	popr R0
     398/     564 : (MACRO)             	Cretn
     399/     565 :                     
     400/     565 :                     ;;function_end$$ _Func_2
     401/     565 :                     ;;function_start _Func_3 int function(int)
     402/     565 :                     _Func_3:		
     403/     565 : (MACRO)             	reserve 2
     404/     567 :                     ;{
     405/     567 :                     ;  Enum_Loc = Enum_Par_Val;
     406/     567 : (MACRO)             	st2 R12,'O',sp,(0+1)
     407/     574 :                     ;  if (Enum_Loc == Ident_3)
     408/     574 : (MACRO)             	ld2 R11,'O',sp,(0+1) 
     409/     580 : (MACRO)             	jneU2I R11,2,L43
     410/     58C :                     ;D*E*A*D  R11
     411/     58C :                     ;    return (true);
     412/     58C : (MACRO)             	ldaD R15,1
     413/     592 : C0 05 99            	lbr L42
     414/     595 :                     L43:
     415/     595 :                     ;    return (false);
     416/     595 : (MACRO)             	ld2z R15
     417/     599 :                     L42:
     418/     599 : (MACRO)             	release 2
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 8 - 10/29/2020 11:28:14


     419/     59B : (MACRO)             	Cretn
     420/     59C :                     
     421/     59C :                     ;;function_end$$ _Func_3
     422/     59C :                     ;;function_start _main int function(void)
     423/     59C :                     _main: 
     424/     59C : (MACRO)             	reserve 70
     425/     5A6 : (MACRO)             	pushr R0
     426/     5AA : (MACRO)             	pushr R1
     427/     5AE : (MACRO)             	pushr R6
     428/     5B2 : (MACRO)             	pushr R7
     429/     5B6 : (MACRO)             	reserve 8
     430/     5BE :                     ;{
     431/     5BE :                     ;  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     432/     5BE : (MACRO)             	ldaD R12,39
     433/     5C4 : (MACRO)             	Ccall _malloc
     434/     5C7 : (MACRO)             	st2 R15,'D',(_Next_Ptr_Glob),0
     435/     5D2 :                     ;  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     436/     5D2 : (MACRO)             	ldaD R12,39
     437/     5D8 : (MACRO)             	Ccall _malloc
     438/     5DB : (MACRO)             	st2 R15,'D',(_Ptr_Glob),0
     439/     5E6 :                     ;  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
     440/     5E6 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     441/     5F0 : (MACRO)             	ld2 R10,'D',(_Next_Ptr_Glob),0 
     442/     5FA : (MACRO)             	str2 R10,R11	
     443/     600 :                     ;D*E*A*D  R10
     444/     600 :                     ;D*E*A*D  R11
     445/     600 :                     ;  Ptr_Glob->Discr                       = Ident_1;
     446/     600 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     447/     60A : (MACRO)             	st2I 0,'O',R11,(2)
     448/     619 :                     ;  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
     449/     619 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     450/     623 : (MACRO)             	st2I 2,'O',R11,(4)
     451/     632 :                     ;  Ptr_Glob->variant.var_1.Int_Comp      = 40;
     452/     632 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     453/     63C : (MACRO)             	st2I 40,'O',R11,(6)
     454/     64B :                     ;  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     455/     64B : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     456/     655 : (MACRO)             	ldA2 R12,'O',R11,(8)
     457/     65D :                     ;D*E*A*D  R11
     458/     65D : (MACRO)             	ldaD R13,L46
     459/     663 : (MACRO)             	Ccall _strcpy
     460/     666 :                     ;  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
     461/     666 : (MACRO)             	ldA2 R12,'O',sp,(18+1)
     462/     66E : (MACRO)             	ldaD R13,L47
     463/     674 : (MACRO)             	Ccall _strcpy
     464/     677 :                     ;  Arr_2_Glob [8][7] = 10;
     465/     677 : (MACRO)             	st2I 10,'D',(_Arr_2_Glob+800+14),0
     466/     684 :                     ;  printf("Arr_2_Glob[8][7]:%x=%d\n",Arr_2_Glob,Arr_2_Glob[8][7]),
     467/     684 : (MACRO)             	ldaD R12,L50
     468/     68A : (MACRO)             	ldaD R13,_Arr_2_Glob
     469/     690 : (MACRO)             	ld2 R11,'D',(_Arr_2_Glob+800+14),0 
     470/     69A : (MACRO)             	st2 R11,'O',sp,(4+1)
     471/     6A7 :                     ;D*E*A*D  R11
     472/     6A7 : (MACRO)             	Ccall _printf
     473/     6AA : (MACRO)             	ldaD R12,L53
     474/     6B0 : (MACRO)             	Ccall _printf
     475/     6B3 :                     ;  printf ("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
     476/     6B3 : (MACRO)             	ldaD R12,L54
     477/     6B9 : (MACRO)             	Ccall _printf
     478/     6BC :                     ;  printf ("\n");
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 9 - 10/29/2020 11:28:14


     479/     6BC : (MACRO)             	ldaD R12,L53
     480/     6C2 : (MACRO)             	Ccall _printf
     481/     6C5 :                     ;  if (Reg)
     482/     6C5 : (MACRO)             	ld2 R11,'D',(_Reg),0 
     483/     6CF : (MACRO)             	jzU2 R11,L55
     484/     6D7 :                     ;D*E*A*D  R11
     485/     6D7 :                     ;  {
     486/     6D7 :                     ;    printf ("Program compiled with 'register' attribute\n");
     487/     6D7 : (MACRO)             	ldaD R12,L57
     488/     6DD : (MACRO)             	Ccall _printf
     489/     6E0 :                     ;    printf ("\n");
     490/     6E0 : (MACRO)             	ldaD R12,L53
     491/     6E6 : (MACRO)             	Ccall _printf
     492/     6E9 :                     ;  }
     493/     6E9 : C0 06 FE            	lbr L56
     494/     6EC :                     L55:
     495/     6EC :                     ;  {
     496/     6EC :                     ;    printf ("Program compiled without 'register' attribute\n");
     497/     6EC : (MACRO)             	ldaD R12,L58
     498/     6F2 : (MACRO)             	Ccall _printf
     499/     6F5 :                     ;    printf ("\n");
     500/     6F5 : (MACRO)             	ldaD R12,L53
     501/     6FB : (MACRO)             	Ccall _printf
     502/     6FE :                     ;  }
     503/     6FE :                     L56:
     504/     6FE :                     ;  printf ("Please give the number of runs through the benchmark: ");
     505/     6FE : (MACRO)             	ldaD R12,L59
     506/     704 : (MACRO)             	Ccall _printf
     507/     707 :                     ;  {
     508/     707 :                     ;    n=1000; //scanf ("%d", &n);
     509/     707 : (MACRO)             	st2I 1000,'O',sp,(16+1)
     510/     716 :                     ;    Number_Of_Runs = n;
     511/     716 : (MACRO)             	ld2 R0,'O',sp,(16+1) 
     512/     722 :                     ;  }
     513/     722 :                     ;  printf ("\n");
     514/     722 : (MACRO)             	ldaD R12,L53
     515/     728 : (MACRO)             	Ccall _printf
     516/     72B :                     ;  printf ("Execution starts, %d runs through Dhrystone !@#\n", Number_Of_Runs);
     517/     72B : (MACRO)             	ldaD R12,L60
     518/     731 : (MACRO)             	cpy2 R13,R0 
     519/     735 : (MACRO)             	Ccall _printf
     520/     738 :                     ;  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
     521/     738 : (MACRO)             	ldaD R1,1
     522/     73E : C0 09 BC            	lbr L64
     523/     741 :                     L61:
     524/     741 :                     ;  {
     525/     741 :                     ;    Proc_5();
     526/     741 : (MACRO)             	Ccall _Proc_5
     527/     744 :                     ;    Proc_4();
     528/     744 : (MACRO)             	Ccall _Proc_4
     529/     747 :                     ;    Int_1_Loc = 2;
     530/     747 : (MACRO)             	st2I 2,'O',sp,(84+1)
     531/     756 :                     ;    Int_2_Loc = 3;
     532/     756 : (MACRO)             	ldaD R7,3
     533/     75C :                     ;    strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
     534/     75C : (MACRO)             	ldA2 R12,'O',sp,(49+1)
     535/     764 : (MACRO)             	ldaD R13,L65
     536/     76A : (MACRO)             	Ccall _strcpy
     537/     76D :                     ;    Enum_Loc = Ident_2;
     538/     76D : (MACRO)             	st2I 1,'O',sp,(80+1)
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 10 - 10/29/2020 11:28:14


     539/     77C :                     ;    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
     540/     77C : (MACRO)             	ldA2 R12,'O',sp,(18+1)
     541/     784 : (MACRO)             	ldA2 R13,'O',sp,(49+1)
     542/     78C : (MACRO)             	Ccall _Func_2
     543/     78F : (MACRO)             	cpy2 R11,R15 
     544/     793 : (MACRO)             	jnzU2 R11,L67
     545/     79B : (MACRO)             	st2I 1,'O',sp,(16+1)
     546/     7AA : C0 07 BC            	lbr L68
     547/     7AD :                     L67:
     548/     7AD : (MACRO)             	st2I 0,'O',sp,(16+1)
     549/     7BC :                     L68:
     550/     7BC : (MACRO)             	mvc2 R11,'D',(_Bool_Glob),0,'O',sp,(16+1)	
     551/     7CF :                     ;D*E*A*D  R11
     552/     7CF : C0 08 51            	lbr L70
     553/     7D2 :                     L69:
     554/     7D2 :                     ;    {	//dbgprintf("while\n");
     555/     7D2 :                     ;      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
     556/     7D2 : (MACRO)             	ld2 R13,'O',sp,(84+1) 
     557/     7DE :                     	
     558/     7DE : (MACRO)             	cpy2 R15,R13
     559/     7E2 : (MACRO)             	shl2I	R13,1
     560/     7E8 : (MACRO)             	shl2I	R13,1
     561/     7EE : (MACRO)             	alu2 R15,R15,R13,add,adc
     562/     7F8 : (MACRO)             	alu2 R11,R15,R7,sm,smb
     563/     802 : (MACRO)             	st2 R11,'O',sp,(82+1)
     564/     80F :                     ;D*E*A*D  R11
     565/     80F :                     ;      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
     566/     80F : (MACRO)             	ld2 R12,'O',sp,(84+1) 
     567/     81B : (MACRO)             	cpy2 R13,R7 
     568/     81F : (MACRO)             	ldA2 R11,'O',sp,(82+1)
     569/     827 : (MACRO)             	st2 R11,'O',sp,(4+1)
     570/     834 :                     ;D*E*A*D  R11
     571/     834 : (MACRO)             	Ccall _Proc_7
     572/     837 :                     ;      Int_1_Loc += 1;
     573/     837 : (MACRO)             	ld2 R11,'O',sp,(84+1) 
     574/     843 : (MACRO)             	incm R11,1
     575/     844 : (MACRO)             	st2 R11,'O',sp,(84+1)
     576/     851 :                     ;D*E*A*D  R11
     577/     851 :                     ;    } /* while */
     578/     851 :                     L70:
     579/     851 :                     ;    while (Int_1_Loc < Int_2_Loc)  /* loop body executed once */
     580/     851 : (MACRO)             	ld2 R11,'O',sp,(84+1) 
     581/     85D : (MACRO)             	jcI2 R11,R7,lbnf,L69
     582/     86F :                     ;    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
     583/     86F : (MACRO)             	ldaD R12,_Arr_1_Glob
     584/     875 : (MACRO)             	ldaD R13,_Arr_2_Glob
     585/     87B : (MACRO)             	mvc2 R11,'O',sp,(4+1),'O',sp,(84+1)	
     586/     890 : (MACRO)             	mvc2 R11,'O',sp,(6+1),'O',sp,(82+1)	
     587/     8A5 :                     ;D*E*A*D  R11
     588/     8A5 : (MACRO)             	Ccall _Proc_8
     589/     8A8 :                     ;    Proc_1 (Ptr_Glob);
     590/     8A8 : (MACRO)             	ld2 R12,'D',(_Ptr_Glob),0 
     591/     8B2 : (MACRO)             	Ccall _Proc_1
     592/     8B5 :                     ;    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     593/     8B5 : (MACRO)             	ldaD R6,65
     594/     8BB : C0 09 1A            	lbr L75
     595/     8BE :                     L72:
     596/     8BE :                     ;    {
     597/     8BE :                     ;      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
     598/     8BE : (MACRO)             	cpy1 R12,R6
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 11 - 10/29/2020 11:28:14


     599/     8C0 : (MACRO)             	zExt R12 
     600/     8C3 : (MACRO)             	ldaD R13,67
     601/     8C9 : (MACRO)             	Ccall _Func_1
     602/     8CC : (MACRO)             	ld2 R10,'O',sp,(80+1) 
     603/     8D8 : (MACRO)             	jneU2 R10,R15,L76
     604/     8EA :                     ;D*E*A*D  R10
     605/     8EA :                     ;        {
     606/     8EA :                     ;        Proc_6 (Ident_1, &Enum_Loc);
     607/     8EA : (MACRO)             	ld2z R12
     608/     8EE : (MACRO)             	ldA2 R13,'O',sp,(80+1)
     609/     8F6 : (MACRO)             	Ccall _Proc_6
     610/     8F9 :                     ;        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
     611/     8F9 : (MACRO)             	ldA2 R12,'O',sp,(49+1)
     612/     901 : (MACRO)             	ldaD R13,L78
     613/     907 : (MACRO)             	Ccall _strcpy
     614/     90A :                     ;        Int_2_Loc = Run_Index;
     615/     90A : (MACRO)             	cpy2 R7,R1 
     616/     90E :                     ;        Int_Glob = Run_Index;
     617/     90E : (MACRO)             	st2 R1,'D',(_Int_Glob),0
     618/     919 :                     ;        }
     619/     919 :                     L76:
     620/     919 :                     ;    }
     621/     919 :                     L73:
     622/     919 :                     ;    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     623/     919 : (MACRO)             	incm R6,1	
     624/     91A :                     L75:
     625/     91A : (MACRO)             	ldaD R11,_Ch_2_Glob
     626/     920 : (MACRO)             	ldn1 R11,R11
     627/     922 : (MACRO)             	jcU1 R11,R6,lbdf,L72 
     628/     929 :                     ;D*E*A*D  R11
     629/     929 :                     ;    Int_2_Loc = Int_2_Loc * Int_1_Loc;
     630/     929 : (MACRO)             	cpy2 R12,R7 
     631/     92D :                     ;D*E*A*D  R7
     632/     92D : (MACRO)             	ld2 R13,'O',sp,(84+1) 
     633/     939 : (MACRO)             	Ccall _mulu2
     634/     93C : (MACRO)             	cpy2 R7,R15 
     635/     940 :                     ;    Int_1_Loc = Int_2_Loc / Int_3_Loc;
     636/     940 : (MACRO)             	cpy2 R12,R7 
     637/     944 : (MACRO)             	ld2 R13,'O',sp,(82+1) 
     638/     950 : (MACRO)             	Ccall _divi2
     639/     953 : (MACRO)             	st2 R15,'O',sp,(84+1)
     640/     960 :                     ;    Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;
     641/     960 : (MACRO)             	ld2 R11,'O',sp,(82+1) 
     642/     96C : (MACRO)             	alu2 R13,R7,R11,sm,smb
     643/     976 :                     ;D*E*A*D  R7
     644/     976 :                     ;D*E*A*D  R11
     645/     976 :                     	
     646/     976 : (MACRO)             	cpy2 R15,R13
     647/     97A : (MACRO)             	shl2I	R13,1
     648/     980 : (MACRO)             	alu2 R15,R15,R13,add,adc
     649/     98A : (MACRO)             	shl2I	R13,1
     650/     990 : (MACRO)             	alu2 R15,R15,R13,add,adc
     651/     99A : (MACRO)             	ld2 R10,'O',sp,(84+1) 
     652/     9A6 : (MACRO)             	alu2 R7,R15,R10,sm,smb
     653/     9B0 :                     ;D*E*A*D  R10
     654/     9B0 :                     ;    Proc_2 (&Int_1_Loc);
     655/     9B0 : (MACRO)             	ldA2 R12,'O',sp,(84+1)
     656/     9B8 : (MACRO)             	Ccall _Proc_2
     657/     9BB :                     ;  } /* loop "for Run_Index" */
     658/     9BB :                     L62:
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 12 - 10/29/2020 11:28:14


     659/     9BB :                     ;  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
     660/     9BB : (MACRO)             	incm R1,1
     661/     9BC :                     L64:
     662/     9BC : (MACRO)             	jcI2 R0,R1,lbdf,L61 
     663/     9CE :                     ;  printf ("Execution ends!@#\n");
     664/     9CE : (MACRO)             	ldaD R12,L79
     665/     9D4 : (MACRO)             	Ccall _printf
     666/     9D7 :                     ;  printf ("\n");
     667/     9D7 : (MACRO)             	ldaD R12,L53
     668/     9DD : (MACRO)             	Ccall _printf
     669/     9E0 :                     ;  printf ("Final values of the variables used in the benchmark:\n");
     670/     9E0 : (MACRO)             	ldaD R12,L80
     671/     9E6 : (MACRO)             	Ccall _printf
     672/     9E9 :                     ;  printf ("\n");
     673/     9E9 : (MACRO)             	ldaD R12,L53
     674/     9EF : (MACRO)             	Ccall _printf
     675/     9F2 :                     ;  printf ("Int_Glob:            %d\n", Int_Glob);
     676/     9F2 : (MACRO)             	ldaD R12,L81
     677/     9F8 : (MACRO)             	ld2 R13,'D',(_Int_Glob),0 
     678/     A02 : (MACRO)             	Ccall _printf
     679/     A05 :                     ;  printf ("        should be:   %d\n", 5);
     680/     A05 : (MACRO)             	ldaD R12,L82
     681/     A0B : (MACRO)             	ldaD R13,5
     682/     A11 : (MACRO)             	Ccall _printf
     683/     A14 :                     ;  printf ("Bool_Glob:           %d\n", Bool_Glob);
     684/     A14 : (MACRO)             	ldaD R12,L83
     685/     A1A : (MACRO)             	ld2 R13,'D',(_Bool_Glob),0 
     686/     A24 : (MACRO)             	Ccall _printf
     687/     A27 :                     ;  printf ("        should be:   %d\n", 1);
     688/     A27 : (MACRO)             	ldaD R12,L82
     689/     A2D : (MACRO)             	ldaD R13,1
     690/     A33 : (MACRO)             	Ccall _printf
     691/     A36 :                     ;  printf ("Ch_1_Glob:           %c\n", Ch_1_Glob);
     692/     A36 : (MACRO)             	ldaD R12,L84
     693/     A3C : (MACRO)             	ld1 R13,'D',(_Ch_1_Glob),0
     694/     A44 : (MACRO)             	zExt R13 
     695/     A47 : (MACRO)             	Ccall _printf
     696/     A4A :                     ;  printf ("        should be:   %c\n", 'A');
     697/     A4A : (MACRO)             	ldaD R12,L85
     698/     A50 : (MACRO)             	ldaD R13,65
     699/     A56 : (MACRO)             	Ccall _printf
     700/     A59 :                     ;  printf ("Ch_2_Glob:           %c\n", Ch_2_Glob);
     701/     A59 : (MACRO)             	ldaD R12,L86
     702/     A5F : (MACRO)             	ld1 R13,'D',(_Ch_2_Glob),0
     703/     A67 : (MACRO)             	zExt R13 
     704/     A6A : (MACRO)             	Ccall _printf
     705/     A6D :                     ;  printf ("        should be:   %c\n", 'B');
     706/     A6D : (MACRO)             	ldaD R12,L85
     707/     A73 : (MACRO)             	ldaD R13,66
     708/     A79 : (MACRO)             	Ccall _printf
     709/     A7C :                     ;  printf ("Arr_1_Glob[8]:       %d\n", Arr_1_Glob[8]);
     710/     A7C : (MACRO)             	ldaD R12,L87
     711/     A82 : (MACRO)             	ld2 R13,'D',(_Arr_1_Glob+16),0 
     712/     A8C : (MACRO)             	Ccall _printf
     713/     A8F :                     ;  printf ("        should be:   %d\n", 7);
     714/     A8F : (MACRO)             	ldaD R12,L82
     715/     A95 : (MACRO)             	ldaD R13,7
     716/     A9B : (MACRO)             	Ccall _printf
     717/     A9E :                     ;  printf ("Arr_2_Glob[8][7]:    %d\n", Arr_2_Glob[8][7]);
     718/     A9E : (MACRO)             	ldaD R12,L89
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 13 - 10/29/2020 11:28:14


     719/     AA4 : (MACRO)             	ld2 R13,'D',(_Arr_2_Glob+800+14),0 
     720/     AAE : (MACRO)             	Ccall _printf
     721/     AB1 :                     ;  printf ("        should be:   Number_Of_Runs + 10\n");
     722/     AB1 : (MACRO)             	ldaD R12,L92
     723/     AB7 : (MACRO)             	Ccall _printf
     724/     ABA :                     ;  printf ("Ptr_Glob->\n");
     725/     ABA : (MACRO)             	ldaD R12,L93
     726/     AC0 : (MACRO)             	Ccall _printf
     727/     AC3 :                     ;  printf ("  Ptr_Comp:          %d\n", (int) Ptr_Glob->Ptr_Comp);
     728/     AC3 : (MACRO)             	ldaD R12,L94
     729/     AC9 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     730/     AD3 : (MACRO)             	ldn2s R11,R11	
     731/     ADA : (MACRO)             	cpy2 R13,R11 
     732/     ADE :                     ;D*E*A*D  R11
     733/     ADE : (MACRO)             	Ccall _printf
     734/     AE1 :                     ;  printf ("        should be:   (implementation-dependent)\n");
     735/     AE1 : (MACRO)             	ldaD R12,L95
     736/     AE7 : (MACRO)             	Ccall _printf
     737/     AEA :                     ;  printf ("  Discr:             %d\n", Ptr_Glob->Discr);
     738/     AEA : (MACRO)             	ldaD R12,L96
     739/     AF0 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     740/     AFA : (MACRO)             	ld2 R13,'O',R11,(2) 
     741/     B06 :                     ;D*E*A*D  R11
     742/     B06 : (MACRO)             	Ccall _printf
     743/     B09 :                     ;  printf ("        should be:   %d\n", 0);
     744/     B09 : (MACRO)             	ldaD R12,L82
     745/     B0F : (MACRO)             	ld2z R13
     746/     B13 : (MACRO)             	Ccall _printf
     747/     B16 :                     ;  printf ("  Enum_Comp:         %d\n", Ptr_Glob->variant.var_1.Enum_Comp);
     748/     B16 : (MACRO)             	ldaD R12,L97
     749/     B1C : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     750/     B26 : (MACRO)             	ld2 R13,'O',R11,(4) 
     751/     B32 :                     ;D*E*A*D  R11
     752/     B32 : (MACRO)             	Ccall _printf
     753/     B35 :                     ;  printf ("        should be:   %d\n", 2);
     754/     B35 : (MACRO)             	ldaD R12,L82
     755/     B3B : (MACRO)             	ldaD R13,2
     756/     B41 : (MACRO)             	Ccall _printf
     757/     B44 :                     ;  printf ("  Int_Comp:          %d\n", Ptr_Glob->variant.var_1.Int_Comp);
     758/     B44 : (MACRO)             	ldaD R12,L98
     759/     B4A : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     760/     B54 : (MACRO)             	ld2 R13,'O',R11,(6) 
     761/     B60 :                     ;D*E*A*D  R11
     762/     B60 : (MACRO)             	Ccall _printf
     763/     B63 :                     ;  printf ("        should be:   %d\n", 17);
     764/     B63 : (MACRO)             	ldaD R12,L82
     765/     B69 : (MACRO)             	ldaD R13,17
     766/     B6F : (MACRO)             	Ccall _printf
     767/     B72 :                     ;  printf ("  Str_Comp:          %s\n", Ptr_Glob->variant.var_1.Str_Comp);
     768/     B72 : (MACRO)             	ldaD R12,L99
     769/     B78 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     770/     B82 : (MACRO)             	ldA2 R13,'O',R11,(8)
     771/     B8A :                     ;D*E*A*D  R11
     772/     B8A : (MACRO)             	Ccall _printf
     773/     B8D :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
     774/     B8D : (MACRO)             	ldaD R12,L100
     775/     B93 : (MACRO)             	Ccall _printf
     776/     B96 :                     ;  printf ("Next_Ptr_Glob->\n");
     777/     B96 : (MACRO)             	ldaD R12,L101
     778/     B9C : (MACRO)             	Ccall _printf
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 14 - 10/29/2020 11:28:14


     779/     B9F :                     ;  printf ("  Ptr_Comp:          %d\n", (int) Next_Ptr_Glob->Ptr_Comp);
     780/     B9F : (MACRO)             	ldaD R12,L94
     781/     BA5 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 
     782/     BAF : (MACRO)             	ldn2s R11,R11	
     783/     BB6 : (MACRO)             	cpy2 R13,R11 
     784/     BBA :                     ;D*E*A*D  R11
     785/     BBA : (MACRO)             	Ccall _printf
     786/     BBD :                     ;  printf ("        should be:   (implementation-dependent), same as above\n");
     787/     BBD : (MACRO)             	ldaD R12,L102
     788/     BC3 : (MACRO)             	Ccall _printf
     789/     BC6 :                     ;  printf ("  Discr:             %d\n", Next_Ptr_Glob->Discr);
     790/     BC6 : (MACRO)             	ldaD R12,L96
     791/     BCC : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 
     792/     BD6 : (MACRO)             	ld2 R13,'O',R11,(2) 
     793/     BE2 :                     ;D*E*A*D  R11
     794/     BE2 : (MACRO)             	Ccall _printf
     795/     BE5 :                     ;  printf ("        should be:   %d\n", 0);
     796/     BE5 : (MACRO)             	ldaD R12,L82
     797/     BEB : (MACRO)             	ld2z R13
     798/     BEF : (MACRO)             	Ccall _printf
     799/     BF2 :                     ;  printf ("  Enum_Comp:         %d\n", Next_Ptr_Glob->variant.var_1.Enum_Comp);
     800/     BF2 : (MACRO)             	ldaD R12,L97
     801/     BF8 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 
     802/     C02 : (MACRO)             	ld2 R13,'O',R11,(4) 
     803/     C0E :                     ;D*E*A*D  R11
     804/     C0E : (MACRO)             	Ccall _printf
     805/     C11 :                     ;  printf ("        should be:   %d\n", 1);
     806/     C11 : (MACRO)             	ldaD R12,L82
     807/     C17 : (MACRO)             	ldaD R13,1
     808/     C1D : (MACRO)             	Ccall _printf
     809/     C20 :                     ;  printf ("  Int_Comp:          %d\n", Next_Ptr_Glob->variant.var_1.Int_Comp);
     810/     C20 : (MACRO)             	ldaD R12,L98
     811/     C26 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 
     812/     C30 : (MACRO)             	ld2 R13,'O',R11,(6) 
     813/     C3C :                     ;D*E*A*D  R11
     814/     C3C : (MACRO)             	Ccall _printf
     815/     C3F :                     ;  printf ("        should be:   %d\n", 18);
     816/     C3F : (MACRO)             	ldaD R12,L82
     817/     C45 : (MACRO)             	ldaD R13,18
     818/     C4B : (MACRO)             	Ccall _printf
     819/     C4E :                     ;  printf ("  Str_Comp:          %s\n",
     820/     C4E : (MACRO)             	ldaD R12,L99
     821/     C54 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 
     822/     C5E : (MACRO)             	ldA2 R13,'O',R11,(8)
     823/     C66 :                     ;D*E*A*D  R11
     824/     C66 : (MACRO)             	Ccall _printf
     825/     C69 :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
     826/     C69 : (MACRO)             	ldaD R12,L100
     827/     C6F : (MACRO)             	Ccall _printf
     828/     C72 :                     ;  printf ("Int_1_Loc:           %d\n", Int_1_Loc);
     829/     C72 : (MACRO)             	ldaD R12,L103
     830/     C78 : (MACRO)             	ld2 R13,'O',sp,(84+1) 
     831/     C84 : (MACRO)             	Ccall _printf
     832/     C87 :                     ;  printf ("        should be:   %d\n", 5);
     833/     C87 : (MACRO)             	ldaD R12,L82
     834/     C8D : (MACRO)             	ldaD R13,5
     835/     C93 : (MACRO)             	Ccall _printf
     836/     C96 :                     ;  printf ("Int_2_Loc:           %d\n", Int_2_Loc);
     837/     C96 : (MACRO)             	ldaD R12,L104
     838/     C9C : (MACRO)             	cpy2 R13,R7 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 15 - 10/29/2020 11:28:14


     839/     CA0 :                     ;D*E*A*D  R7
     840/     CA0 : (MACRO)             	Ccall _printf
     841/     CA3 :                     ;  printf ("        should be:   %d\n", 13);
     842/     CA3 : (MACRO)             	ldaD R12,L82
     843/     CA9 : (MACRO)             	ldaD R13,13
     844/     CAF : (MACRO)             	Ccall _printf
     845/     CB2 :                     ;  printf ("Int_3_Loc:           %d\n", Int_3_Loc);
     846/     CB2 : (MACRO)             	ldaD R12,L105
     847/     CB8 : (MACRO)             	ld2 R13,'O',sp,(82+1) 
     848/     CC4 : (MACRO)             	Ccall _printf
     849/     CC7 :                     ;  printf ("        should be:   %d\n", 7);
     850/     CC7 : (MACRO)             	ldaD R12,L82
     851/     CCD : (MACRO)             	ldaD R13,7
     852/     CD3 : (MACRO)             	Ccall _printf
     853/     CD6 :                     ;  printf ("Enum_Loc:            %d\n", Enum_Loc);
     854/     CD6 : (MACRO)             	ldaD R12,L106
     855/     CDC : (MACRO)             	ld2 R13,'O',sp,(80+1) 
     856/     CE8 : (MACRO)             	Ccall _printf
     857/     CEB :                     ;  printf ("        should be:   %d\n", 1);
     858/     CEB : (MACRO)             	ldaD R12,L82
     859/     CF1 : (MACRO)             	ldaD R13,1
     860/     CF7 : (MACRO)             	Ccall _printf
     861/     CFA :                     ;  printf ("Str_1_Loc:           %s\n", Str_1_Loc);
     862/     CFA : (MACRO)             	ldaD R12,L107
     863/     D00 : (MACRO)             	ldA2 R13,'O',sp,(18+1)
     864/     D08 : (MACRO)             	Ccall _printf
     865/     D0B :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, 1'ST STRING\n");
     866/     D0B : (MACRO)             	ldaD R12,L108
     867/     D11 : (MACRO)             	Ccall _printf
     868/     D14 :                     ;  printf ("Str_2_Loc:           %s\n", Str_2_Loc);
     869/     D14 : (MACRO)             	ldaD R12,L109
     870/     D1A : (MACRO)             	ldA2 R13,'O',sp,(49+1)
     871/     D22 : (MACRO)             	Ccall _printf
     872/     D25 :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, 2'ND STRING\n");
     873/     D25 : (MACRO)             	ldaD R12,L110
     874/     D2B : (MACRO)             	Ccall _printf
     875/     D2E :                     ;  printf ("done\n");
     876/     D2E : (MACRO)             	ldaD R12,L111
     877/     D34 : (MACRO)             	Ccall _printf
     878/     D37 : (MACRO)             	ld2z R15
     879/     D3B :                     ;}
     880/     D3B :                     L45:
     881/     D3B : (MACRO)             	release 8
     882/     D43 : (MACRO)             	popr R7
     883/     D48 : (MACRO)             	popr R6
     884/     D4D : (MACRO)             	popr R1
     885/     D52 : (MACRO)             	popr R0
     886/     D57 : (MACRO)             	release 70
     887/     D5F : (MACRO)             	Cretn
     888/     D60 :                     
     889/     D60 :                     ;;function_end$$ _main
     890/     D60 :                     ;;function_start _Proc_1 int function(pointer to struct record)
     891/     D60 :                     _Proc_1:		
     892/     D60 : (MACRO)             	pushr R6
     893/     D64 : (MACRO)             	pushr R7
     894/     D68 : (MACRO)             	reserve 6
     895/     D6E : (MACRO)             	cpy2 R7,R12
     896/     D72 :                     ;{
     897/     D72 :                     ;  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
     898/     D72 : (MACRO)             	ldn2 R6,R7	
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 16 - 10/29/2020 11:28:14


     899/     D77 :                     ;  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     900/     D77 : (MACRO)             	ldn2 R11,R7	
     901/     D7C : (MACRO)             	ld2 R8,'D',(_Ptr_Glob),0 
     902/     D86 : (MACRO)             	blkcpy R11,R8,39
     903/     D9B :                     ;D*E*A*D  R11
     904/     D9B :                     ;D*E*A*D  R8
     905/     D9B :                     ;  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
     906/     D9B : (MACRO)             	st2I 5,'O',R7,(6)
     907/     DAA :                     ;  Next_Record->variant.var_1.Int_Comp
     908/     DAA : (MACRO)             	ld2 R11,'O',R7,(6) 
     909/     DB6 : (MACRO)             	st2 R11,'O',R6,(6)
     910/     DC3 :                     ;D*E*A*D  R11
     911/     DC3 :                     ;  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
     912/     DC3 : (MACRO)             	mvcn2 R6,R7	
     913/     DCA :                     ;  Proc_3 (&Next_Record->Ptr_Comp);
     914/     DCA : (MACRO)             	cpy2 R12,R6 
     915/     DCE : (MACRO)             	Ccall _Proc_3
     916/     DD1 :                     ;  if (Next_Record->Discr == Ident_1)
     917/     DD1 : (MACRO)             	ld2 R11,'O',R6,(2) 
     918/     DDD : (MACRO)             	jnzU2 R11,L113
     919/     DE5 :                     ;D*E*A*D  R11
     920/     DE5 :                     ;  {
     921/     DE5 :                     ;    Next_Record->variant.var_1.Int_Comp = 6;
     922/     DE5 : (MACRO)             	st2I 6,'O',R6,(6)
     923/     DF4 :                     ;    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp,
     924/     DF4 : (MACRO)             	ld2 R12,'O',R7,(4) 
     925/     E00 :                     ;D*E*A*D  R7
     926/     E00 : (MACRO)             	cpy2 R13,R6
     927/     E04 : (MACRO)             	incm R13,4
     928/     E08 : (MACRO)             	Ccall _Proc_6
     929/     E0B :                     ;    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
     930/     E0B : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
     931/     E15 : (MACRO)             	mvcn2 R6,R11	
     932/     E1C :                     ;D*E*A*D  R11
     933/     E1C :                     ;    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10,
     934/     E1C : (MACRO)             	ldA2 R11,'O',R6,(6)
     935/     E24 :                     ;D*E*A*D  R6
     936/     E24 : (MACRO)             	ldn2 R12,R11	
     937/     E29 : (MACRO)             	ldaD R13,10
     938/     E2F : (MACRO)             	st2 R11,'O',sp,(4+1)
     939/     E3C :                     ;D*E*A*D  R11
     940/     E3C : (MACRO)             	Ccall _Proc_7
     941/     E3F :                     ;  }
     942/     E3F : C0 0E 5C            	lbr L114
     943/     E42 :                     L113:
     944/     E42 :                     ;    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
     945/     E42 : (MACRO)             	ldn2 R8,R7	
     946/     E47 : (MACRO)             	blkcpy R7,R8,39
     947/     E5C :                     ;D*E*A*D  R7
     948/     E5C :                     ;D*E*A*D  R8
     949/     E5C :                     L114:
     950/     E5C : (MACRO)             	ld2z R15
     951/     E60 :                     ;} /* Proc_1 */
     952/     E60 :                     L112:
     953/     E60 : (MACRO)             	release 6
     954/     E66 : (MACRO)             	popr R7
     955/     E6B : (MACRO)             	popr R6
     956/     E70 : (MACRO)             	Cretn
     957/     E71 :                     
     958/     E71 :                     ;;function_end$$ _Proc_1
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 17 - 10/29/2020 11:28:14


     959/     E71 :                     ;;function_start _Proc_2 int function(pointer to int)
     960/     E71 :                     _Proc_2:		
     961/     E71 : (MACRO)             	pushr R6
     962/     E75 : (MACRO)             	pushr R7
     963/     E79 :                     ;{
     964/     E79 :                     ;  Int_Loc = *Int_Par_Ref + 10;
     965/     E79 : (MACRO)             	ldn2 R11,R12	
     966/     E7E : (MACRO)             	ldA2 R6,'O',R11,(10)
     967/     E86 :                     ;D*E*A*D  R11
     968/     E86 :                     L116:
     969/     E86 :                     ;    if (Ch_1_Glob == 'A')
     970/     E86 : (MACRO)             	ldaD R11,_Ch_1_Glob
     971/     E8C : (MACRO)             	ldn1 R11,R11
     972/     E8E : (MACRO)             	jneU1I R11,65,L119	
     973/     E94 :                     ;D*E*A*D  R11
     974/     E94 :                     ;    {
     975/     E94 :                     ;      Int_Loc -= 1;
     976/     E94 : (MACRO)             	decm R6,1	
     977/     E95 :                     ;      *Int_Par_Ref = Int_Loc - Int_Glob;
     978/     E95 : (MACRO)             	ld2 R11,'D',(_Int_Glob),0 
     979/     E9F : (MACRO)             	alu2 R11,R6,R11,sm,smb
     980/     EA9 : (MACRO)             	str2 R11,R12	
     981/     EAF :                     ;D*E*A*D  R11
     982/     EAF :                     ;      Enum_Loc = Ident_1;
     983/     EAF : (MACRO)             	ld2z R7
     984/     EB3 :                     ;    } /* if */
     985/     EB3 :                     L119:
     986/     EB3 :                     L117:
     987/     EB3 :                     ;  while (Enum_Loc != Ident_1); /* true */
     988/     EB3 : (MACRO)             	jnzU2 R7,L116
     989/     EBB : (MACRO)             	ld2z R15
     990/     EBF :                     ;} /* Proc_2 */
     991/     EBF :                     L115:
     992/     EBF : (MACRO)             	popr R7
     993/     EC4 : (MACRO)             	popr R6
     994/     EC9 : (MACRO)             	Cretn
     995/     ECA :                     
     996/     ECA :                     ;;function_end$$ _Proc_2
     997/     ECA :                     ;;function_start _Proc_3 int function(pointer to pointer to struct record)
     998/     ECA :                     _Proc_3:		
     999/     ECA : (MACRO)             	reserve 6
    1000/     ED0 : (MACRO)             	st2 R12,'O',sp,(8+1)
    1001/     EDD :                     ;{
    1002/     EDD :                     ;  if (Ptr_Glob != Null)
    1003/     EDD : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
    1004/     EE7 : (MACRO)             	jzU2 R11,L122
    1005/     EEF :                     ;D*E*A*D  R11
    1006/     EEF :                     ;    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
    1007/     EEF : (MACRO)             	ld2 R11,'O',sp,(8+1) 
    1008/     EFB : (MACRO)             	ld2 R10,'D',(_Ptr_Glob),0 
    1009/     F05 : (MACRO)             	mvcn2 R11,R10	
    1010/     F0C :                     ;D*E*A*D  R11
    1011/     F0C :                     ;D*E*A*D  R10
    1012/     F0C :                     L122:
    1013/     F0C :                     ;  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
    1014/     F0C : (MACRO)             	ldaD R12,10
    1015/     F12 : (MACRO)             	ld2 R13,'D',(_Int_Glob),0 
    1016/     F1C : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 
    1017/     F26 : (MACRO)             	ldA2 R11,'O',R11,(6)
    1018/     F2E : (MACRO)             	st2 R11,'O',sp,(4+1)
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 18 - 10/29/2020 11:28:14


    1019/     F3B :                     ;D*E*A*D  R11
    1020/     F3B : (MACRO)             	Ccall _Proc_7
    1021/     F3E : (MACRO)             	ld2z R15
    1022/     F42 :                     ;} /* Proc_3 */
    1023/     F42 :                     L121:
    1024/     F42 : (MACRO)             	release 6
    1025/     F48 : (MACRO)             	Cretn
    1026/     F49 :                     
    1027/     F49 :                     ;;function_end$$ _Proc_3
    1028/     F49 :                     ;;function_start _Proc_4 int function(void)
    1029/     F49 :                     _Proc_4:		
    1030/     F49 : (MACRO)             	reserve 2
    1031/     F4B : (MACRO)             	pushr R7
    1032/     F4F :                     ;{
    1033/     F4F :                     ;  Bool_Loc = Ch_1_Glob == 'A';
    1034/     F4F : (MACRO)             	ldaD R11,_Ch_1_Glob
    1035/     F55 : (MACRO)             	ldn1 R11,R11
    1036/     F57 : (MACRO)             	jneU1I R11,65,L126	
    1037/     F5D :                     ;D*E*A*D  R11
    1038/     F5D : (MACRO)             	ldaD R7,1
    1039/     F63 : C0 0F 6A            	lbr L127
    1040/     F66 :                     L126:
    1041/     F66 : (MACRO)             	ld2z R7
    1042/     F6A :                     L127:
    1043/     F6A : (MACRO)             	st2 R7,'O',sp,(2+1)
    1044/     F77 :                     ;D*E*A*D  R7
    1045/     F77 :                     ;  Bool_Glob = Bool_Loc | Bool_Glob;
    1046/     F77 : (MACRO)             	ld2 R11,'O',sp,(2+1) 
    1047/     F83 : (MACRO)             	ld2 R10,'D',(_Bool_Glob),0 
    1048/     F8D : (MACRO)             	alu2 R11,R11,R10,or,or
    1049/     F97 :                     ;D*E*A*D  R10
    1050/     F97 : (MACRO)             	st2 R11,'D',(_Bool_Glob),0
    1051/     FA2 :                     ;D*E*A*D  R11
    1052/     FA2 :                     ;  Ch_2_Glob = 'B';
    1053/     FA2 : (MACRO)             	ldaD R11,_Ch_2_Glob
    1054/     FA8 : (MACRO)             	str1I 66,R11
    1055/     FAB :                     ;D*E*A*D  R11
    1056/     FAB : (MACRO)             	ld2z R15
    1057/     FAF :                     ;} /* Proc_4 */
    1058/     FAF :                     L124:
    1059/     FAF : (MACRO)             	popr R7
    1060/     FB4 : (MACRO)             	release 2
    1061/     FB6 : (MACRO)             	Cretn
    1062/     FB7 :                     
    1063/     FB7 :                     ;;function_end$$ _Proc_4
    1064/     FB7 :                     ;;function_start _Proc_5 int function(void)
    1065/     FB7 :                     _Proc_5:		
    1066/     FB7 :                     ;{
    1067/     FB7 :                     ;  Ch_1_Glob = 'A';
    1068/     FB7 : (MACRO)             	ldaD R11,_Ch_1_Glob
    1069/     FBD : (MACRO)             	str1I 65,R11
    1070/     FC0 :                     ;D*E*A*D  R11
    1071/     FC0 :                     ;  Bool_Glob = false;
    1072/     FC0 : (MACRO)             	st2I 0,'D',(_Bool_Glob),0
    1073/     FCD : (MACRO)             	ld2z R15
    1074/     FD1 :                     ;} /* Proc_5 */
    1075/     FD1 :                     L128:
    1076/     FD1 : (MACRO)             	Cretn
    1077/     FD2 :                     
    1078/     FD2 :                     ;;function_end$$ _Proc_5
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 19 - 10/29/2020 11:28:14


    1079/     FD2 :                     ;;function_start _strncmp int function(pointer to const char,pointer to const char,unsigned int)
    1080/     FD2 :                     _strncmp:		
    1081/     FD2 : (MACRO)             	pushr R6
    1082/     FD6 : (MACRO)             	pushr R7
    1083/     FDA : (MACRO)             	ld2 R7,'O',sp,(10+1) 
    1084/     FE6 :                     ;{
    1085/     FE6 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1086/     FE6 : C0 10 41            	lbr L133
    1087/     FE9 :                     L130:
    1088/     FE9 :                     ;	if (*s1 != *s2)
    1089/     FE9 : (MACRO)             	ldn1 R11,R12	
    1090/     FEB : (MACRO)             	zExt R11 
    1091/     FEE : (MACRO)             	ldn1 R10,R13	
    1092/     FF0 : (MACRO)             	zExt R10 
    1093/     FF3 : (MACRO)             	jeqI2 R11,R10,L134
    1094/    1001 :                     ;D*E*A*D  R11
    1095/    1001 :                     ;D*E*A*D  R10
    1096/    1001 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    1097/    1001 : (MACRO)             	ldn1 R11,R12	
    1098/    1003 : (MACRO)             	zExt R11 
    1099/    1006 : (MACRO)             	ldn1 R10,R13	
    1100/    1008 : (MACRO)             	zExt R10 
    1101/    100B : (MACRO)             	jcI2 R11,R10,lbdf,L137
    1102/    101D :                     ;D*E*A*D  R11
    1103/    101D :                     ;D*E*A*D  R10
    1104/    101D : (MACRO)             	ldaD R6,-1
    1105/    1023 : C0 10 2C            	lbr L138
    1106/    1026 :                     L137:
    1107/    1026 : (MACRO)             	ldaD R6,1
    1108/    102C :                     L138:
    1109/    102C : (MACRO)             	cpy2 R15,R6 
    1110/    1030 :                     ;D*E*A*D  R6
    1111/    1030 : C0 10 4D            	lbr L129
    1112/    1033 :                     L134:
    1113/    1033 :                     ;	else if (*s1 == '\0')
    1114/    1033 : 0C                  	ldn    R12
    1115/    1034 : CA 10 3E            	lbnz   L139
    1116/    1037 :                     ;D*E*A*D  R11 - but not in vain I
    1117/    1037 :                     ;	    return 0;
    1118/    1037 : (MACRO)             	ld2z R15
    1119/    103B : C0 10 4D            	lbr L129
    1120/    103E :                     L139:
    1121/    103E :                     L131:
    1122/    103E :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1123/    103E : (MACRO)             	incm R12,1
    1124/    103F : (MACRO)             	incm R13,1
    1125/    1040 : (MACRO)             	decm R7,1	
    1126/    1041 :                     L133:
    1127/    1041 : (MACRO)             	jnzU2 R7,L130
    1128/    1049 :                     ;    return 0;
    1129/    1049 : (MACRO)             	ld2z R15
    1130/    104D :                     L129:
    1131/    104D : (MACRO)             	popr R7
    1132/    1052 : (MACRO)             	popr R6
    1133/    1057 : (MACRO)             	Cretn
    1134/    1058 :                     
    1135/    1058 :                     ;;function_end$$ _strncmp
    1136/    1058 :                     ;;function_start _strlen unsigned int function(pointer to char)
    1137/    1058 :                     _strlen:		
    1138/    1058 : (MACRO)             	pushr R7
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 20 - 10/29/2020 11:28:14


    1139/    105C :                     ;{
    1140/    105C :                     ;	unsigned int slen = 0 ;
    1141/    105C : (MACRO)             	ld2z R7
    1142/    1060 : C0 10 65            	lbr L143
    1143/    1063 :                     L142:
    1144/    1063 :                     ;	while (*str != 0) {
    1145/    1063 :                     ;      slen++ ;
    1146/    1063 : (MACRO)             	incm R7,1
    1147/    1064 :                     ;      str++ ;
    1148/    1064 : (MACRO)             	incm R12,1
    1149/    1065 :                     ;   }
    1150/    1065 :                     L143:
    1151/    1065 :                     ;	while (*str != 0) {
    1152/    1065 : 0C                  	ldn    R12
    1153/    1066 : CA 10 63            	lbnz   L142
    1154/    1069 :                     ;D*E*A*D  R11 - but not in vain I
    1155/    1069 :                     ;   return slen;
    1156/    1069 : (MACRO)             	cpy2 R15,R7 
    1157/    106D :                     ;D*E*A*D  R7
    1158/    106D :                     L141:
    1159/    106D : (MACRO)             	popr R7
    1160/    1072 : (MACRO)             	Cretn
    1161/    1073 :                     
    1162/    1073 :                     ;;function_end$$ _strlen
    1163/    1073 :                     ;;function_start _printstr void function(pointer to char)
    1164/    1073 :                     _printstr:		
    1165/    1073 : (MACRO)             	pushr R7
    1166/    1077 : (MACRO)             	reserve 4
    1167/    107B : (MACRO)             	cpy2 R7,R12
    1168/    107F :                     ;void printstr(char *ptr){
    1169/    107F : C0 10 95            	lbr L147
    1170/    1082 :                     L146:
    1171/    1082 :                     ;    while(*ptr){
    1172/    1082 :                     ;		putc(*ptr++); //jan 29
    1173/    1082 : (MACRO)             	ldaD R12,7
    1174/    1088 : (MACRO)             	cpy2 R11,R7 
    1175/    108C : (MACRO)             	incm R7,1
    1176/    108D : (MACRO)             	ldn1 R13,R11	
    1177/    108F :                     ;D*E*A*D  R11
    1178/    108F : (MACRO)             	zExt R13 
    1179/    1092 : (MACRO)             	Ccall _out
    1180/    1095 :                     ;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
    1181/    1095 : (MACRO)              nop1806
    1182/    1095 : (MACRO)              nop1806
    1183/    1095 : (MACRO)              nop1806
    1184/    1095 :                     ;	}
    1185/    1095 :                     L147:
    1186/    1095 :                     ;    while(*ptr){
    1187/    1095 : 07                  	ldn    R7
    1188/    1096 : CA 10 82            	lbnz   L146
    1189/    1099 :                     ;D*E*A*D  R11 - but not in vain I
    1190/    1099 :                     ;}
    1191/    1099 :                     L145:
    1192/    1099 : (MACRO)             	release 4
    1193/    109D : (MACRO)             	popr R7
    1194/    10A2 : (MACRO)             	Cretn
    1195/    10A3 :                     
    1196/    10A3 :                     ;;function_end$$ _printstr
    1197/    10A3 :                     ;;function_start _itoa pointer to char function(int,pointer to char)
    1198/    10A3 :                     _itoa:		
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 21 - 10/29/2020 11:28:14


    1199/    10A3 : (MACRO)             	reserve 2
    1200/    10A5 : (MACRO)             	pushr R0
    1201/    10A9 : (MACRO)             	pushr R1
    1202/    10AD : (MACRO)             	pushr R6
    1203/    10B1 : (MACRO)             	pushr R7
    1204/    10B5 : (MACRO)             	reserve 4
    1205/    10B9 : (MACRO)             	st2 R12,'O',sp,(16+1)
    1206/    10C6 : 1E                  	inc memaddr				
    1207/    10C7 : (MACRO)             	str2 R13,memaddr
    1208/    10CD :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1209/    10CD :                     ;	unsigned int flag=0;
    1210/    10CD : (MACRO)             	ld2z R0
    1211/    10D1 :                     ;	char * bptr; bptr=buffer;
    1212/    10D1 : (MACRO)             	ld2 R11,'O',sp,(18+1) 
    1213/    10DD : (MACRO)             	st2 R11,'O',sp,(12+1)
    1214/    10EA :                     ;D*E*A*D  R11
    1215/    10EA :                     ;	if (s<0){
    1216/    10EA : (MACRO)             	ld2 R11,'O',sp,(16+1) 
    1217/    10F6 : (MACRO)             	jcI2I R11,0,lbdf,L151
    1218/    1107 :                     ;D*E*A*D  R11
    1219/    1107 :                     ;		*bptr='-';bptr++;
    1220/    1107 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
    1221/    1113 : (MACRO)             	str1I 45,R11
    1222/    1116 :                     ;D*E*A*D  R11
    1223/    1116 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
    1224/    1122 : (MACRO)             	incm R11,1
    1225/    1123 : (MACRO)             	st2 R11,'O',sp,(12+1)
    1226/    1130 :                     ;D*E*A*D  R11
    1227/    1130 :                     ;		n=-s;
    1228/    1130 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
    1229/    113C : (MACRO)             	negI2 R11,R11 
    1230/    1145 : (MACRO)             	cpy2 R6,R11 
    1231/    1149 :                     ;D*E*A*D  R11
    1232/    1149 :                     ;	} else{
    1233/    1149 : C0 11 5C            	lbr L152
    1234/    114C :                     L151:
    1235/    114C :                     ;		n=s;
    1236/    114C : (MACRO)             	ld2 R11,'O',sp,(16+1) 
    1237/    1158 : (MACRO)             	cpy2 R6,R11 
    1238/    115C :                     ;D*E*A*D  R11
    1239/    115C :                     ;	}
    1240/    115C :                     L152:
    1241/    115C :                     ;	k=10000;
    1242/    115C : (MACRO)             	ldaD R7,10000
    1243/    1162 : C0 11 E7            	lbr L154
    1244/    1165 :                     L153:
    1245/    1165 :                     ;	while(k>0){
    1246/    1165 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1247/    1165 : (MACRO)             	ld2z R1
    1248/    1169 : C0 11 77            	lbr L159
    1249/    116C :                     L156:
    1250/    116C :                     L157:
    1251/    116C : (MACRO)             	incm R1,1
    1252/    116D : (MACRO)             	alu2 R6,R6,R7,sm,smb
    1253/    1177 :                     L159:
    1254/    1177 : (MACRO)             	jcU2 R6,R7,lbdf,L156 
    1255/    1184 :                     ;		if (flag || r>0||k==1){
    1256/    1184 : (MACRO)             	jnzU2 R0,L163
    1257/    118C : (MACRO)             	jnzU2 R1,L163
    1258/    1194 : (MACRO)             	jneU2I R7,1,L160
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 22 - 10/29/2020 11:28:14


    1259/    11A0 :                     L163:
    1260/    11A0 :                     ;			*bptr=('0'+r);bptr++;
    1261/    11A0 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
    1262/    11AC : (MACRO)             	ldA2 R10,'O',R1,(48)
    1263/    11B4 :                     ;D*E*A*D  R1
    1264/    11B4 : (MACRO)             	str1 R10,R11
    1265/    11B6 :                     ;D*E*A*D  R10
    1266/    11B6 :                     ;D*E*A*D  R11
    1267/    11B6 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
    1268/    11C2 : (MACRO)             	incm R11,1
    1269/    11C3 : (MACRO)             	st2 R11,'O',sp,(12+1)
    1270/    11D0 :                     ;D*E*A*D  R11
    1271/    11D0 :                     ;			flag='y';
    1272/    11D0 : (MACRO)             	ldaD R0,121
    1273/    11D6 :                     ;		}
    1274/    11D6 :                     L160:
    1275/    11D6 :                     ;		k=k/10;
    1276/    11D6 : (MACRO)             	cpy2 R12,R7 
    1277/    11DA :                     ;D*E*A*D  R7
    1278/    11DA : (MACRO)             	ldaD R13,10
    1279/    11E0 : (MACRO)             	Ccall _divu2
    1280/    11E3 : (MACRO)             	cpy2 R7,R15 
    1281/    11E7 :                     ;	}
    1282/    11E7 :                     L154:
    1283/    11E7 :                     ;	while(k>0){
    1284/    11E7 : (MACRO)             	jnzU2 R7,L153
    1285/    11EF :                     ;	*bptr='\0';
    1286/    11EF : (MACRO)             	ld2 R11,'O',sp,(12+1) 
    1287/    11FB : (MACRO)             	str1I 0,R11
    1288/    11FE :                     ;D*E*A*D  R11
    1289/    11FE :                     ;	return buffer;
    1290/    11FE : (MACRO)             	ld2 R15,'O',sp,(18+1) 
    1291/    120A :                     L150:
    1292/    120A : (MACRO)             	release 4
    1293/    120E : (MACRO)             	popr R7
    1294/    1213 : (MACRO)             	popr R6
    1295/    1218 : (MACRO)             	popr R1
    1296/    121D : (MACRO)             	popr R0
    1297/    1222 : (MACRO)             	release 2
    1298/    1224 : (MACRO)             	Cretn
    1299/    1225 :                     
    1300/    1225 :                     ;;function_end$$ _itoa
    1301/    1225 :                     ;;function_start _ltoa pointer to char function(long int,pointer to char)
    1302/    1225 :                     _ltoa:		
    1303/    1225 : (MACRO)             	pushr R1
    1304/    1229 : (MACRO)             	pushr R6
    1305/    122D : (MACRO)             	pushr R7
    1306/    1231 : (MACRO)             	reserve 8
    1307/    1239 : (MACRO)             	cpy4 RL6,RL12
    1308/    1241 :                     ;D*E*A*D  RL12
    1309/    1241 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1310/    1241 :                     ;	char* bptr=buffer;
    1311/    1241 : (MACRO)             	ld2 R1,'O',sp,(20+1) 
    1312/    124D :                     ;	if (s<0){
    1313/    124D : (MACRO)             	ldI4 RL10,0 
    1314/    1259 : (MACRO)             	jcI4 RL6,RL10,lbdf,L165
    1315/    1275 :                     ;D*E*A*D  RL10
    1316/    1275 :                     ;		*bptr++='-';
    1317/    1275 : (MACRO)             	cpy2 R11,R1 
    1318/    1279 : (MACRO)             	incm R1,1
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 23 - 10/29/2020 11:28:14


    1319/    127A : (MACRO)             	str1I 45,R11
    1320/    127D :                     ;D*E*A*D  R11
    1321/    127D :                     ;		s=-s;
    1322/    127D : (MACRO)             	negI4 RL6,RL6 
    1323/    129D :                     ;	}
    1324/    129D :                     L165:
    1325/    129D :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    1326/    129D : (MACRO)             	cpy4 Rp1p2,RL6
    1327/    12A5 :                     ;D*E*A*D  RL6
    1328/    12A5 : (MACRO)             	st2 R1,'O',sp,(4+1)
    1329/    12B2 : (MACRO)             	st2i 1,'O',sp,(6+1)
    1330/    12C1 :                     ;D*E*A*D  R11 - but not in vain A
    1331/    12C1 : (MACRO)             	Ccall _dubdabx
    1332/    12C4 : (MACRO)             	cpy2 R11,R15 
    1333/    12C8 : (MACRO)             	cpy2 R12,R1 
    1334/    12CC :                     ;D*E*A*D  R1
    1335/    12CC : (MACRO)             	cpy2 R13,R11 
    1336/    12D0 :                     ;D*E*A*D  R11
    1337/    12D0 : (MACRO)             	Ccall _strcpy
    1338/    12D3 :                     ;	return buffer;
    1339/    12D3 : (MACRO)             	ld2 R15,'O',sp,(20+1) 
    1340/    12DF :                     L164:
    1341/    12DF : (MACRO)             	release 8
    1342/    12E7 : (MACRO)             	popr R7
    1343/    12EC : (MACRO)             	popr R6
    1344/    12F1 : (MACRO)             	popr R1
    1345/    12F6 : (MACRO)             	Cretn
    1346/    12F7 :                     
    1347/    12F7 :                     ;;function_end$$ _ltoa
    1348/    12F7 :                     ;;function_start _printint void function(int)
    1349/    12F7 :                     _printint:		
    1350/    12F7 : (MACRO)             	reserve 12
    1351/    1301 : (MACRO)             	st2 R12,'O',sp,(14+1)
    1352/    130E :                     ;void printint(int s){ //print an integer
    1353/    130E :                     ;	itoa(s,buffer);
    1354/    130E : (MACRO)             	ld2 R12,'O',sp,(14+1) 
    1355/    131A : (MACRO)             	ldA2 R13,'O',sp,(4+1)
    1356/    1322 : (MACRO)             	Ccall _itoa
    1357/    1325 :                     ;	printstr(buffer);
    1358/    1325 : (MACRO)             	ldA2 R12,'O',sp,(4+1)
    1359/    132D : (MACRO)             	Ccall _printstr
    1360/    1330 :                     ;}
    1361/    1330 :                     L167:
    1362/    1330 : (MACRO)             	release 12
    1363/    1338 : (MACRO)             	Cretn
    1364/    1339 :                     
    1365/    1339 :                     ;;function_end$$ _printint
    1366/    1339 :                     ;;function_start _printlint void function(long int)
    1367/    1339 :                     _printlint:		
    1368/    1339 : (MACRO)             	reserve 18
    1369/    1343 : (MACRO)             	st2 R12,'O',sp,(20+1)
    1370/    1350 : 1E                  	inc memaddr				
    1371/    1351 : (MACRO)             	str2 R13,memaddr
    1372/    1357 :                     ;void printlint(long s){ //print a long integer
    1373/    1357 :                     ;	printstr(ltoa(s,buffer));
    1374/    1357 : (MACRO)             	ld4 Rp1p2,'O',sp,(20+1)
    1375/    1367 : (MACRO)             	ldA2 R11,'O',sp,(6+1)
    1376/    136F : (MACRO)             	st2 R11,'O',sp,(4+1)
    1377/    137C :                     ;D*E*A*D  R11
    1378/    137C : (MACRO)             	Ccall _ltoa
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 24 - 10/29/2020 11:28:14


    1379/    137F : (MACRO)             	cpy2 R12,R15 
    1380/    1383 :                     ;D*E*A*D  R11 - but not in vain 5
    1381/    1383 : (MACRO)             	Ccall _printstr
    1382/    1386 :                     ;}
    1383/    1386 :                     L168:
    1384/    1386 : (MACRO)             	release 18
    1385/    138E : (MACRO)             	Cretn
    1386/    138F :                     
    1387/    138F :                     ;;function_end$$ _printlint
    1388/    138F :                     ;;function_start _putxn void function(unsigned char)
    1389/    138F :                     _putxn:		
    1390/    138F : (MACRO)             	reserve 4
    1391/    1393 : (MACRO)             	st1 R12,'O',sp,(6+1)
    1392/    139D :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1393/    139D :                     ;	if (x<10){
    1394/    139D : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1395/    13A7 : (MACRO)             	jcI1I R11,10,lbdf,L170
    1396/    13AD :                     ;D*E*A*D  R11
    1397/    13AD :                     ;		putc(x+'0');
    1398/    13AD : (MACRO)             	ldaD R12,7
    1399/    13B3 : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1400/    13BD : (MACRO)             	zExt R11 
    1401/    13C0 : (MACRO)             	ldA2 R13,'O',R11,(48)
    1402/    13C8 :                     ;D*E*A*D  R11
    1403/    13C8 : (MACRO)             	Ccall _out
    1404/    13CB :                     ;	} else {
    1405/    13CB : C0 13 F4            	lbr L171
    1406/    13CE :                     L170:
    1407/    13CE :                     ;		putc(x+'A'-10);
    1408/    13CE : (MACRO)             	ldaD R12,7
    1409/    13D4 : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1410/    13DE : (MACRO)             	zExt R11 
    1411/    13E1 : (MACRO)             	ldA2 R11,'O',R11,(65)
    1412/    13E9 : (MACRO)             	alu2I R13,R11,10,smi,smbi
    1413/    13F1 :                     ;D*E*A*D  R11
    1414/    13F1 : (MACRO)             	Ccall _out
    1415/    13F4 :                     ;	}
    1416/    13F4 :                     L171:
    1417/    13F4 :                     ;}
    1418/    13F4 :                     L169:
    1419/    13F4 : (MACRO)             	release 4
    1420/    13F8 : (MACRO)             	Cretn
    1421/    13F9 :                     
    1422/    13F9 :                     ;;function_end$$ _putxn
    1423/    13F9 :                     ;;function_start _putx void function(unsigned char)
    1424/    13F9 :                     _putx:		
    1425/    13F9 : (MACRO)             	reserve 4
    1426/    13FD : (MACRO)             	st1 R12,'O',sp,(6+1)
    1427/    1407 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1428/    1407 :                     ;	putxn(x>>4);
    1429/    1407 : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1430/    1411 : (MACRO)             	zExt R11 
    1431/    1414 : (MACRO)             	shrI2I R11,4
    1432/    1434 : (MACRO)             	cpy1 R12,R11
    1433/    1436 :                     ;D*E*A*D  R11
    1434/    1436 : (MACRO)             	zExt R12 
    1435/    1439 : (MACRO)             	Ccall _putxn
    1436/    143C :                     ;	putxn(x & 0x0F);
    1437/    143C : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1438/    1446 : (MACRO)             	zExt R11 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 25 - 10/29/2020 11:28:14


    1439/    1449 : (MACRO)             	alu2I R11,R11,15,ani,ani
    1440/    1451 :                     	
    1441/    1451 : (MACRO)             	cpy1 R12,R11
    1442/    1453 :                     ;D*E*A*D  R11
    1443/    1453 : (MACRO)             	zExt R12 
    1444/    1456 : (MACRO)             	Ccall _putxn
    1445/    1459 :                     ;}
    1446/    1459 :                     L172:
    1447/    1459 : (MACRO)             	release 4
    1448/    145D : (MACRO)             	Cretn
    1449/    145E :                     
    1450/    145E :                     ;;function_end$$ _putx
    1451/    145E :                     ;;function_start _printf void function(pointer to char,...)
    1452/    145E :                     _printf:		
    1453/    145E : (MACRO)             	reserve 4
    1454/    1462 : (MACRO)             	pushr R0
    1455/    1466 : (MACRO)             	pushr R1
    1456/    146A : (MACRO)             	pushr R6
    1457/    146E : (MACRO)             	pushr R7
    1458/    1472 : (MACRO)             	reserve 4
    1459/    1476 : (MACRO)             	st2 R12,'O',sp,(18+1)
    1460/    1483 : 1E                  	inc memaddr				
    1461/    1484 : (MACRO)             	str2 R13,memaddr
    1462/    148A :                     ;D*E*A*D  memaddr
    1463/    148A :                     ;void printf(char *pptr,...){ //limited implementation of printf
    1464/    148A :                     ;	register char* ptr=pptr; //try to save on loads/spills
    1465/    148A : (MACRO)             	ld2 R7,'O',sp,(18+1) 
    1466/    1496 :                     ;	int argslot=0;	//used to align longs
    1467/    1496 : (MACRO)             	ld2z R0
    1468/    149A :                     ;	int * this=(int *)&pptr;
    1469/    149A : (MACRO)             	ldA2 R1,'O',sp,(18+1)
    1470/    14A2 :                     ;	this++; argslot++; //advance argument pointer and slot #
    1471/    14A2 : (MACRO)             	incm R1,2
    1472/    14A4 : (MACRO)             	incm R0,1
    1473/    14A5 : C0 17 23            	lbr L175
    1474/    14A8 :                     L174:
    1475/    14A8 :                     ;    while(*ptr) {
    1476/    14A8 :                     ;		c=*ptr; ptr++;
    1477/    14A8 : (MACRO)             	ldn1 R6,R7
    1478/    14AA : (MACRO)             	incm R7,1
    1479/    14AB :                     ;		if (c!='%'){
    1480/    14AB : (MACRO)             	jeqU1I R6,37,L177
    1481/    14B1 :                     ;			putc(c);
    1482/    14B1 : (MACRO)             	ldaD R12,7
    1483/    14B7 : (MACRO)             	cpy1 R13,R6
    1484/    14B9 :                     ;D*E*A*D  R6
    1485/    14B9 : (MACRO)             	zExt R13 
    1486/    14BC : (MACRO)             	Ccall _out
    1487/    14BF :                     ;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
    1488/    14BF : (MACRO)              nop1806
    1489/    14BF : (MACRO)              nop1806
    1490/    14BF : (MACRO)              nop1806
    1491/    14BF :                     ;		} else{
    1492/    14BF : C0 17 23            	lbr L178
    1493/    14C2 :                     L177:
    1494/    14C2 :                     ;			c=*ptr;ptr++;
    1495/    14C2 : (MACRO)             	ldn1 R6,R7
    1496/    14C4 : (MACRO)             	incm R7,1
    1497/    14C5 :                     ;			switch (c){
    1498/    14C5 : (MACRO)             	cpy1 R11,R6
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 26 - 10/29/2020 11:28:14


    1499/    14C7 : (MACRO)             	zExt R11 
    1500/    14CA : (MACRO)             	st2 R11,'O',sp,(13+1)
    1501/    14D7 : (MACRO)             	jeqU2I R11,105,L183
    1502/    14E3 : (MACRO)             	ldaD R10,108
    1503/    14E9 : (MACRO)             	jeqI2 R11,R10,L189
    1504/    14F7 : (MACRO)             	jcI2 R10,R11,lbnf,L197 
    1505/    1509 :                     ;D*E*A*D  R10
    1506/    1509 :                     ;D*E*A*D  R11
    1507/    1509 :                     L196:
    1508/    1509 : (MACRO)             	ld2 R11,'O',sp,(13+1) 
    1509/    1515 : (MACRO)             	ldaD R10,88
    1510/    151B : (MACRO)             	jeqI2 R11,R10,L188
    1511/    1529 : (MACRO)             	jcI2 R11,R10,lbnf,L180
    1512/    153B :                     ;D*E*A*D  R11
    1513/    153B :                     ;D*E*A*D  R10
    1514/    153B :                     L198:
    1515/    153B : (MACRO)             	ld2 R11,'O',sp,(13+1) 
    1516/    1547 : (MACRO)             	jeqU2I R11,99,L185
    1517/    1553 : (MACRO)             	jeqU2I R11,100,L183
    1518/    155F :                     ;D*E*A*D  R11
    1519/    155F : C0 17 06            	lbr L180
    1520/    1562 :                     L197:
    1521/    1562 : (MACRO)             	ld2 R11,'O',sp,(13+1) 
    1522/    156E : (MACRO)             	ldaD R10,115
    1523/    1574 : (MACRO)             	jeqI2 R11,R10,L184
    1524/    1582 : (MACRO)             	jcI2 R11,R10,lbnf,L180
    1525/    1594 :                     ;D*E*A*D  R11
    1526/    1594 :                     ;D*E*A*D  R10
    1527/    1594 :                     L199:
    1528/    1594 : (MACRO)             	ld2 R11,'O',sp,(13+1) 
    1529/    15A0 : (MACRO)             	jeqU2I R11,120,L188
    1530/    15AC :                     ;D*E*A*D  R11
    1531/    15AC : C0 17 06            	lbr L180
    1532/    15AF :                     L183:
    1533/    15AF :                     ;					printint(*this++);
    1534/    15AF : (MACRO)             	cpy2 R11,R1 
    1535/    15B3 : (MACRO)             	incm R1,2
    1536/    15B5 : (MACRO)             	ldn2 R12,R11	
    1537/    15BA :                     ;D*E*A*D  R11
    1538/    15BA : (MACRO)             	Ccall _printint
    1539/    15BD :                     ;					argslot+=1; //next argument slot
    1540/    15BD : (MACRO)             	incm R0,1
    1541/    15BE :                     ;					break;
    1542/    15BE : C0 17 23            	lbr L181
    1543/    15C1 :                     L184:
    1544/    15C1 :                     ;					printstr((char*) *this++);
    1545/    15C1 : (MACRO)             	cpy2 R11,R1 
    1546/    15C5 : (MACRO)             	incm R1,2
    1547/    15C7 : (MACRO)             	ldn2s R11,R11	
    1548/    15CE : (MACRO)             	cpy2 R12,R11 
    1549/    15D2 :                     ;D*E*A*D  R11
    1550/    15D2 : (MACRO)             	Ccall _printstr
    1551/    15D5 :                     ;					argslot+=1; //next argument slot
    1552/    15D5 : (MACRO)             	incm R0,1
    1553/    15D6 :                     ;					break;
    1554/    15D6 : C0 17 23            	lbr L181
    1555/    15D9 :                     L185:
    1556/    15D9 :                     ;					if (*ptr=='x'){ //if there's an x
    1557/    15D9 : (MACRO)             	ldn1 R11,R7
    1558/    15DB : (MACRO)             	jneU1I R11,120,L186	
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 27 - 10/29/2020 11:28:14


    1559/    15E1 :                     ;D*E*A*D  R11
    1560/    15E1 :                     ;						ptr++; //skip over the x
    1561/    15E1 : (MACRO)             	incm R7,1
    1562/    15E2 :                     ;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
    1563/    15E2 : (MACRO)             	cpy2 R11,R1 
    1564/    15E6 : (MACRO)             	incm R1,2
    1565/    15E8 : (MACRO)             	ldn2s R11,R11	
    1566/    15EF : (MACRO)             	alu2I R11,R11,255,ani,ani 
    1567/    15F7 : (MACRO)             	cpy1 R12,R11
    1568/    15F9 :                     ;D*E*A*D  R11
    1569/    15F9 : (MACRO)             	zExt R12 
    1570/    15FC : (MACRO)             	Ccall _putx
    1571/    15FF :                     ;					} else{
    1572/    15FF : C0 16 1C            	lbr L187
    1573/    1602 :                     L186:
    1574/    1602 :                     ;						putc((unsigned int) *this++);		//print as char
    1575/    1602 : (MACRO)             	ldaD R12,7
    1576/    1608 : (MACRO)             	cpy2 R11,R1 
    1577/    160C : (MACRO)             	incm R1,2
    1578/    160E : (MACRO)             	ldn2s R11,R11	
    1579/    1615 : (MACRO)             	cpy2 R13,R11 
    1580/    1619 :                     ;D*E*A*D  R11
    1581/    1619 : (MACRO)             	Ccall _out
    1582/    161C :                     ;					}
    1583/    161C :                     L187:
    1584/    161C :                     ;					argslot+=1; //next argument slot
    1585/    161C : (MACRO)             	incm R0,1
    1586/    161D :                     ;					break;
    1587/    161D : C0 17 23            	lbr L181
    1588/    1620 :                     L188:
    1589/    1620 :                     ;					putx(((unsigned int) *this)>>8);
    1590/    1620 : (MACRO)             	ldn2 R11,R1	
    1591/    1625 : 9B                  	ghi	R11	
    1592/    1626 :                     ;D*E*A*D  R11
    1593/    1626 : AB                  	plo	R11
    1594/    1627 : F8 00               	ldi	0
    1595/    1629 : BB                  	phi	R11
    1596/    162A : (MACRO)             	cpy1 R12,R11
    1597/    162C :                     ;D*E*A*D  R11
    1598/    162C : (MACRO)             	zExt R12 
    1599/    162F : (MACRO)             	Ccall _putx
    1600/    1632 :                     ;					putx(((unsigned int) *this++)&255);
    1601/    1632 : (MACRO)             	cpy2 R11,R1 
    1602/    1636 : (MACRO)             	incm R1,2
    1603/    1638 : (MACRO)             	ldn2s R11,R11	
    1604/    163F : (MACRO)             	alu2I R11,R11,255,ani,ani 
    1605/    1647 : (MACRO)             	cpy1 R12,R11
    1606/    1649 :                     ;D*E*A*D  R11
    1607/    1649 : (MACRO)             	zExt R12 
    1608/    164C : (MACRO)             	Ccall _putx
    1609/    164F :                     ;					argslot+=1; //next argument slot
    1610/    164F : (MACRO)             	incm R0,1
    1611/    1650 :                     ;					break;
    1612/    1650 : C0 17 23            	lbr L181
    1613/    1653 :                     L189:
    1614/    1653 :                     ;					if (*ptr){ //as long as there's something there
    1615/    1653 : 07                  	ldn   R7
    1616/    1654 : C2 17 06            	lbz   L190
    1617/    1657 :                     ;D*E*A*D  R11 - but not in vain H
    1618/    1657 :                     ;						xord=*ptr++;
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 28 - 10/29/2020 11:28:14


    1619/    1657 : (MACRO)             	cpy2 R11,R7 
    1620/    165B : (MACRO)             	incm R7,1
    1621/    165C : (MACRO)             	ldA2 R10,'O',sp,(15+1)
    1622/    1664 : 0B                  	ldn R11
    1623/    1665 : 5A                  	str R10
    1624/    1666 :                     ;D*E*A*D  R10
    1625/    1666 :                     ;						if (argslot&1) {
    1626/    1666 : (MACRO)             	alu2I R11,R0,1,ani,ani
    1627/    166E :                     	
    1628/    166E : (MACRO)             	jzU2 R11,L192
    1629/    1676 :                     ;D*E*A*D  R11
    1630/    1676 :                     ;							this++;
    1631/    1676 : (MACRO)             	incm R1,2
    1632/    1678 :                     ;							argslot++;
    1633/    1678 : (MACRO)             	incm R0,1
    1634/    1679 :                     ;						}
    1635/    1679 :                     L192:
    1636/    1679 :                     ;						if(xord=='d'){
    1637/    1679 : (MACRO)             	ld1 R11,'O',sp,(15+1)
    1638/    1683 : (MACRO)             	jneU1I R11,100,L194	
    1639/    1689 :                     ;D*E*A*D  R11
    1640/    1689 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    1641/    1689 : (MACRO)             	ld4 Rp1p2,'O',R1,0
    1642/    1699 : (MACRO)             	Ccall _printlint
    1643/    169C :                     ;							this+=2;				// and advances it 4 bytes
    1644/    169C : (MACRO)             	incm R1,4
    1645/    16A0 :                     ;						} else{
    1646/    16A0 : C0 17 01            	lbr L195
    1647/    16A3 :                     L194:
    1648/    16A3 :                     ;							putx(((unsigned int) *this)>>8);
    1649/    16A3 : (MACRO)             	ldn2 R11,R1	
    1650/    16A8 : 9B                  	ghi	R11	
    1651/    16A9 :                     ;D*E*A*D  R11
    1652/    16A9 : AB                  	plo	R11
    1653/    16AA : F8 00               	ldi	0
    1654/    16AC : BB                  	phi	R11
    1655/    16AD : (MACRO)             	cpy1 R12,R11
    1656/    16AF :                     ;D*E*A*D  R11
    1657/    16AF : (MACRO)             	zExt R12 
    1658/    16B2 : (MACRO)             	Ccall _putx
    1659/    16B5 :                     ;							putx(((unsigned int) *this++)&255);
    1660/    16B5 : (MACRO)             	cpy2 R11,R1 
    1661/    16B9 : (MACRO)             	incm R1,2
    1662/    16BB : (MACRO)             	ldn2s R11,R11	
    1663/    16C2 : (MACRO)             	alu2I R11,R11,255,ani,ani 
    1664/    16CA : (MACRO)             	cpy1 R12,R11
    1665/    16CC :                     ;D*E*A*D  R11
    1666/    16CC : (MACRO)             	zExt R12 
    1667/    16CF : (MACRO)             	Ccall _putx
    1668/    16D2 :                     ;							putx(((unsigned int) *this)>>8);
    1669/    16D2 : (MACRO)             	ldn2 R11,R1	
    1670/    16D7 : 9B                  	ghi	R11	
    1671/    16D8 :                     ;D*E*A*D  R11
    1672/    16D8 : AB                  	plo	R11
    1673/    16D9 : F8 00               	ldi	0
    1674/    16DB : BB                  	phi	R11
    1675/    16DC : (MACRO)             	cpy1 R12,R11
    1676/    16DE :                     ;D*E*A*D  R11
    1677/    16DE : (MACRO)             	zExt R12 
    1678/    16E1 : (MACRO)             	Ccall _putx
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 29 - 10/29/2020 11:28:14


    1679/    16E4 :                     ;							putx(((unsigned int) *this++)&255);
    1680/    16E4 : (MACRO)             	cpy2 R11,R1 
    1681/    16E8 : (MACRO)             	incm R1,2
    1682/    16EA : (MACRO)             	ldn2s R11,R11	
    1683/    16F1 : (MACRO)             	alu2I R11,R11,255,ani,ani 
    1684/    16F9 : (MACRO)             	cpy1 R12,R11
    1685/    16FB :                     ;D*E*A*D  R11
    1686/    16FB : (MACRO)             	zExt R12 
    1687/    16FE : (MACRO)             	Ccall _putx
    1688/    1701 :                     ;						}
    1689/    1701 :                     L195:
    1690/    1701 :                     ;						argslot+=2;
    1691/    1701 : (MACRO)             	incm R0,2
    1692/    1703 :                     ;						break;
    1693/    1703 : C0 17 23            	lbr L181
    1694/    1706 :                     L190:
    1695/    1706 :                     L180:
    1696/    1706 :                     ;					putc('%');putc(c);
    1697/    1706 : (MACRO)             	ldaD R12,7
    1698/    170C : (MACRO)             	ldaD R13,37
    1699/    1712 : (MACRO)             	Ccall _out
    1700/    1715 : (MACRO)             	ldaD R12,7
    1701/    171B : (MACRO)             	cpy1 R13,R6
    1702/    171D :                     ;D*E*A*D  R6
    1703/    171D : (MACRO)             	zExt R13 
    1704/    1720 : (MACRO)             	Ccall _out
    1705/    1723 :                     ;			} //switch
    1706/    1723 :                     L181:
    1707/    1723 :                     ;		} //%
    1708/    1723 :                     L178:
    1709/    1723 :                     ;	} //while
    1710/    1723 :                     L175:
    1711/    1723 :                     ;    while(*ptr) {
    1712/    1723 : 07                  	ldn    R7
    1713/    1724 : CA 14 A8            	lbnz   L174
    1714/    1727 :                     ;D*E*A*D  R11 - but not in vain I
    1715/    1727 :                     ;} //prtf
    1716/    1727 :                     L173:
    1717/    1727 : (MACRO)             	release 4
    1718/    172B : (MACRO)             	popr R7
    1719/    1730 : (MACRO)             	popr R6
    1720/    1735 : (MACRO)             	popr R1
    1721/    173A : (MACRO)             	popr R0
    1722/    173F : (MACRO)             	release 4
    1723/    1743 : (MACRO)             	Cretn
    1724/    1744 :                     
    1725/    1744 :                     ;;function_end$$ _printf
    1726/    1744 :                     ;;function_start _exit void function(int)
    1727/    1744 :                     _exit:		
    1728/    1744 : (MACRO)             	reserve 4
    1729/    1748 : (MACRO)             	st2 R12,'O',sp,(6+1)
    1730/    1755 :                     ;void exit(int code){
    1731/    1755 :                     ;	printf("exit %d\n",code);
    1732/    1755 : (MACRO)             	ldaD R12,L201
    1733/    175B : (MACRO)             	ld2 R13,'O',sp,(6+1) 
    1734/    1767 : (MACRO)             	Ccall _printf
    1735/    176A :                     L202:
    1736/    176A :                     ;	while(1);
    1737/    176A :                     L203:
    1738/    176A : C0 17 6A            	lbr L202
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 30 - 10/29/2020 11:28:14


    1739/    176D :                     ;}
    1740/    176D :                     L200:
    1741/    176D : (MACRO)             	release 4
    1742/    1771 : (MACRO)             	Cretn
    1743/    1772 :                     
    1744/    1772 :                     ;;function_end$$ _exit
    1745/    1772 :                     ;;function_start _memcmp int function(pointer to const void,pointer to const void,unsigned int)
    1746/    1772 :                     _memcmp:		
    1747/    1772 : (MACRO)             	pushr R0
    1748/    1776 : (MACRO)             	pushr R1
    1749/    177A : (MACRO)             	pushr R6
    1750/    177E : (MACRO)             	pushr R7
    1751/    1782 : (MACRO)             	ld2 R7,'O',sp,(14+1) 
    1752/    178E :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1753/    178E :                     ;    int v = 0;
    1754/    178E : (MACRO)             	ld2z R6
    1755/    1792 :                     ;    p1 = (unsigned char *)Ptr1;
    1756/    1792 : (MACRO)             	cpy2 R1,R12 
    1757/    1796 :                     ;    p2 = (unsigned char *)Ptr2;
    1758/    1796 : (MACRO)             	cpy2 R0,R13 
    1759/    179A : C0 17 BB            	lbr L207
    1760/    179D :                     L206:
    1761/    179D :                     ;    while(Count-- > 0 && v == 0) {
    1762/    179D :                     ;        v = *(p1++) - *(p2++);
    1763/    179D : (MACRO)             	cpy2 R11,R1 
    1764/    17A1 : (MACRO)             	incm R1,1
    1765/    17A2 : (MACRO)             	cpy2 R10,R0 
    1766/    17A6 : (MACRO)             	incm R0,1
    1767/    17A7 : (MACRO)             	ldn1 R11,R11	
    1768/    17A9 : (MACRO)             	zExt R11 
    1769/    17AC : (MACRO)             	ldn1 R10,R10	
    1770/    17AE : (MACRO)             	zExt R10 
    1771/    17B1 : (MACRO)             	alu2 R6,R11,R10,sm,smb
    1772/    17BB :                     ;D*E*A*D  R11
    1773/    17BB :                     ;D*E*A*D  R10
    1774/    17BB :                     ;    }
    1775/    17BB :                     L207:
    1776/    17BB :                     ;    while(Count-- > 0 && v == 0) {
    1777/    17BB : (MACRO)             	cpy2 R11,R7 
    1778/    17BF :                     ;D*E*A*D  R7
    1779/    17BF : (MACRO)             	cpy2 R7,R11	
    1780/    17C3 : (MACRO)             	decm R7,1	
    1781/    17C4 : (MACRO)             	jzU2 R11,L209
    1782/    17CC :                     ;D*E*A*D  R11
    1783/    17CC : (MACRO)             	jzU2 R6,L206
    1784/    17D4 :                     L209:
    1785/    17D4 :                     ;    return v;
    1786/    17D4 : (MACRO)             	cpy2 R15,R6 
    1787/    17D8 :                     ;D*E*A*D  R6
    1788/    17D8 :                     L205:
    1789/    17D8 : (MACRO)             	popr R7
    1790/    17DD : (MACRO)             	popr R6
    1791/    17E2 : (MACRO)             	popr R1
    1792/    17E7 : (MACRO)             	popr R0
    1793/    17EC : (MACRO)             	Cretn
    1794/    17ED :                     
    1795/    17ED :                     ;;function_end$$ _memcmp
    1796/    17ED :                     ;;function_start _memcpy pointer to void function(pointer to void,pointer to const void,unsigned int)
    1797/    17ED :                     _memcpy:		
    1798/    17ED : (MACRO)             	pushr R1
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 31 - 10/29/2020 11:28:14


    1799/    17F1 : (MACRO)             	pushr R6
    1800/    17F5 : (MACRO)             	pushr R7
    1801/    17F9 : (MACRO)             	ld2 R7,'O',sp,(12+1) 
    1802/    1805 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1803/    1805 :                     ;        char* dst8 = (char*)dest;
    1804/    1805 : (MACRO)             	cpy2 R6,R12 
    1805/    1809 :                     ;        char* src8 = (char*)src;
    1806/    1809 : (MACRO)             	cpy2 R1,R13 
    1807/    180D : C0 18 1C            	lbr L212
    1808/    1810 :                     L211:
    1809/    1810 :                     ;        while (count--) {
    1810/    1810 :                     ;            *dst8++ = *src8++;
    1811/    1810 : (MACRO)             	cpy2 R11,R6 
    1812/    1814 : (MACRO)             	incm R6,1
    1813/    1815 : (MACRO)             	cpy2 R10,R1 
    1814/    1819 : (MACRO)             	incm R1,1
    1815/    181A : 0A                  	ldn R10
    1816/    181B : 5B                  	str R11
    1817/    181C :                     ;D*E*A*D  R11
    1818/    181C :                     ;        }
    1819/    181C :                     L212:
    1820/    181C :                     ;        while (count--) {
    1821/    181C : (MACRO)             	cpy2 R11,R7 
    1822/    1820 :                     ;D*E*A*D  R7
    1823/    1820 : (MACRO)             	cpy2 R7,R11	
    1824/    1824 : (MACRO)             	decm R7,1	
    1825/    1825 : (MACRO)             	jnzU2 R11,L211
    1826/    182D :                     ;D*E*A*D  R11
    1827/    182D :                     ;        return dest;
    1828/    182D : (MACRO)             	cpy2 R15,R12 
    1829/    1831 :                     L210:
    1830/    1831 : (MACRO)             	popr R7
    1831/    1836 : (MACRO)             	popr R6
    1832/    183B : (MACRO)             	popr R1
    1833/    1840 : (MACRO)             	Cretn
    1834/    1841 :                     
    1835/    1841 :                     ;;function_end$$ _memcpy
    1836/    1841 :                     ;;function_start _memset pointer to void function(pointer to void,int,unsigned int)
    1837/    1841 :                     _memset:		
    1838/    1841 : (MACRO)             	pushr R6
    1839/    1845 : (MACRO)             	pushr R7
    1840/    1849 : (MACRO)             	ld2 R7,'O',sp,(10+1) 
    1841/    1855 :                     ;{
    1842/    1855 :                     ;    unsigned char* p=s;
    1843/    1855 : (MACRO)             	cpy2 R6,R12 
    1844/    1859 : C0 18 60            	lbr L216
    1845/    185C :                     L215:
    1846/    185C :                     ;    while(n){
    1847/    185C :                     ;        *p = (unsigned char)c;
    1848/    185C : (MACRO)             	str1 R13,R6
    1849/    185E :                     ;        p++;
    1850/    185E : (MACRO)             	incm R6,1
    1851/    185F :                     ;        n--;
    1852/    185F : (MACRO)             	decm R7,1	
    1853/    1860 :                     ;	}
    1854/    1860 :                     L216:
    1855/    1860 :                     ;    while(n){
    1856/    1860 : (MACRO)             	jnzU2 R7,L215
    1857/    1868 :                     ;    return s;
    1858/    1868 : (MACRO)             	cpy2 R15,R12 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 32 - 10/29/2020 11:28:14


    1859/    186C :                     L214:
    1860/    186C : (MACRO)             	popr R7
    1861/    1871 : (MACRO)             	popr R6
    1862/    1876 : (MACRO)             	Cretn
    1863/    1877 :                     
    1864/    1877 :                     ;;function_end$$ _memset
    1865/    1877 :                     ;;function_start _nstdlibincluder void function(void)
    1866/    1877 :                     _nstdlibincluder:		
    1867/    1877 :                     ;void nstdlibincluder(){
    1868/    1877 :                     ;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
    1869/    1877 :                     	include nstdlib.inc
(1)    1/    1877 :                     ;nstdlib.inc includes assembly versions of nstdlib routines strcpy, strcmp
(1)    2/    1877 :                     ;Oct 1 first test seems ok
(1)    3/    1877 :                     ;20-08-01 moved in dubdabx
(1)    4/    1877 : =>UNDEFINED          IFNDEF _DUBDABX		;avoid double define
(1)    5/    1877 : =>UNDEFINED           IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)    6/    1877 :                        align 256			;wjr 20-05-23
(1)    7/    1900 :                     _dubdabx:	
(1)    8/    1900 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)    9/    1900 :                     ;thanks to Charles Richmond for the suggestion and code
(1)   10/    1900 :                     ;long interger is passed in rp1p2
(1)   11/    1900 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)   12/    1900 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)   13/    1900 :                     ;r8-11 are used as temps
(1)   14/    1900 :                     ;r8 is the working pointer
(1)   15/    1900 :                     ;r15.0 is bit count(32) and the return value register
(1)   16/    1900 :                     ;r9.0 is digit count
(1)   17/    1900 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)   18/    1900 : (MACRO)             	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)   19/    190C : (MACRO)             	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)   20/    1918 : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)   21/    191C : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)   22/    191E : A9                  	plo r9
(1)   23/    191F :                     $$clrlp:	;clear the passed buffer
(1)   24/    191F : F8 00               	ldi 0	
(1)   25/    1921 : 58                  	str r8	;clear a byte
(1)   26/    1922 : 18                  	inc r8
(1)   27/    1923 : 29                  	dec r9
(1)   28/    1924 : 89                  	glo r9	;check the count
(1)   29/    1925 : 3A 1F               	bnz $$clrlp ;back for more
(1)   30/    1927 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)   31/    192B :                     
(1)   32/    192B : F8 20               	ldi 32	;bit count
(1)   33/    192D : AF                  	plo r15
(1)   34/    192E :                     ;now i'm going to spin off any leading 0's in the binary number
(1)   35/    192E :                     $$cktop:
(1)   36/    192E : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)   37/    192F : FE                  	shl		;check for a 1
(1)   38/    1930 : 33 43               	bdf $$bitloop	;move on if we have one
(1)   39/    1932 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)   40/    193E : 2F                  	dec r15		;reduce the number of times to shift
(1)   41/    193F : 8F                  	glo r15
(1)   42/    1940 : 3A 2E               	bnz $$cktop	;
(1)   43/    1942 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)   44/    1943 :                     $$bitloop:
(1)   45/    1943 : F8 0A               	ldi 10	;digit count
(1)   46/    1945 : A9                  	plo r9
(1)   47/    1946 :                     $$dcklp:
(1)   48/    1946 : 08                  	ldn r8 	;pick up a digit
(1)   49/    1947 : FF 05               	smi 5	;see if it's greater than 4
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(nstdlib.inc) - Page 33 - 10/29/2020 11:28:14


(1)   50/    1949 : 3B 4E               	bnf $$dnoadd ;if not, bypass add
(1)   51/    194B : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)   52/    194D : 58                  	str r8	;put it back
(1)   53/    194E :                     $$dnoadd:
(1)   54/    194E : 18                  	inc r8
(1)   55/    194F : 29                  	dec r9	;decrement digit count
(1)   56/    1950 : 89                  	glo r9
(1)   57/    1951 : 3A 46               	bnz $$dcklp ;and back for next digit
(1)   58/    1953 :                     	
(1)   59/    1953 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)   60/    195F :                     	
(1)   61/    195F : F8 0A               	ldi 10	;load the digit count again
(1)   62/    1961 : A9                  	plo r9
(1)   63/    1962 :                     ;r8 is now just past the units location and ready to walk back
(1)   64/    1962 :                     $$dshlp:
(1)   65/    1962 : 28                  	dec r8	;walk back from 0's position
(1)   66/    1963 : 08                  	ldn r8	;get the digit back
(1)   67/    1964 : 7E                  	shlc	;continue the shift
(1)   68/    1965 : BF                  	phi r15 ;save it for the carry test
(1)   69/    1966 : FA 0F               	ani 0x0f ;clear the 10 bit
(1)   70/    1968 : 58                  	str r8	;put the digit back
(1)   71/    1969 : 9F                  	ghi r15	;now test for carry
(1)   72/    196A : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)   73/    196C : 29                  	dec r9	;decrement the digit count
(1)   74/    196D : 89                  	glo r9
(1)   75/    196E : 3A 62               	bnz $$dshlp ;back for more if needed
(1)   76/    1970 :                     	
(1)   77/    1970 : 2F                  	dec r15
(1)   78/    1971 : 8F                  	glo r15
(1)   79/    1972 : 3A 43               	bnz $$bitloop
(1)   80/    1974 :                     	
(1)   81/    1974 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)   82/    1978 : F8 0A               	ldi 10		;digit count again
(1)   83/    197A : A9                  	plo r9
(1)   84/    197B :                     $$upnxt:
(1)   85/    197B : 08                  	ldn r8		;get digit
(1)   86/    197C : F9 30               	ori 0x30	;make ascii
(1)   87/    197E : 58                  	str r8		;put it back
(1)   88/    197F : 18                  	inc r8		;next digit
(1)   89/    1980 : 29                  	dec r9		;counter
(1)   90/    1981 : 89                  	glo r9
(1)   91/    1982 : 3A 7B               	bnz $$upnxt	;upgrade all 10 spots
(1)   92/    1984 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)   93/    198C : EE                  	sex memaddr	;set up
(1)   94/    198D : F8 0A               	ldi 10		;max number of 0's to skip
(1)   95/    198F : F7                  	sm		;desired number of digits to skip
(1)   96/    1990 : E2                  	sex sp		;reset index register
(1)   97/    1991 : A9                  	plo r9		;number of leading 0's to skip
(1)   98/    1992 :                     $$cknext:
(1)   99/    1992 : 0F                  	ldn r15		;check digit
(1)  100/    1993 : FF 30               	smi 0x30	;for '0'
(1)  101/    1995 : 3A 9C               	bnz $$done
(1)  102/    1997 : 1F                  	inc r15		;next digit
(1)  103/    1998 : 29                  	dec r9		;reduce count
(1)  104/    1999 : 89                  	glo r9
(1)  105/    199A : 3A 92               	bnz $$cknext
(1)  106/    199C :                     $$done:
(1)  107/    199C : (MACRO)             	cretn
(1)  108/    199D : [5]                   ENDIF	
(1)  109/    199D : [4]                  ENDIF
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(nstdlib.inc) - Page 34 - 10/29/2020 11:28:14


(1)  110/    199D :                     
(1)  111/    199D :                     ;char * strcpy(char * to, const char *from)
(1)  112/    199D :                     	align 64
(1)  113/    19C0 :                     _strcpy:
(1)  114/    19C0 :                     ;char *save = to; (to is R12, from is R13)
(1)  115/    19C0 : 8C                  	glo R12	
(1)  116/    19C1 : AF                  	plo R15
(1)  117/    19C2 : 9C                  	ghi R12
(1)  118/    19C3 : BF                  	phi R15
(1)  119/    19C4 :                     ;for (; (*to = *from) != 0; ++from, ++to);
(1)  120/    19C4 : 4D                  __strcpy: lda R13
(1)  121/    19C5 : 5C                  	str R12
(1)  122/    19C6 : 1C                  	inc R12
(1)  123/    19C7 : 3A C4               	bnz __strcpy
(1)  124/    19C9 :                     ;return(save);
(1)  125/    19C9 : (MACRO)             	cretn
(1)  126/    19CA :                     ;}
(1)  127/    19CA :                     
(1)  128/    19CA :                     
(1)  129/    19CA :                     ;int strcmp(const char *s1, const char *s2){  s1 will be R12, s2 R13
(1)  130/    19CA :                     _strcmp:	;entry point from C program
(1)  131/    19CA :                     ;  int ret = 0;
(1)  132/    19CA : (MACRO)             	ld2z	R15	;ret is R15
(1)  133/    19CE :                     ;  while (!(ret = *(unsigned char *) s1 - *(unsigned char *) s2) && *s2) ++s1, ++s2;
(1)  134/    19CE : 22                  	dec	sp	;make a work area
(1)  135/    19CF :                     __strcmplp:
(1)  136/    19CF : 4D                  	lda	R13	;get string 2 character
(1)  137/    19D0 : 52                  	str	sp	;prep for compare
(1)  138/    19D1 : 4C                  	lda	R12	;get string 1 character
(1)  139/    19D2 : F7                  	sm		;subtract string 2 char from string 1
(1)  140/    19D3 : 3A DA               	bnz	__strcmpne ;strings not equal quit
(1)  141/    19D5 :                     	
(1)  142/    19D5 : 02                  	ldn	sp	;check string 2 character
(1)  143/    19D6 : 3A CF               	bnz	__strcmplp ;back for more if not done
(1)  144/    19D8 : 12                  	inc	sp	;release the work area
(1)  145/    19D9 : (MACRO)             	cretn		;back to caler with 0 in R15
(1)  146/    19DA :                     	
(1)  147/    19DA :                     __strcmpne:	;here I know they're not equal
(1)  148/    19DA : 12                  	inc	sp		;release the work area
(1)  149/    19DB : 33 DF               	bdf	__strcmpgt	;string1>string2
(1)  150/    19DD : 2F                  	dec	R15		;string 1<string 2, return -1
(1)  151/    19DE : (MACRO)             	cretn
(1)  152/    19DF :                     __strcmpgt:
(1)  153/    19DF : 1F                  	inc	R15		;string1>string2, return 1
(1)  154/    19E0 : (MACRO)             	cretn
(1)  155/    19E1 :                     
    1870/    19E1 :                     ;}
    1871/    19E1 :                     L218:
    1872/    19E1 : (MACRO)             	Cretn
    1873/    19E2 :                     
    1874/    19E2 :                     ;;function_end$$ _nstdlibincluder
    1875/    19E2 : (MACRO)             	orgd
    1876/    19E2 :                     _Arr_2_Glob:
    1877/    19E2 : (MACRO)             	globss 1000
    1878/    1DCA : (MACRO)             	globss 1000
    1879/    21B2 : (MACRO)             	globss 1000
    1880/    259A : (MACRO)             	globss 1000
    1881/    2982 : (MACRO)             	globss 1000
    1882/    2D6A :                     _Arr_1_Glob:
    1883/    2D6A : (MACRO)             	globss 100
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 35 - 10/29/2020 11:28:14


    1884/    2DCE :                     _Ch_2_Glob:
    1885/    2DCE : (MACRO)             	globss 1
    1886/    2DCF :                     _Ch_1_Glob:
    1887/    2DCF : (MACRO)             	globss 1
    1888/    2DD0 :                     _Bool_Glob:
    1889/    2DD0 : (MACRO)             	globss 2
    1890/    2DD2 :                     _Int_Glob:
    1891/    2DD2 : (MACRO)             	globss 2
    1892/    2DD4 :                     _Next_Ptr_Glob:
    1893/    2DD4 : (MACRO)             	globss 2
    1894/    2DD6 :                     _Ptr_Glob:
    1895/    2DD6 : (MACRO)             	globss 2
    1896/    2DD8 : (MACRO)             	orgc
    1897/    2DD8 :                     L201:
    1898/    2DD8 : 65                  	db 101
    1899/    2DD9 : 78                  	db 120
    1900/    2DDA : 69                  	db 105
    1901/    2DDB : 74                  	db 116
    1902/    2DDC : 20                  	db 32
    1903/    2DDD : 25                  	db 37
    1904/    2DDE : 64                  	db 100
    1905/    2DDF : 0A                  	db 10
    1906/    2DE0 : 00                  	db 0
    1907/    2DE1 :                     L111:
    1908/    2DE1 : 64                  	db 100
    1909/    2DE2 : 6F                  	db 111
    1910/    2DE3 : 6E                  	db 110
    1911/    2DE4 : 65                  	db 101
    1912/    2DE5 : 0A                  	db 10
    1913/    2DE6 : 00                  	db 0
    1914/    2DE7 :                     L110:
    1915/    2DE7 : 20                  	db 32
    1916/    2DE8 : 20                  	db 32
    1917/    2DE9 : 20                  	db 32
    1918/    2DEA : 20                  	db 32
    1919/    2DEB : 20                  	db 32
    1920/    2DEC : 20                  	db 32
    1921/    2DED : 20                  	db 32
    1922/    2DEE : 20                  	db 32
    1923/    2DEF : 73                  	db 115
    1924/    2DF0 : 68                  	db 104
    1925/    2DF1 : 6F                  	db 111
    1926/    2DF2 : 75                  	db 117
    1927/    2DF3 : 6C                  	db 108
    1928/    2DF4 : 64                  	db 100
    1929/    2DF5 : 20                  	db 32
    1930/    2DF6 : 62                  	db 98
    1931/    2DF7 : 65                  	db 101
    1932/    2DF8 : 3A                  	db 58
    1933/    2DF9 : 20                  	db 32
    1934/    2DFA : 20                  	db 32
    1935/    2DFB : 20                  	db 32
    1936/    2DFC : 44                  	db 68
    1937/    2DFD : 48                  	db 72
    1938/    2DFE : 52                  	db 82
    1939/    2DFF : 59                  	db 89
    1940/    2E00 : 53                  	db 83
    1941/    2E01 : 54                  	db 84
    1942/    2E02 : 4F                  	db 79
    1943/    2E03 : 4E                  	db 78
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 36 - 10/29/2020 11:28:14


    1944/    2E04 : 45                  	db 69
    1945/    2E05 : 20                  	db 32
    1946/    2E06 : 50                  	db 80
    1947/    2E07 : 52                  	db 82
    1948/    2E08 : 4F                  	db 79
    1949/    2E09 : 47                  	db 71
    1950/    2E0A : 52                  	db 82
    1951/    2E0B : 41                  	db 65
    1952/    2E0C : 4D                  	db 77
    1953/    2E0D : 2C                  	db 44
    1954/    2E0E : 20                  	db 32
    1955/    2E0F : 32                  	db 50
    1956/    2E10 : 27                  	db 39
    1957/    2E11 : 4E                  	db 78
    1958/    2E12 : 44                  	db 68
    1959/    2E13 : 20                  	db 32
    1960/    2E14 : 53                  	db 83
    1961/    2E15 : 54                  	db 84
    1962/    2E16 : 52                  	db 82
    1963/    2E17 : 49                  	db 73
    1964/    2E18 : 4E                  	db 78
    1965/    2E19 : 47                  	db 71
    1966/    2E1A : 0A                  	db 10
    1967/    2E1B : 00                  	db 0
    1968/    2E1C :                     L109:
    1969/    2E1C : 53                  	db 83
    1970/    2E1D : 74                  	db 116
    1971/    2E1E : 72                  	db 114
    1972/    2E1F : 5F                  	db 95
    1973/    2E20 : 32                  	db 50
    1974/    2E21 : 5F                  	db 95
    1975/    2E22 : 4C                  	db 76
    1976/    2E23 : 6F                  	db 111
    1977/    2E24 : 63                  	db 99
    1978/    2E25 : 3A                  	db 58
    1979/    2E26 : 20                  	db 32
    1980/    2E27 : 20                  	db 32
    1981/    2E28 : 20                  	db 32
    1982/    2E29 : 20                  	db 32
    1983/    2E2A : 20                  	db 32
    1984/    2E2B : 20                  	db 32
    1985/    2E2C : 20                  	db 32
    1986/    2E2D : 20                  	db 32
    1987/    2E2E : 20                  	db 32
    1988/    2E2F : 20                  	db 32
    1989/    2E30 : 20                  	db 32
    1990/    2E31 : 25                  	db 37
    1991/    2E32 : 73                  	db 115
    1992/    2E33 : 0A                  	db 10
    1993/    2E34 : 00                  	db 0
    1994/    2E35 :                     L108:
    1995/    2E35 : 20                  	db 32
    1996/    2E36 : 20                  	db 32
    1997/    2E37 : 20                  	db 32
    1998/    2E38 : 20                  	db 32
    1999/    2E39 : 20                  	db 32
    2000/    2E3A : 20                  	db 32
    2001/    2E3B : 20                  	db 32
    2002/    2E3C : 20                  	db 32
    2003/    2E3D : 73                  	db 115
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 37 - 10/29/2020 11:28:14


    2004/    2E3E : 68                  	db 104
    2005/    2E3F : 6F                  	db 111
    2006/    2E40 : 75                  	db 117
    2007/    2E41 : 6C                  	db 108
    2008/    2E42 : 64                  	db 100
    2009/    2E43 : 20                  	db 32
    2010/    2E44 : 62                  	db 98
    2011/    2E45 : 65                  	db 101
    2012/    2E46 : 3A                  	db 58
    2013/    2E47 : 20                  	db 32
    2014/    2E48 : 20                  	db 32
    2015/    2E49 : 20                  	db 32
    2016/    2E4A : 44                  	db 68
    2017/    2E4B : 48                  	db 72
    2018/    2E4C : 52                  	db 82
    2019/    2E4D : 59                  	db 89
    2020/    2E4E : 53                  	db 83
    2021/    2E4F : 54                  	db 84
    2022/    2E50 : 4F                  	db 79
    2023/    2E51 : 4E                  	db 78
    2024/    2E52 : 45                  	db 69
    2025/    2E53 : 20                  	db 32
    2026/    2E54 : 50                  	db 80
    2027/    2E55 : 52                  	db 82
    2028/    2E56 : 4F                  	db 79
    2029/    2E57 : 47                  	db 71
    2030/    2E58 : 52                  	db 82
    2031/    2E59 : 41                  	db 65
    2032/    2E5A : 4D                  	db 77
    2033/    2E5B : 2C                  	db 44
    2034/    2E5C : 20                  	db 32
    2035/    2E5D : 31                  	db 49
    2036/    2E5E : 27                  	db 39
    2037/    2E5F : 53                  	db 83
    2038/    2E60 : 54                  	db 84
    2039/    2E61 : 20                  	db 32
    2040/    2E62 : 53                  	db 83
    2041/    2E63 : 54                  	db 84
    2042/    2E64 : 52                  	db 82
    2043/    2E65 : 49                  	db 73
    2044/    2E66 : 4E                  	db 78
    2045/    2E67 : 47                  	db 71
    2046/    2E68 : 0A                  	db 10
    2047/    2E69 : 00                  	db 0
    2048/    2E6A :                     L107:
    2049/    2E6A : 53                  	db 83
    2050/    2E6B : 74                  	db 116
    2051/    2E6C : 72                  	db 114
    2052/    2E6D : 5F                  	db 95
    2053/    2E6E : 31                  	db 49
    2054/    2E6F : 5F                  	db 95
    2055/    2E70 : 4C                  	db 76
    2056/    2E71 : 6F                  	db 111
    2057/    2E72 : 63                  	db 99
    2058/    2E73 : 3A                  	db 58
    2059/    2E74 : 20                  	db 32
    2060/    2E75 : 20                  	db 32
    2061/    2E76 : 20                  	db 32
    2062/    2E77 : 20                  	db 32
    2063/    2E78 : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 38 - 10/29/2020 11:28:14


    2064/    2E79 : 20                  	db 32
    2065/    2E7A : 20                  	db 32
    2066/    2E7B : 20                  	db 32
    2067/    2E7C : 20                  	db 32
    2068/    2E7D : 20                  	db 32
    2069/    2E7E : 20                  	db 32
    2070/    2E7F : 25                  	db 37
    2071/    2E80 : 73                  	db 115
    2072/    2E81 : 0A                  	db 10
    2073/    2E82 : 00                  	db 0
    2074/    2E83 :                     L106:
    2075/    2E83 : 45                  	db 69
    2076/    2E84 : 6E                  	db 110
    2077/    2E85 : 75                  	db 117
    2078/    2E86 : 6D                  	db 109
    2079/    2E87 : 5F                  	db 95
    2080/    2E88 : 4C                  	db 76
    2081/    2E89 : 6F                  	db 111
    2082/    2E8A : 63                  	db 99
    2083/    2E8B : 3A                  	db 58
    2084/    2E8C : 20                  	db 32
    2085/    2E8D : 20                  	db 32
    2086/    2E8E : 20                  	db 32
    2087/    2E8F : 20                  	db 32
    2088/    2E90 : 20                  	db 32
    2089/    2E91 : 20                  	db 32
    2090/    2E92 : 20                  	db 32
    2091/    2E93 : 20                  	db 32
    2092/    2E94 : 20                  	db 32
    2093/    2E95 : 20                  	db 32
    2094/    2E96 : 20                  	db 32
    2095/    2E97 : 20                  	db 32
    2096/    2E98 : 25                  	db 37
    2097/    2E99 : 64                  	db 100
    2098/    2E9A : 0A                  	db 10
    2099/    2E9B : 00                  	db 0
    2100/    2E9C :                     L105:
    2101/    2E9C : 49                  	db 73
    2102/    2E9D : 6E                  	db 110
    2103/    2E9E : 74                  	db 116
    2104/    2E9F : 5F                  	db 95
    2105/    2EA0 : 33                  	db 51
    2106/    2EA1 : 5F                  	db 95
    2107/    2EA2 : 4C                  	db 76
    2108/    2EA3 : 6F                  	db 111
    2109/    2EA4 : 63                  	db 99
    2110/    2EA5 : 3A                  	db 58
    2111/    2EA6 : 20                  	db 32
    2112/    2EA7 : 20                  	db 32
    2113/    2EA8 : 20                  	db 32
    2114/    2EA9 : 20                  	db 32
    2115/    2EAA : 20                  	db 32
    2116/    2EAB : 20                  	db 32
    2117/    2EAC : 20                  	db 32
    2118/    2EAD : 20                  	db 32
    2119/    2EAE : 20                  	db 32
    2120/    2EAF : 20                  	db 32
    2121/    2EB0 : 20                  	db 32
    2122/    2EB1 : 25                  	db 37
    2123/    2EB2 : 64                  	db 100
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 39 - 10/29/2020 11:28:14


    2124/    2EB3 : 0A                  	db 10
    2125/    2EB4 : 00                  	db 0
    2126/    2EB5 :                     L104:
    2127/    2EB5 : 49                  	db 73
    2128/    2EB6 : 6E                  	db 110
    2129/    2EB7 : 74                  	db 116
    2130/    2EB8 : 5F                  	db 95
    2131/    2EB9 : 32                  	db 50
    2132/    2EBA : 5F                  	db 95
    2133/    2EBB : 4C                  	db 76
    2134/    2EBC : 6F                  	db 111
    2135/    2EBD : 63                  	db 99
    2136/    2EBE : 3A                  	db 58
    2137/    2EBF : 20                  	db 32
    2138/    2EC0 : 20                  	db 32
    2139/    2EC1 : 20                  	db 32
    2140/    2EC2 : 20                  	db 32
    2141/    2EC3 : 20                  	db 32
    2142/    2EC4 : 20                  	db 32
    2143/    2EC5 : 20                  	db 32
    2144/    2EC6 : 20                  	db 32
    2145/    2EC7 : 20                  	db 32
    2146/    2EC8 : 20                  	db 32
    2147/    2EC9 : 20                  	db 32
    2148/    2ECA : 25                  	db 37
    2149/    2ECB : 64                  	db 100
    2150/    2ECC : 0A                  	db 10
    2151/    2ECD : 00                  	db 0
    2152/    2ECE :                     L103:
    2153/    2ECE : 49                  	db 73
    2154/    2ECF : 6E                  	db 110
    2155/    2ED0 : 74                  	db 116
    2156/    2ED1 : 5F                  	db 95
    2157/    2ED2 : 31                  	db 49
    2158/    2ED3 : 5F                  	db 95
    2159/    2ED4 : 4C                  	db 76
    2160/    2ED5 : 6F                  	db 111
    2161/    2ED6 : 63                  	db 99
    2162/    2ED7 : 3A                  	db 58
    2163/    2ED8 : 20                  	db 32
    2164/    2ED9 : 20                  	db 32
    2165/    2EDA : 20                  	db 32
    2166/    2EDB : 20                  	db 32
    2167/    2EDC : 20                  	db 32
    2168/    2EDD : 20                  	db 32
    2169/    2EDE : 20                  	db 32
    2170/    2EDF : 20                  	db 32
    2171/    2EE0 : 20                  	db 32
    2172/    2EE1 : 20                  	db 32
    2173/    2EE2 : 20                  	db 32
    2174/    2EE3 : 25                  	db 37
    2175/    2EE4 : 64                  	db 100
    2176/    2EE5 : 0A                  	db 10
    2177/    2EE6 : 00                  	db 0
    2178/    2EE7 :                     L102:
    2179/    2EE7 : 20                  	db 32
    2180/    2EE8 : 20                  	db 32
    2181/    2EE9 : 20                  	db 32
    2182/    2EEA : 20                  	db 32
    2183/    2EEB : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 40 - 10/29/2020 11:28:14


    2184/    2EEC : 20                  	db 32
    2185/    2EED : 20                  	db 32
    2186/    2EEE : 20                  	db 32
    2187/    2EEF : 73                  	db 115
    2188/    2EF0 : 68                  	db 104
    2189/    2EF1 : 6F                  	db 111
    2190/    2EF2 : 75                  	db 117
    2191/    2EF3 : 6C                  	db 108
    2192/    2EF4 : 64                  	db 100
    2193/    2EF5 : 20                  	db 32
    2194/    2EF6 : 62                  	db 98
    2195/    2EF7 : 65                  	db 101
    2196/    2EF8 : 3A                  	db 58
    2197/    2EF9 : 20                  	db 32
    2198/    2EFA : 20                  	db 32
    2199/    2EFB : 20                  	db 32
    2200/    2EFC : 28                  	db 40
    2201/    2EFD : 69                  	db 105
    2202/    2EFE : 6D                  	db 109
    2203/    2EFF : 70                  	db 112
    2204/    2F00 : 6C                  	db 108
    2205/    2F01 : 65                  	db 101
    2206/    2F02 : 6D                  	db 109
    2207/    2F03 : 65                  	db 101
    2208/    2F04 : 6E                  	db 110
    2209/    2F05 : 74                  	db 116
    2210/    2F06 : 61                  	db 97
    2211/    2F07 : 74                  	db 116
    2212/    2F08 : 69                  	db 105
    2213/    2F09 : 6F                  	db 111
    2214/    2F0A : 6E                  	db 110
    2215/    2F0B : 2D                  	db 45
    2216/    2F0C : 64                  	db 100
    2217/    2F0D : 65                  	db 101
    2218/    2F0E : 70                  	db 112
    2219/    2F0F : 65                  	db 101
    2220/    2F10 : 6E                  	db 110
    2221/    2F11 : 64                  	db 100
    2222/    2F12 : 65                  	db 101
    2223/    2F13 : 6E                  	db 110
    2224/    2F14 : 74                  	db 116
    2225/    2F15 : 29                  	db 41
    2226/    2F16 : 2C                  	db 44
    2227/    2F17 : 20                  	db 32
    2228/    2F18 : 73                  	db 115
    2229/    2F19 : 61                  	db 97
    2230/    2F1A : 6D                  	db 109
    2231/    2F1B : 65                  	db 101
    2232/    2F1C : 20                  	db 32
    2233/    2F1D : 61                  	db 97
    2234/    2F1E : 73                  	db 115
    2235/    2F1F : 20                  	db 32
    2236/    2F20 : 61                  	db 97
    2237/    2F21 : 62                  	db 98
    2238/    2F22 : 6F                  	db 111
    2239/    2F23 : 76                  	db 118
    2240/    2F24 : 65                  	db 101
    2241/    2F25 : 0A                  	db 10
    2242/    2F26 : 00                  	db 0
    2243/    2F27 :                     L101:
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 41 - 10/29/2020 11:28:14


    2244/    2F27 : 4E                  	db 78
    2245/    2F28 : 65                  	db 101
    2246/    2F29 : 78                  	db 120
    2247/    2F2A : 74                  	db 116
    2248/    2F2B : 5F                  	db 95
    2249/    2F2C : 50                  	db 80
    2250/    2F2D : 74                  	db 116
    2251/    2F2E : 72                  	db 114
    2252/    2F2F : 5F                  	db 95
    2253/    2F30 : 47                  	db 71
    2254/    2F31 : 6C                  	db 108
    2255/    2F32 : 6F                  	db 111
    2256/    2F33 : 62                  	db 98
    2257/    2F34 : 2D                  	db 45
    2258/    2F35 : 3E                  	db 62
    2259/    2F36 : 0A                  	db 10
    2260/    2F37 : 00                  	db 0
    2261/    2F38 :                     L100:
    2262/    2F38 : 20                  	db 32
    2263/    2F39 : 20                  	db 32
    2264/    2F3A : 20                  	db 32
    2265/    2F3B : 20                  	db 32
    2266/    2F3C : 20                  	db 32
    2267/    2F3D : 20                  	db 32
    2268/    2F3E : 20                  	db 32
    2269/    2F3F : 20                  	db 32
    2270/    2F40 : 73                  	db 115
    2271/    2F41 : 68                  	db 104
    2272/    2F42 : 6F                  	db 111
    2273/    2F43 : 75                  	db 117
    2274/    2F44 : 6C                  	db 108
    2275/    2F45 : 64                  	db 100
    2276/    2F46 : 20                  	db 32
    2277/    2F47 : 62                  	db 98
    2278/    2F48 : 65                  	db 101
    2279/    2F49 : 3A                  	db 58
    2280/    2F4A : 20                  	db 32
    2281/    2F4B : 20                  	db 32
    2282/    2F4C : 20                  	db 32
    2283/    2F4D : 44                  	db 68
    2284/    2F4E : 48                  	db 72
    2285/    2F4F : 52                  	db 82
    2286/    2F50 : 59                  	db 89
    2287/    2F51 : 53                  	db 83
    2288/    2F52 : 54                  	db 84
    2289/    2F53 : 4F                  	db 79
    2290/    2F54 : 4E                  	db 78
    2291/    2F55 : 45                  	db 69
    2292/    2F56 : 20                  	db 32
    2293/    2F57 : 50                  	db 80
    2294/    2F58 : 52                  	db 82
    2295/    2F59 : 4F                  	db 79
    2296/    2F5A : 47                  	db 71
    2297/    2F5B : 52                  	db 82
    2298/    2F5C : 41                  	db 65
    2299/    2F5D : 4D                  	db 77
    2300/    2F5E : 2C                  	db 44
    2301/    2F5F : 20                  	db 32
    2302/    2F60 : 53                  	db 83
    2303/    2F61 : 4F                  	db 79
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 42 - 10/29/2020 11:28:14


    2304/    2F62 : 4D                  	db 77
    2305/    2F63 : 45                  	db 69
    2306/    2F64 : 20                  	db 32
    2307/    2F65 : 53                  	db 83
    2308/    2F66 : 54                  	db 84
    2309/    2F67 : 52                  	db 82
    2310/    2F68 : 49                  	db 73
    2311/    2F69 : 4E                  	db 78
    2312/    2F6A : 47                  	db 71
    2313/    2F6B : 0A                  	db 10
    2314/    2F6C : 00                  	db 0
    2315/    2F6D :                     L99:
    2316/    2F6D : 20                  	db 32
    2317/    2F6E : 20                  	db 32
    2318/    2F6F : 53                  	db 83
    2319/    2F70 : 74                  	db 116
    2320/    2F71 : 72                  	db 114
    2321/    2F72 : 5F                  	db 95
    2322/    2F73 : 43                  	db 67
    2323/    2F74 : 6F                  	db 111
    2324/    2F75 : 6D                  	db 109
    2325/    2F76 : 70                  	db 112
    2326/    2F77 : 3A                  	db 58
    2327/    2F78 : 20                  	db 32
    2328/    2F79 : 20                  	db 32
    2329/    2F7A : 20                  	db 32
    2330/    2F7B : 20                  	db 32
    2331/    2F7C : 20                  	db 32
    2332/    2F7D : 20                  	db 32
    2333/    2F7E : 20                  	db 32
    2334/    2F7F : 20                  	db 32
    2335/    2F80 : 20                  	db 32
    2336/    2F81 : 20                  	db 32
    2337/    2F82 : 25                  	db 37
    2338/    2F83 : 73                  	db 115
    2339/    2F84 : 0A                  	db 10
    2340/    2F85 : 00                  	db 0
    2341/    2F86 :                     L98:
    2342/    2F86 : 20                  	db 32
    2343/    2F87 : 20                  	db 32
    2344/    2F88 : 49                  	db 73
    2345/    2F89 : 6E                  	db 110
    2346/    2F8A : 74                  	db 116
    2347/    2F8B : 5F                  	db 95
    2348/    2F8C : 43                  	db 67
    2349/    2F8D : 6F                  	db 111
    2350/    2F8E : 6D                  	db 109
    2351/    2F8F : 70                  	db 112
    2352/    2F90 : 3A                  	db 58
    2353/    2F91 : 20                  	db 32
    2354/    2F92 : 20                  	db 32
    2355/    2F93 : 20                  	db 32
    2356/    2F94 : 20                  	db 32
    2357/    2F95 : 20                  	db 32
    2358/    2F96 : 20                  	db 32
    2359/    2F97 : 20                  	db 32
    2360/    2F98 : 20                  	db 32
    2361/    2F99 : 20                  	db 32
    2362/    2F9A : 20                  	db 32
    2363/    2F9B : 25                  	db 37
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 43 - 10/29/2020 11:28:14


    2364/    2F9C : 64                  	db 100
    2365/    2F9D : 0A                  	db 10
    2366/    2F9E : 00                  	db 0
    2367/    2F9F :                     L97:
    2368/    2F9F : 20                  	db 32
    2369/    2FA0 : 20                  	db 32
    2370/    2FA1 : 45                  	db 69
    2371/    2FA2 : 6E                  	db 110
    2372/    2FA3 : 75                  	db 117
    2373/    2FA4 : 6D                  	db 109
    2374/    2FA5 : 5F                  	db 95
    2375/    2FA6 : 43                  	db 67
    2376/    2FA7 : 6F                  	db 111
    2377/    2FA8 : 6D                  	db 109
    2378/    2FA9 : 70                  	db 112
    2379/    2FAA : 3A                  	db 58
    2380/    2FAB : 20                  	db 32
    2381/    2FAC : 20                  	db 32
    2382/    2FAD : 20                  	db 32
    2383/    2FAE : 20                  	db 32
    2384/    2FAF : 20                  	db 32
    2385/    2FB0 : 20                  	db 32
    2386/    2FB1 : 20                  	db 32
    2387/    2FB2 : 20                  	db 32
    2388/    2FB3 : 20                  	db 32
    2389/    2FB4 : 25                  	db 37
    2390/    2FB5 : 64                  	db 100
    2391/    2FB6 : 0A                  	db 10
    2392/    2FB7 : 00                  	db 0
    2393/    2FB8 :                     L96:
    2394/    2FB8 : 20                  	db 32
    2395/    2FB9 : 20                  	db 32
    2396/    2FBA : 44                  	db 68
    2397/    2FBB : 69                  	db 105
    2398/    2FBC : 73                  	db 115
    2399/    2FBD : 63                  	db 99
    2400/    2FBE : 72                  	db 114
    2401/    2FBF : 3A                  	db 58
    2402/    2FC0 : 20                  	db 32
    2403/    2FC1 : 20                  	db 32
    2404/    2FC2 : 20                  	db 32
    2405/    2FC3 : 20                  	db 32
    2406/    2FC4 : 20                  	db 32
    2407/    2FC5 : 20                  	db 32
    2408/    2FC6 : 20                  	db 32
    2409/    2FC7 : 20                  	db 32
    2410/    2FC8 : 20                  	db 32
    2411/    2FC9 : 20                  	db 32
    2412/    2FCA : 20                  	db 32
    2413/    2FCB : 20                  	db 32
    2414/    2FCC : 20                  	db 32
    2415/    2FCD : 25                  	db 37
    2416/    2FCE : 64                  	db 100
    2417/    2FCF : 0A                  	db 10
    2418/    2FD0 : 00                  	db 0
    2419/    2FD1 :                     L95:
    2420/    2FD1 : 20                  	db 32
    2421/    2FD2 : 20                  	db 32
    2422/    2FD3 : 20                  	db 32
    2423/    2FD4 : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 44 - 10/29/2020 11:28:14


    2424/    2FD5 : 20                  	db 32
    2425/    2FD6 : 20                  	db 32
    2426/    2FD7 : 20                  	db 32
    2427/    2FD8 : 20                  	db 32
    2428/    2FD9 : 73                  	db 115
    2429/    2FDA : 68                  	db 104
    2430/    2FDB : 6F                  	db 111
    2431/    2FDC : 75                  	db 117
    2432/    2FDD : 6C                  	db 108
    2433/    2FDE : 64                  	db 100
    2434/    2FDF : 20                  	db 32
    2435/    2FE0 : 62                  	db 98
    2436/    2FE1 : 65                  	db 101
    2437/    2FE2 : 3A                  	db 58
    2438/    2FE3 : 20                  	db 32
    2439/    2FE4 : 20                  	db 32
    2440/    2FE5 : 20                  	db 32
    2441/    2FE6 : 28                  	db 40
    2442/    2FE7 : 69                  	db 105
    2443/    2FE8 : 6D                  	db 109
    2444/    2FE9 : 70                  	db 112
    2445/    2FEA : 6C                  	db 108
    2446/    2FEB : 65                  	db 101
    2447/    2FEC : 6D                  	db 109
    2448/    2FED : 65                  	db 101
    2449/    2FEE : 6E                  	db 110
    2450/    2FEF : 74                  	db 116
    2451/    2FF0 : 61                  	db 97
    2452/    2FF1 : 74                  	db 116
    2453/    2FF2 : 69                  	db 105
    2454/    2FF3 : 6F                  	db 111
    2455/    2FF4 : 6E                  	db 110
    2456/    2FF5 : 2D                  	db 45
    2457/    2FF6 : 64                  	db 100
    2458/    2FF7 : 65                  	db 101
    2459/    2FF8 : 70                  	db 112
    2460/    2FF9 : 65                  	db 101
    2461/    2FFA : 6E                  	db 110
    2462/    2FFB : 64                  	db 100
    2463/    2FFC : 65                  	db 101
    2464/    2FFD : 6E                  	db 110
    2465/    2FFE : 74                  	db 116
    2466/    2FFF : 29                  	db 41
    2467/    3000 : 0A                  	db 10
    2468/    3001 : 00                  	db 0
    2469/    3002 :                     L94:
    2470/    3002 : 20                  	db 32
    2471/    3003 : 20                  	db 32
    2472/    3004 : 50                  	db 80
    2473/    3005 : 74                  	db 116
    2474/    3006 : 72                  	db 114
    2475/    3007 : 5F                  	db 95
    2476/    3008 : 43                  	db 67
    2477/    3009 : 6F                  	db 111
    2478/    300A : 6D                  	db 109
    2479/    300B : 70                  	db 112
    2480/    300C : 3A                  	db 58
    2481/    300D : 20                  	db 32
    2482/    300E : 20                  	db 32
    2483/    300F : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 45 - 10/29/2020 11:28:14


    2484/    3010 : 20                  	db 32
    2485/    3011 : 20                  	db 32
    2486/    3012 : 20                  	db 32
    2487/    3013 : 20                  	db 32
    2488/    3014 : 20                  	db 32
    2489/    3015 : 20                  	db 32
    2490/    3016 : 20                  	db 32
    2491/    3017 : 25                  	db 37
    2492/    3018 : 64                  	db 100
    2493/    3019 : 0A                  	db 10
    2494/    301A : 00                  	db 0
    2495/    301B :                     L93:
    2496/    301B : 50                  	db 80
    2497/    301C : 74                  	db 116
    2498/    301D : 72                  	db 114
    2499/    301E : 5F                  	db 95
    2500/    301F : 47                  	db 71
    2501/    3020 : 6C                  	db 108
    2502/    3021 : 6F                  	db 111
    2503/    3022 : 62                  	db 98
    2504/    3023 : 2D                  	db 45
    2505/    3024 : 3E                  	db 62
    2506/    3025 : 0A                  	db 10
    2507/    3026 : 00                  	db 0
    2508/    3027 :                     L92:
    2509/    3027 : 20                  	db 32
    2510/    3028 : 20                  	db 32
    2511/    3029 : 20                  	db 32
    2512/    302A : 20                  	db 32
    2513/    302B : 20                  	db 32
    2514/    302C : 20                  	db 32
    2515/    302D : 20                  	db 32
    2516/    302E : 20                  	db 32
    2517/    302F : 73                  	db 115
    2518/    3030 : 68                  	db 104
    2519/    3031 : 6F                  	db 111
    2520/    3032 : 75                  	db 117
    2521/    3033 : 6C                  	db 108
    2522/    3034 : 64                  	db 100
    2523/    3035 : 20                  	db 32
    2524/    3036 : 62                  	db 98
    2525/    3037 : 65                  	db 101
    2526/    3038 : 3A                  	db 58
    2527/    3039 : 20                  	db 32
    2528/    303A : 20                  	db 32
    2529/    303B : 20                  	db 32
    2530/    303C : 4E                  	db 78
    2531/    303D : 75                  	db 117
    2532/    303E : 6D                  	db 109
    2533/    303F : 62                  	db 98
    2534/    3040 : 65                  	db 101
    2535/    3041 : 72                  	db 114
    2536/    3042 : 5F                  	db 95
    2537/    3043 : 4F                  	db 79
    2538/    3044 : 66                  	db 102
    2539/    3045 : 5F                  	db 95
    2540/    3046 : 52                  	db 82
    2541/    3047 : 75                  	db 117
    2542/    3048 : 6E                  	db 110
    2543/    3049 : 73                  	db 115
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 46 - 10/29/2020 11:28:14


    2544/    304A : 20                  	db 32
    2545/    304B : 2B                  	db 43
    2546/    304C : 20                  	db 32
    2547/    304D : 31                  	db 49
    2548/    304E : 30                  	db 48
    2549/    304F : 0A                  	db 10
    2550/    3050 : 00                  	db 0
    2551/    3051 :                     L89:
    2552/    3051 : 41                  	db 65
    2553/    3052 : 72                  	db 114
    2554/    3053 : 72                  	db 114
    2555/    3054 : 5F                  	db 95
    2556/    3055 : 32                  	db 50
    2557/    3056 : 5F                  	db 95
    2558/    3057 : 47                  	db 71
    2559/    3058 : 6C                  	db 108
    2560/    3059 : 6F                  	db 111
    2561/    305A : 62                  	db 98
    2562/    305B : 5B                  	db 91
    2563/    305C : 38                  	db 56
    2564/    305D : 5D                  	db 93
    2565/    305E : 5B                  	db 91
    2566/    305F : 37                  	db 55
    2567/    3060 : 5D                  	db 93
    2568/    3061 : 3A                  	db 58
    2569/    3062 : 20                  	db 32
    2570/    3063 : 20                  	db 32
    2571/    3064 : 20                  	db 32
    2572/    3065 : 20                  	db 32
    2573/    3066 : 25                  	db 37
    2574/    3067 : 64                  	db 100
    2575/    3068 : 0A                  	db 10
    2576/    3069 : 00                  	db 0
    2577/    306A :                     L87:
    2578/    306A : 41                  	db 65
    2579/    306B : 72                  	db 114
    2580/    306C : 72                  	db 114
    2581/    306D : 5F                  	db 95
    2582/    306E : 31                  	db 49
    2583/    306F : 5F                  	db 95
    2584/    3070 : 47                  	db 71
    2585/    3071 : 6C                  	db 108
    2586/    3072 : 6F                  	db 111
    2587/    3073 : 62                  	db 98
    2588/    3074 : 5B                  	db 91
    2589/    3075 : 38                  	db 56
    2590/    3076 : 5D                  	db 93
    2591/    3077 : 3A                  	db 58
    2592/    3078 : 20                  	db 32
    2593/    3079 : 20                  	db 32
    2594/    307A : 20                  	db 32
    2595/    307B : 20                  	db 32
    2596/    307C : 20                  	db 32
    2597/    307D : 20                  	db 32
    2598/    307E : 20                  	db 32
    2599/    307F : 25                  	db 37
    2600/    3080 : 64                  	db 100
    2601/    3081 : 0A                  	db 10
    2602/    3082 : 00                  	db 0
    2603/    3083 :                     L86:
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 47 - 10/29/2020 11:28:14


    2604/    3083 : 43                  	db 67
    2605/    3084 : 68                  	db 104
    2606/    3085 : 5F                  	db 95
    2607/    3086 : 32                  	db 50
    2608/    3087 : 5F                  	db 95
    2609/    3088 : 47                  	db 71
    2610/    3089 : 6C                  	db 108
    2611/    308A : 6F                  	db 111
    2612/    308B : 62                  	db 98
    2613/    308C : 3A                  	db 58
    2614/    308D : 20                  	db 32
    2615/    308E : 20                  	db 32
    2616/    308F : 20                  	db 32
    2617/    3090 : 20                  	db 32
    2618/    3091 : 20                  	db 32
    2619/    3092 : 20                  	db 32
    2620/    3093 : 20                  	db 32
    2621/    3094 : 20                  	db 32
    2622/    3095 : 20                  	db 32
    2623/    3096 : 20                  	db 32
    2624/    3097 : 20                  	db 32
    2625/    3098 : 25                  	db 37
    2626/    3099 : 63                  	db 99
    2627/    309A : 0A                  	db 10
    2628/    309B : 00                  	db 0
    2629/    309C :                     L85:
    2630/    309C : 20                  	db 32
    2631/    309D : 20                  	db 32
    2632/    309E : 20                  	db 32
    2633/    309F : 20                  	db 32
    2634/    30A0 : 20                  	db 32
    2635/    30A1 : 20                  	db 32
    2636/    30A2 : 20                  	db 32
    2637/    30A3 : 20                  	db 32
    2638/    30A4 : 73                  	db 115
    2639/    30A5 : 68                  	db 104
    2640/    30A6 : 6F                  	db 111
    2641/    30A7 : 75                  	db 117
    2642/    30A8 : 6C                  	db 108
    2643/    30A9 : 64                  	db 100
    2644/    30AA : 20                  	db 32
    2645/    30AB : 62                  	db 98
    2646/    30AC : 65                  	db 101
    2647/    30AD : 3A                  	db 58
    2648/    30AE : 20                  	db 32
    2649/    30AF : 20                  	db 32
    2650/    30B0 : 20                  	db 32
    2651/    30B1 : 25                  	db 37
    2652/    30B2 : 63                  	db 99
    2653/    30B3 : 0A                  	db 10
    2654/    30B4 : 00                  	db 0
    2655/    30B5 :                     L84:
    2656/    30B5 : 43                  	db 67
    2657/    30B6 : 68                  	db 104
    2658/    30B7 : 5F                  	db 95
    2659/    30B8 : 31                  	db 49
    2660/    30B9 : 5F                  	db 95
    2661/    30BA : 47                  	db 71
    2662/    30BB : 6C                  	db 108
    2663/    30BC : 6F                  	db 111
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 48 - 10/29/2020 11:28:14


    2664/    30BD : 62                  	db 98
    2665/    30BE : 3A                  	db 58
    2666/    30BF : 20                  	db 32
    2667/    30C0 : 20                  	db 32
    2668/    30C1 : 20                  	db 32
    2669/    30C2 : 20                  	db 32
    2670/    30C3 : 20                  	db 32
    2671/    30C4 : 20                  	db 32
    2672/    30C5 : 20                  	db 32
    2673/    30C6 : 20                  	db 32
    2674/    30C7 : 20                  	db 32
    2675/    30C8 : 20                  	db 32
    2676/    30C9 : 20                  	db 32
    2677/    30CA : 25                  	db 37
    2678/    30CB : 63                  	db 99
    2679/    30CC : 0A                  	db 10
    2680/    30CD : 00                  	db 0
    2681/    30CE :                     L83:
    2682/    30CE : 42                  	db 66
    2683/    30CF : 6F                  	db 111
    2684/    30D0 : 6F                  	db 111
    2685/    30D1 : 6C                  	db 108
    2686/    30D2 : 5F                  	db 95
    2687/    30D3 : 47                  	db 71
    2688/    30D4 : 6C                  	db 108
    2689/    30D5 : 6F                  	db 111
    2690/    30D6 : 62                  	db 98
    2691/    30D7 : 3A                  	db 58
    2692/    30D8 : 20                  	db 32
    2693/    30D9 : 20                  	db 32
    2694/    30DA : 20                  	db 32
    2695/    30DB : 20                  	db 32
    2696/    30DC : 20                  	db 32
    2697/    30DD : 20                  	db 32
    2698/    30DE : 20                  	db 32
    2699/    30DF : 20                  	db 32
    2700/    30E0 : 20                  	db 32
    2701/    30E1 : 20                  	db 32
    2702/    30E2 : 20                  	db 32
    2703/    30E3 : 25                  	db 37
    2704/    30E4 : 64                  	db 100
    2705/    30E5 : 0A                  	db 10
    2706/    30E6 : 00                  	db 0
    2707/    30E7 :                     L82:
    2708/    30E7 : 20                  	db 32
    2709/    30E8 : 20                  	db 32
    2710/    30E9 : 20                  	db 32
    2711/    30EA : 20                  	db 32
    2712/    30EB : 20                  	db 32
    2713/    30EC : 20                  	db 32
    2714/    30ED : 20                  	db 32
    2715/    30EE : 20                  	db 32
    2716/    30EF : 73                  	db 115
    2717/    30F0 : 68                  	db 104
    2718/    30F1 : 6F                  	db 111
    2719/    30F2 : 75                  	db 117
    2720/    30F3 : 6C                  	db 108
    2721/    30F4 : 64                  	db 100
    2722/    30F5 : 20                  	db 32
    2723/    30F6 : 62                  	db 98
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 49 - 10/29/2020 11:28:14


    2724/    30F7 : 65                  	db 101
    2725/    30F8 : 3A                  	db 58
    2726/    30F9 : 20                  	db 32
    2727/    30FA : 20                  	db 32
    2728/    30FB : 20                  	db 32
    2729/    30FC : 25                  	db 37
    2730/    30FD : 64                  	db 100
    2731/    30FE : 0A                  	db 10
    2732/    30FF : 00                  	db 0
    2733/    3100 :                     L81:
    2734/    3100 : 49                  	db 73
    2735/    3101 : 6E                  	db 110
    2736/    3102 : 74                  	db 116
    2737/    3103 : 5F                  	db 95
    2738/    3104 : 47                  	db 71
    2739/    3105 : 6C                  	db 108
    2740/    3106 : 6F                  	db 111
    2741/    3107 : 62                  	db 98
    2742/    3108 : 3A                  	db 58
    2743/    3109 : 20                  	db 32
    2744/    310A : 20                  	db 32
    2745/    310B : 20                  	db 32
    2746/    310C : 20                  	db 32
    2747/    310D : 20                  	db 32
    2748/    310E : 20                  	db 32
    2749/    310F : 20                  	db 32
    2750/    3110 : 20                  	db 32
    2751/    3111 : 20                  	db 32
    2752/    3112 : 20                  	db 32
    2753/    3113 : 20                  	db 32
    2754/    3114 : 20                  	db 32
    2755/    3115 : 25                  	db 37
    2756/    3116 : 64                  	db 100
    2757/    3117 : 0A                  	db 10
    2758/    3118 : 00                  	db 0
    2759/    3119 :                     L80:
    2760/    3119 : 46                  	db 70
    2761/    311A : 69                  	db 105
    2762/    311B : 6E                  	db 110
    2763/    311C : 61                  	db 97
    2764/    311D : 6C                  	db 108
    2765/    311E : 20                  	db 32
    2766/    311F : 76                  	db 118
    2767/    3120 : 61                  	db 97
    2768/    3121 : 6C                  	db 108
    2769/    3122 : 75                  	db 117
    2770/    3123 : 65                  	db 101
    2771/    3124 : 73                  	db 115
    2772/    3125 : 20                  	db 32
    2773/    3126 : 6F                  	db 111
    2774/    3127 : 66                  	db 102
    2775/    3128 : 20                  	db 32
    2776/    3129 : 74                  	db 116
    2777/    312A : 68                  	db 104
    2778/    312B : 65                  	db 101
    2779/    312C : 20                  	db 32
    2780/    312D : 76                  	db 118
    2781/    312E : 61                  	db 97
    2782/    312F : 72                  	db 114
    2783/    3130 : 69                  	db 105
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 50 - 10/29/2020 11:28:14


    2784/    3131 : 61                  	db 97
    2785/    3132 : 62                  	db 98
    2786/    3133 : 6C                  	db 108
    2787/    3134 : 65                  	db 101
    2788/    3135 : 73                  	db 115
    2789/    3136 : 20                  	db 32
    2790/    3137 : 75                  	db 117
    2791/    3138 : 73                  	db 115
    2792/    3139 : 65                  	db 101
    2793/    313A : 64                  	db 100
    2794/    313B : 20                  	db 32
    2795/    313C : 69                  	db 105
    2796/    313D : 6E                  	db 110
    2797/    313E : 20                  	db 32
    2798/    313F : 74                  	db 116
    2799/    3140 : 68                  	db 104
    2800/    3141 : 65                  	db 101
    2801/    3142 : 20                  	db 32
    2802/    3143 : 62                  	db 98
    2803/    3144 : 65                  	db 101
    2804/    3145 : 6E                  	db 110
    2805/    3146 : 63                  	db 99
    2806/    3147 : 68                  	db 104
    2807/    3148 : 6D                  	db 109
    2808/    3149 : 61                  	db 97
    2809/    314A : 72                  	db 114
    2810/    314B : 6B                  	db 107
    2811/    314C : 3A                  	db 58
    2812/    314D : 0A                  	db 10
    2813/    314E : 00                  	db 0
    2814/    314F :                     L79:
    2815/    314F : 45                  	db 69
    2816/    3150 : 78                  	db 120
    2817/    3151 : 65                  	db 101
    2818/    3152 : 63                  	db 99
    2819/    3153 : 75                  	db 117
    2820/    3154 : 74                  	db 116
    2821/    3155 : 69                  	db 105
    2822/    3156 : 6F                  	db 111
    2823/    3157 : 6E                  	db 110
    2824/    3158 : 20                  	db 32
    2825/    3159 : 65                  	db 101
    2826/    315A : 6E                  	db 110
    2827/    315B : 64                  	db 100
    2828/    315C : 73                  	db 115
    2829/    315D : 21                  	db 33
    2830/    315E : 40                  	db 64
    2831/    315F : 23                  	db 35
    2832/    3160 : 0A                  	db 10
    2833/    3161 : 00                  	db 0
    2834/    3162 :                     L78:
    2835/    3162 : 44                  	db 68
    2836/    3163 : 48                  	db 72
    2837/    3164 : 52                  	db 82
    2838/    3165 : 59                  	db 89
    2839/    3166 : 53                  	db 83
    2840/    3167 : 54                  	db 84
    2841/    3168 : 4F                  	db 79
    2842/    3169 : 4E                  	db 78
    2843/    316A : 45                  	db 69
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 51 - 10/29/2020 11:28:14


    2844/    316B : 20                  	db 32
    2845/    316C : 50                  	db 80
    2846/    316D : 52                  	db 82
    2847/    316E : 4F                  	db 79
    2848/    316F : 47                  	db 71
    2849/    3170 : 52                  	db 82
    2850/    3171 : 41                  	db 65
    2851/    3172 : 4D                  	db 77
    2852/    3173 : 2C                  	db 44
    2853/    3174 : 20                  	db 32
    2854/    3175 : 33                  	db 51
    2855/    3176 : 27                  	db 39
    2856/    3177 : 52                  	db 82
    2857/    3178 : 44                  	db 68
    2858/    3179 : 20                  	db 32
    2859/    317A : 53                  	db 83
    2860/    317B : 54                  	db 84
    2861/    317C : 52                  	db 82
    2862/    317D : 49                  	db 73
    2863/    317E : 4E                  	db 78
    2864/    317F : 47                  	db 71
    2865/    3180 : 00                  	db 0
    2866/    3181 :                     L65:
    2867/    3181 : 44                  	db 68
    2868/    3182 : 48                  	db 72
    2869/    3183 : 52                  	db 82
    2870/    3184 : 59                  	db 89
    2871/    3185 : 53                  	db 83
    2872/    3186 : 54                  	db 84
    2873/    3187 : 4F                  	db 79
    2874/    3188 : 4E                  	db 78
    2875/    3189 : 45                  	db 69
    2876/    318A : 20                  	db 32
    2877/    318B : 50                  	db 80
    2878/    318C : 52                  	db 82
    2879/    318D : 4F                  	db 79
    2880/    318E : 47                  	db 71
    2881/    318F : 52                  	db 82
    2882/    3190 : 41                  	db 65
    2883/    3191 : 4D                  	db 77
    2884/    3192 : 2C                  	db 44
    2885/    3193 : 20                  	db 32
    2886/    3194 : 32                  	db 50
    2887/    3195 : 27                  	db 39
    2888/    3196 : 4E                  	db 78
    2889/    3197 : 44                  	db 68
    2890/    3198 : 20                  	db 32
    2891/    3199 : 53                  	db 83
    2892/    319A : 54                  	db 84
    2893/    319B : 52                  	db 82
    2894/    319C : 49                  	db 73
    2895/    319D : 4E                  	db 78
    2896/    319E : 47                  	db 71
    2897/    319F : 00                  	db 0
    2898/    31A0 :                     L60:
    2899/    31A0 : 45                  	db 69
    2900/    31A1 : 78                  	db 120
    2901/    31A2 : 65                  	db 101
    2902/    31A3 : 63                  	db 99
    2903/    31A4 : 75                  	db 117
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 52 - 10/29/2020 11:28:14


    2904/    31A5 : 74                  	db 116
    2905/    31A6 : 69                  	db 105
    2906/    31A7 : 6F                  	db 111
    2907/    31A8 : 6E                  	db 110
    2908/    31A9 : 20                  	db 32
    2909/    31AA : 73                  	db 115
    2910/    31AB : 74                  	db 116
    2911/    31AC : 61                  	db 97
    2912/    31AD : 72                  	db 114
    2913/    31AE : 74                  	db 116
    2914/    31AF : 73                  	db 115
    2915/    31B0 : 2C                  	db 44
    2916/    31B1 : 20                  	db 32
    2917/    31B2 : 25                  	db 37
    2918/    31B3 : 64                  	db 100
    2919/    31B4 : 20                  	db 32
    2920/    31B5 : 72                  	db 114
    2921/    31B6 : 75                  	db 117
    2922/    31B7 : 6E                  	db 110
    2923/    31B8 : 73                  	db 115
    2924/    31B9 : 20                  	db 32
    2925/    31BA : 74                  	db 116
    2926/    31BB : 68                  	db 104
    2927/    31BC : 72                  	db 114
    2928/    31BD : 6F                  	db 111
    2929/    31BE : 75                  	db 117
    2930/    31BF : 67                  	db 103
    2931/    31C0 : 68                  	db 104
    2932/    31C1 : 20                  	db 32
    2933/    31C2 : 44                  	db 68
    2934/    31C3 : 68                  	db 104
    2935/    31C4 : 72                  	db 114
    2936/    31C5 : 79                  	db 121
    2937/    31C6 : 73                  	db 115
    2938/    31C7 : 74                  	db 116
    2939/    31C8 : 6F                  	db 111
    2940/    31C9 : 6E                  	db 110
    2941/    31CA : 65                  	db 101
    2942/    31CB : 20                  	db 32
    2943/    31CC : 21                  	db 33
    2944/    31CD : 40                  	db 64
    2945/    31CE : 23                  	db 35
    2946/    31CF : 0A                  	db 10
    2947/    31D0 : 00                  	db 0
    2948/    31D1 :                     L59:
    2949/    31D1 : 50                  	db 80
    2950/    31D2 : 6C                  	db 108
    2951/    31D3 : 65                  	db 101
    2952/    31D4 : 61                  	db 97
    2953/    31D5 : 73                  	db 115
    2954/    31D6 : 65                  	db 101
    2955/    31D7 : 20                  	db 32
    2956/    31D8 : 67                  	db 103
    2957/    31D9 : 69                  	db 105
    2958/    31DA : 76                  	db 118
    2959/    31DB : 65                  	db 101
    2960/    31DC : 20                  	db 32
    2961/    31DD : 74                  	db 116
    2962/    31DE : 68                  	db 104
    2963/    31DF : 65                  	db 101
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 53 - 10/29/2020 11:28:14


    2964/    31E0 : 20                  	db 32
    2965/    31E1 : 6E                  	db 110
    2966/    31E2 : 75                  	db 117
    2967/    31E3 : 6D                  	db 109
    2968/    31E4 : 62                  	db 98
    2969/    31E5 : 65                  	db 101
    2970/    31E6 : 72                  	db 114
    2971/    31E7 : 20                  	db 32
    2972/    31E8 : 6F                  	db 111
    2973/    31E9 : 66                  	db 102
    2974/    31EA : 20                  	db 32
    2975/    31EB : 72                  	db 114
    2976/    31EC : 75                  	db 117
    2977/    31ED : 6E                  	db 110
    2978/    31EE : 73                  	db 115
    2979/    31EF : 20                  	db 32
    2980/    31F0 : 74                  	db 116
    2981/    31F1 : 68                  	db 104
    2982/    31F2 : 72                  	db 114
    2983/    31F3 : 6F                  	db 111
    2984/    31F4 : 75                  	db 117
    2985/    31F5 : 67                  	db 103
    2986/    31F6 : 68                  	db 104
    2987/    31F7 : 20                  	db 32
    2988/    31F8 : 74                  	db 116
    2989/    31F9 : 68                  	db 104
    2990/    31FA : 65                  	db 101
    2991/    31FB : 20                  	db 32
    2992/    31FC : 62                  	db 98
    2993/    31FD : 65                  	db 101
    2994/    31FE : 6E                  	db 110
    2995/    31FF : 63                  	db 99
    2996/    3200 : 68                  	db 104
    2997/    3201 : 6D                  	db 109
    2998/    3202 : 61                  	db 97
    2999/    3203 : 72                  	db 114
    3000/    3204 : 6B                  	db 107
    3001/    3205 : 3A                  	db 58
    3002/    3206 : 20                  	db 32
    3003/    3207 : 00                  	db 0
    3004/    3208 :                     L58:
    3005/    3208 : 50                  	db 80
    3006/    3209 : 72                  	db 114
    3007/    320A : 6F                  	db 111
    3008/    320B : 67                  	db 103
    3009/    320C : 72                  	db 114
    3010/    320D : 61                  	db 97
    3011/    320E : 6D                  	db 109
    3012/    320F : 20                  	db 32
    3013/    3210 : 63                  	db 99
    3014/    3211 : 6F                  	db 111
    3015/    3212 : 6D                  	db 109
    3016/    3213 : 70                  	db 112
    3017/    3214 : 69                  	db 105
    3018/    3215 : 6C                  	db 108
    3019/    3216 : 65                  	db 101
    3020/    3217 : 64                  	db 100
    3021/    3218 : 20                  	db 32
    3022/    3219 : 77                  	db 119
    3023/    321A : 69                  	db 105
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 54 - 10/29/2020 11:28:14


    3024/    321B : 74                  	db 116
    3025/    321C : 68                  	db 104
    3026/    321D : 6F                  	db 111
    3027/    321E : 75                  	db 117
    3028/    321F : 74                  	db 116
    3029/    3220 : 20                  	db 32
    3030/    3221 : 27                  	db 39
    3031/    3222 : 72                  	db 114
    3032/    3223 : 65                  	db 101
    3033/    3224 : 67                  	db 103
    3034/    3225 : 69                  	db 105
    3035/    3226 : 73                  	db 115
    3036/    3227 : 74                  	db 116
    3037/    3228 : 65                  	db 101
    3038/    3229 : 72                  	db 114
    3039/    322A : 27                  	db 39
    3040/    322B : 20                  	db 32
    3041/    322C : 61                  	db 97
    3042/    322D : 74                  	db 116
    3043/    322E : 74                  	db 116
    3044/    322F : 72                  	db 114
    3045/    3230 : 69                  	db 105
    3046/    3231 : 62                  	db 98
    3047/    3232 : 75                  	db 117
    3048/    3233 : 74                  	db 116
    3049/    3234 : 65                  	db 101
    3050/    3235 : 0A                  	db 10
    3051/    3236 : 00                  	db 0
    3052/    3237 :                     L57:
    3053/    3237 : 50                  	db 80
    3054/    3238 : 72                  	db 114
    3055/    3239 : 6F                  	db 111
    3056/    323A : 67                  	db 103
    3057/    323B : 72                  	db 114
    3058/    323C : 61                  	db 97
    3059/    323D : 6D                  	db 109
    3060/    323E : 20                  	db 32
    3061/    323F : 63                  	db 99
    3062/    3240 : 6F                  	db 111
    3063/    3241 : 6D                  	db 109
    3064/    3242 : 70                  	db 112
    3065/    3243 : 69                  	db 105
    3066/    3244 : 6C                  	db 108
    3067/    3245 : 65                  	db 101
    3068/    3246 : 64                  	db 100
    3069/    3247 : 20                  	db 32
    3070/    3248 : 77                  	db 119
    3071/    3249 : 69                  	db 105
    3072/    324A : 74                  	db 116
    3073/    324B : 68                  	db 104
    3074/    324C : 20                  	db 32
    3075/    324D : 27                  	db 39
    3076/    324E : 72                  	db 114
    3077/    324F : 65                  	db 101
    3078/    3250 : 67                  	db 103
    3079/    3251 : 69                  	db 105
    3080/    3252 : 73                  	db 115
    3081/    3253 : 74                  	db 116
    3082/    3254 : 65                  	db 101
    3083/    3255 : 72                  	db 114
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 55 - 10/29/2020 11:28:14


    3084/    3256 : 27                  	db 39
    3085/    3257 : 20                  	db 32
    3086/    3258 : 61                  	db 97
    3087/    3259 : 74                  	db 116
    3088/    325A : 74                  	db 116
    3089/    325B : 72                  	db 114
    3090/    325C : 69                  	db 105
    3091/    325D : 62                  	db 98
    3092/    325E : 75                  	db 117
    3093/    325F : 74                  	db 116
    3094/    3260 : 65                  	db 101
    3095/    3261 : 0A                  	db 10
    3096/    3262 : 00                  	db 0
    3097/    3263 :                     L54:
    3098/    3263 : 44                  	db 68
    3099/    3264 : 68                  	db 104
    3100/    3265 : 72                  	db 114
    3101/    3266 : 79                  	db 121
    3102/    3267 : 73                  	db 115
    3103/    3268 : 74                  	db 116
    3104/    3269 : 6F                  	db 111
    3105/    326A : 6E                  	db 110
    3106/    326B : 65                  	db 101
    3107/    326C : 20                  	db 32
    3108/    326D : 42                  	db 66
    3109/    326E : 65                  	db 101
    3110/    326F : 6E                  	db 110
    3111/    3270 : 63                  	db 99
    3112/    3271 : 68                  	db 104
    3113/    3272 : 6D                  	db 109
    3114/    3273 : 61                  	db 97
    3115/    3274 : 72                  	db 114
    3116/    3275 : 6B                  	db 107
    3117/    3276 : 2C                  	db 44
    3118/    3277 : 20                  	db 32
    3119/    3278 : 56                  	db 86
    3120/    3279 : 65                  	db 101
    3121/    327A : 72                  	db 114
    3122/    327B : 73                  	db 115
    3123/    327C : 69                  	db 105
    3124/    327D : 6F                  	db 111
    3125/    327E : 6E                  	db 110
    3126/    327F : 20                  	db 32
    3127/    3280 : 32                  	db 50
    3128/    3281 : 2E                  	db 46
    3129/    3282 : 31                  	db 49
    3130/    3283 : 20                  	db 32
    3131/    3284 : 28                  	db 40
    3132/    3285 : 4C                  	db 76
    3133/    3286 : 61                  	db 97
    3134/    3287 : 6E                  	db 110
    3135/    3288 : 67                  	db 103
    3136/    3289 : 75                  	db 117
    3137/    328A : 61                  	db 97
    3138/    328B : 67                  	db 103
    3139/    328C : 65                  	db 101
    3140/    328D : 3A                  	db 58
    3141/    328E : 20                  	db 32
    3142/    328F : 43                  	db 67
    3143/    3290 : 29                  	db 41
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 56 - 10/29/2020 11:28:14


    3144/    3291 : 0A                  	db 10
    3145/    3292 : 00                  	db 0
    3146/    3293 :                     L53:
    3147/    3293 : 0A                  	db 10
    3148/    3294 : 00                  	db 0
    3149/    3295 :                     L50:
    3150/    3295 : 41                  	db 65
    3151/    3296 : 72                  	db 114
    3152/    3297 : 72                  	db 114
    3153/    3298 : 5F                  	db 95
    3154/    3299 : 32                  	db 50
    3155/    329A : 5F                  	db 95
    3156/    329B : 47                  	db 71
    3157/    329C : 6C                  	db 108
    3158/    329D : 6F                  	db 111
    3159/    329E : 62                  	db 98
    3160/    329F : 5B                  	db 91
    3161/    32A0 : 38                  	db 56
    3162/    32A1 : 5D                  	db 93
    3163/    32A2 : 5B                  	db 91
    3164/    32A3 : 37                  	db 55
    3165/    32A4 : 5D                  	db 93
    3166/    32A5 : 3A                  	db 58
    3167/    32A6 : 25                  	db 37
    3168/    32A7 : 78                  	db 120
    3169/    32A8 : 3D                  	db 61
    3170/    32A9 : 25                  	db 37
    3171/    32AA : 64                  	db 100
    3172/    32AB : 0A                  	db 10
    3173/    32AC : 00                  	db 0
    3174/    32AD :                     L47:
    3175/    32AD : 44                  	db 68
    3176/    32AE : 48                  	db 72
    3177/    32AF : 52                  	db 82
    3178/    32B0 : 59                  	db 89
    3179/    32B1 : 53                  	db 83
    3180/    32B2 : 54                  	db 84
    3181/    32B3 : 4F                  	db 79
    3182/    32B4 : 4E                  	db 78
    3183/    32B5 : 45                  	db 69
    3184/    32B6 : 20                  	db 32
    3185/    32B7 : 50                  	db 80
    3186/    32B8 : 52                  	db 82
    3187/    32B9 : 4F                  	db 79
    3188/    32BA : 47                  	db 71
    3189/    32BB : 52                  	db 82
    3190/    32BC : 41                  	db 65
    3191/    32BD : 4D                  	db 77
    3192/    32BE : 2C                  	db 44
    3193/    32BF : 20                  	db 32
    3194/    32C0 : 31                  	db 49
    3195/    32C1 : 27                  	db 39
    3196/    32C2 : 53                  	db 83
    3197/    32C3 : 54                  	db 84
    3198/    32C4 : 20                  	db 32
    3199/    32C5 : 53                  	db 83
    3200/    32C6 : 54                  	db 84
    3201/    32C7 : 52                  	db 82
    3202/    32C8 : 49                  	db 73
    3203/    32C9 : 4E                  	db 78
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 57 - 10/29/2020 11:28:14


    3204/    32CA : 47                  	db 71
    3205/    32CB : 00                  	db 0
    3206/    32CC :                     L46:
    3207/    32CC : 44                  	db 68
    3208/    32CD : 48                  	db 72
    3209/    32CE : 52                  	db 82
    3210/    32CF : 59                  	db 89
    3211/    32D0 : 53                  	db 83
    3212/    32D1 : 54                  	db 84
    3213/    32D2 : 4F                  	db 79
    3214/    32D3 : 4E                  	db 78
    3215/    32D4 : 45                  	db 69
    3216/    32D5 : 20                  	db 32
    3217/    32D6 : 50                  	db 80
    3218/    32D7 : 52                  	db 82
    3219/    32D8 : 4F                  	db 79
    3220/    32D9 : 47                  	db 71
    3221/    32DA : 52                  	db 82
    3222/    32DB : 41                  	db 65
    3223/    32DC : 4D                  	db 77
    3224/    32DD : 2C                  	db 44
    3225/    32DE : 20                  	db 32
    3226/    32DF : 53                  	db 83
    3227/    32E0 : 4F                  	db 79
    3228/    32E1 : 4D                  	db 77
    3229/    32E2 : 45                  	db 69
    3230/    32E3 : 20                  	db 32
    3231/    32E4 : 53                  	db 83
    3232/    32E5 : 54                  	db 84
    3233/    32E6 : 52                  	db 82
    3234/    32E7 : 49                  	db 73
    3235/    32E8 : 4E                  	db 78
    3236/    32E9 : 47                  	db 71
    3237/    32EA : 00                  	db 0
    3238/    32EB :                     	include lcc1802epiloCX.inc
(1)    1/    32EB :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    32EB :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    32EB :                     ;this is the version published with the lcc1802121229 release
(1)    4/    32EB :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    32EB :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    32EB :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    32EB :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    32EB :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    32EB :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    32EB :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    32EB :                     ;feb 27 changed stack to start at 7fff
(1)   12/    32EB :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    32EB :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    32EB :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    32EB :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/    32EB :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/    32EB :                     ;16-09-20 allow stack relocation 
(1)   18/    32EB :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/    32EB :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/    32EB :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/    32EB :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/    32EB :                     ;17-04-09 don't include call/return for 1806
(1)   23/    32EB :                     ;17-10-17 SCRT routines changed to clean stack model i.e. push is stxd stxd, pop is inc lda inc ldn
(1)   24/    32EB :                     ;17-10-19 using CPUSPEED instead of LCC1802CPUSPEED, also STACKLOC instead of LCCSTACKLOC
(1)   25/    32EB :                     ;17-10-23 extending work area protection from 10-13 above for 1802 as well as 1805
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(lcc1802epiloCX.inc) - Page 58 - 10/29/2020 11:28:14


(1)   26/    32EB : =0EH                rwork:	equ	memAddr	;work register
(1)   27/    32EB :                     ;17-11-25 conditional include for register saves
(1)   28/    32EB :                     ;18-01-28 changed onems() to always use 4 instruction loop, accommodate slower CPU speed
(1)   29/    32EB :                     ;20-04-28 specific version for COMX-35/Crosslib
(1)   30/    32EB :                     ;20-04-29 saving registers for COMX basic
(1)   31/    32EB :                     ;20-04-30 changing init for COMX - saving R4&5, using my own SCRT routines.
(1)   32/    32EB :                     ;20-05-01 saving D around Call/return
(1)   33/    32EB :                     ;20-05-18 added sex r2 in SCRT return routine
(1)   34/    32EB :                     ;20-05-23 align for dubdabx - really should move to nstdlib.inc
(1)   35/    32EB :                     ;20-06-19 changed lbr die to br on return from main
(1)   36/    32EB :                     ;20-07-10 (Marcel) added orgc at start to solve issue with branches to data area (suggested by Bill)
(1)   37/    32EB :                     ;20-08-01 dubdabx moved to nstdlib.inc
(1)   38/    32EB : (MACRO)              orgc
(1)   39/    32EB :                     ;;function_start lcc1802init.inc void function(void)
(1)   40/    32EB :                     lcc1802init:
(1)   41/    32EB : =>UNDEFINED           IFDEF SAVEREGS
(1)   42/    32EB :                         include "saveregs.inc"
(1)   43/    32EB : [41]                  ENDIF
(1)   44/    32EB : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX - don't set stack or PC, return to BASIC at end
(1)   45/    32EB :                       	pushr 4
(1)   46/    32EB :                       	pushr 5
(1)   47/    32EB :                       	pushr 7			;wjr 20-04-29 save/restore BASIC registers
(1)   48/    32EB :                       	pushr 9	
(1)   49/    32EB :                       	pushr 11
(1)   50/    32EB :                       	pushr 15
(1)   51/    32EB :                     	ldiReg	RCALL,_call
(1)   52/    32EB :                     	ldiReg	RRET,_return
(1)   53/    32EB :                       	Ccall _main		;wjr 20-04-28 start the C program
(1)   54/    32EB :                       	popr  15		;wjr 20-04-29 save/restore BASIC registers
(1)   55/    32EB :                       	popr  11
(1)   56/    32EB :                       	popr  9
(1)   57/    32EB :                       	popr  7
(1)   58/    32EB :                       	popr 5
(1)   59/    32EB :                       	popr 4
(1)   60/    32EB :                       	Cretn			;wjr 20-04-28 hopefully back to COMX Basic
(1)   61/    32EB : =>TRUE                ELSE
(1)   62/    32EB : =>TRUE                IF    MOMCPU<>$1805		;for 1806 use SCAL 
(1)   63/    32EB : (MACRO)             	ldiReg	RCALL,_call
(1)   64/    32F1 : (MACRO)             	ldiReg	RRET,_return
(1)   65/    32F7 : =>FALSE               ELSE
(1)   66/    32F7 :                     	ldiReg	RCALL,$$_die; _call
(1)   67/    32F7 :                     	ldiReg	RRET,$$_die; _return
(1)   68/    32F7 : [62]                  ENDIF
(1)   69/    32F7 : =>UNDEFINED         	  IFNDEF  STACKLOC		;wjr 16-09-20 allow stack relocation
(1)   70/    32F7 : (MACRO)             		ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   71/    32FD : =>FALSE             	  ELSEIF				;wjr 16-09-20
(1)   72/    32FD :                     		ldiReg	SP,STACKLOC	;wjr 16-09-20 start stack as specified
(1)   73/    32FD : [69]                	  ENDIF				;wjr 16-09-20
(1)   74/    32FD : E2                  		sex	SP
(1)   75/    32FE : (MACRO)             		ldiReg	RPC,$$_00000
(1)   76/    3304 : D3                  		sep	RPC
(1)   77/    3305 :                     	$$_00000:
(1)   78/    3305 : (MACRO)             		Ccall _main	;call the main routine
(1)   79/    3308 : 30 08               	$$_die:	br	$$_die		;loop here when main returns
(1)   80/    330A : DE AD               		db	0xde,0xad
(1)   81/    330C : [44]                  ENDIF
(1)   82/    330C :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   83/    330C :                     _setqOn:
(1)   84/    330C : 7B                  	seq
(1)   85/    330D : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(lcc1802epiloCX.inc) - Page 59 - 10/29/2020 11:28:14


(1)   86/    330E :                     _setqOff:
(1)   87/    330E : 7A                  	req
(1)   88/    330F : (MACRO)             	Cretn
(1)   89/    3310 : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   90/    3310 :                     _modU2:	;16 bit unsigned remainder
(1)   91/    3310 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   92/    3310 : (MACRO)                 Ccall _divU2
(1)   93/    3313 : 8C                      glo regArg1
(1)   94/    3314 : AF                      plo retVal
(1)   95/    3315 : 9C                      ghi regArg1
(1)   96/    3316 : BF                      phi retVal
(1)   97/    3317 : (MACRO)                 Cretn
(1)   98/    3318 :                         
(1)   99/    3318 :                     _modI2:	;16 bit signed remainder
(1)  100/    3318 :                     	; just calls the 16 bit division then puts remainder into return value
(1)  101/    3318 : (MACRO)                 Ccall _divI2
(1)  102/    331B : 8C                      glo regArg1
(1)  103/    331C : AF                      plo retVal
(1)  104/    331D : 9C                      ghi regArg1
(1)  105/    331E : BF                      phi retVal
(1)  106/    331F : (MACRO)                 Cretn
(1)  107/    3320 : [89]                 ENDIF
(1)  108/    3320 :                     _out4:	
(1)  109/    3320 : 8C                  	glo	regArg1
(1)  110/    3321 : 22                  	dec	sp
(1)  111/    3322 : 52                  	str	sp
(1)  112/    3323 : 64                  	out	4
(1)  113/    3324 : (MACRO)             	Cretn
(1)  114/    3325 :                     
(1)  115/    3325 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)  116/    3325 : =>TRUE                if MOMCPU<>$1805		;for 1806 use SCAL
(1)  117/    3325 :                     	align 32
(1)  118/    3340 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)  119/    3340 : D3                  	sep     R3 ;go to subroutine
(1)  120/    3341 : E2                  _call:	sex	SP ;make sure X=SP
(1)  121/    3342 : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  122/    3342 :                     	phi	r15	;save D #wjr 20-05-01
(1)  123/    3342 : [121]                 ENDIF
(1)  124/    3342 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)  125/    3343 : 73                  	stxd
(1)  126/    3344 : 96                  	ghi	retAddr
(1)  127/    3345 : 73                  	stxd	
(1)  128/    3346 : 83                  	glo	RPC ;copy old PC to retAddr
(1)  129/    3347 : A6                  	plo	retAddr
(1)  130/    3348 : 93                  	ghi	RPC
(1)  131/    3349 : B6                  	phi	retAddr
(1)  132/    334A : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)  133/    334B : B3                  	phi	RPC
(1)  134/    334C : 46                  	lda	retAddr
(1)  135/    334D : A3                  	plo	RPC
(1)  136/    334E : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  137/    334E :                     	ghi	r15	;save D #wjr 20-05-01
(1)  138/    334E : [136]                 ENDIF
(1)  139/    334E : 30 40               	br	_call-1
(1)  140/    3350 :                     
(1)  141/    3350 :                     ;Standard subroutine return 
(1)  142/    3350 : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  143/    3350 :                     	align 16
(1)  144/    3350 : [142]                 ENDIF
(1)  145/    3350 : D3                  	sep	RPC	;return to the original program
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(lcc1802epiloCX.inc) - Page 60 - 10/29/2020 11:28:14


(1)  146/    3351 :                     _return: 
(1)  147/    3351 : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  148/    3351 :                     	phi	r15	;save D #wjr 20-05-01
(1)  149/    3351 :                             sex r2		;fix x register per marcel
(1)  150/    3351 : [147]                 ENDIF
(1)  151/    3351 : 86                  	glo	retAddr	;transfer the current return address to RPC
(1)  152/    3352 : A3                  	plo	RPC
(1)  153/    3353 : 96                  	ghi	retAddr
(1)  154/    3354 : B3                  	phi	RPC
(1)  155/    3355 : 12                  	inc 	SP
(1)  156/    3356 : 42                  	lda	SP	;pick up old return address
(1)  157/    3357 : B6                  	phi	retAddr
(1)  158/    3358 : 02                  	ldn	SP
(1)  159/    3359 : A6                  	plo	retAddr
(1)  160/    335A : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  161/    335A :                     	ghi	r15	;save D #wjr 20-05-01
(1)  162/    335A : [160]                 ENDIF
(1)  163/    335A : 30 50               	br	_return-1
(1)  164/    335C : [116]                ENDIF
(1)  165/    335C :                     	align 8
(1)  166/    3360 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  167/    3360 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  168/    3360 :                     ;each loop is 2 instruction times
(1)  169/    3360 :                     ;so the number of loops needed is 
(1)  170/    3360 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  171/    3360 : =>UNDEFINED         	IFNDEF	CPUSPEED
(1)  172/    3360 : =186A00H            CPUSPEED EQU 1600000	;1.6MHZ default
(1)  173/    3360 : [171]               	ENDIF
(1)  174/    3360 : =>FALSE              if MOMCPU=$1805		;for 1806 SCAL
(1)  175/    3360 :                     SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  176/    3360 : =>TRUE               else
(1)  177/    3360 : =1BH                SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  178/    3360 : [174]                endif 
(1)  179/    3360 : =>TRUE                    IF (CPUSPEED/16000)>=(SUBOVHD+4);fast enough to need more than subroutine overhead
(1)  180/    3360 : F8 12               	ldi	(CPUSPEED/1000/16-SUBOVHD)/4
(1)  181/    3362 : FF 01               $$mslf:	smi	1
(1)  182/    3364 : E2                  	sex	2
(1)  183/    3365 : E2                  	sex	2
(1)  184/    3366 : 3A 62               	bnz	$$mslf
(1)  185/    3368 : [179]                 ENDIF
(1)  186/    3368 : (MACRO)             	Cretn
(1)  187/    3369 :                     
(1)  188/    3369 :                     
(1)  189/    3369 : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  190/    3369 :                     	align 256
(1)  191/    3400 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  192/    3400 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  193/    3400 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  194/    3400 : (MACRO)             	ld2z retval
(1)  195/    3404 :                     $$mulrlp:
(1)  196/    3404 : (MACRO)             	shru2 regarg2
(1)  197/    340A : 3B 16               	bnf $$mulrnoadd
(1)  198/    340C :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  199/    340C : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  200/    3416 :                     $$mulrnoadd:
(1)  201/    3416 : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  202/    3417 : 3A 1C               	bnz $$mulrshft	;nope, continue
(1)  203/    3419 : 8D                  	glo regarg2	;check bottom byte
(1)  204/    341A : 32 24               	bz $$mulrdone
(1)  205/    341C :                     $$mulrshft:
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(lcc1802epiloCX.inc) - Page 61 - 10/29/2020 11:28:14


(1)  206/    341C : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  207/    3422 : 30 04               	br $$mulrlp
(1)  208/    3424 :                     $$mulrdone:		;here the product is in retval
(1)  209/    3424 : (MACRO)             	cretn
(1)  210/    3425 :                     
(1)  211/    3425 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  212/    3425 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  213/    3425 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  214/    3425 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  215/    3425 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  216/    3425 :                     	;regarg1 to hold develop remainder, 
(1)  217/    3425 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  218/    3425 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  219/    3425 :                     				;result in D, rwork.hi, DF
(1)  220/    3425 :                     	glo reg2
(1)  221/    3425 :                     	str sp
(1)  222/    3425 :                     	glo reg1
(1)  223/    3425 :                     	sm
(1)  224/    3425 :                     	plo R11
(1)  225/    3425 :                     	ghi reg2
(1)  226/    3425 :                     	str sp
(1)  227/    3425 :                     	ghi reg1
(1)  228/    3425 :                     	smb
(1)  229/    3425 :                     	endm
(1)  230/    3425 :                     	
(1)  231/    3425 :                     ;	pushf R10	;save R10 & leave stack down 1
(1)  232/    3425 : (MACRO)             	pushr R10	;default push leaves stack clean
(1)  233/    3429 : 8B                  	glo R11		;and bottom
(1)  234/    342A : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  235/    342B : (MACRO)             	cpy2 R10,regarg1
(1)  236/    342F : (MACRO)             	ld2z retval	;quotient
(1)  237/    3433 : (MACRO)             	cpy2 rwork,regarg2
(1)  238/    3437 :                     	
(1)  239/    3437 : (MACRO)             	testsub R10,regarg2
(1)  240/    3440 : 3B 5B               	bnf $$computequot	;DF=0 means it didn't fit
(1)  241/    3442 : BA                  	phi R10	;R10=R10-regarg2
(1)  242/    3443 : 8B                  	glo R11
(1)  243/    3444 : AA                  	plo R10
(1)  244/    3445 :                     	
(1)  245/    3445 :                     $$again:	;this is the divisor doubling phase
(1)  246/    3445 : (MACRO)              	testsub R10,regarg2
(1)  247/    344E : 3B 5B                	bnf $$computequot	;df=0 means it didn't fit
(1)  248/    3450 : BA                  	phi R10	;R10=R10-regarg2
(1)  249/    3451 : 8B                  	glo R11
(1)  250/    3452 : AA                  	plo R10 	
(1)  251/    3453 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  252/    3459 : 30 45                	br $$again
(1)  253/    345B :                      	
(1)  254/    345B :                      $$computequot:	;here we're computing the quotient
(1)  255/    345B : (MACRO)              	testsub regarg1,regarg2
(1)  256/    3464 : 3B 6A                	bnf $$testexit
(1)  257/    3466 : BC                   	phi regarg1		;complete the subtraction
(1)  258/    3467 : 8B                   	glo R11
(1)  259/    3468 : AC                   	plo regarg1
(1)  260/    3469 : 1F                   	inc retval
(1)  261/    346A :                      $$testexit:
(1)  262/    346A : 9E                   	ghi rwork
(1)  263/    346B : F7                   	sm	;top of regarg2 is still on stack
(1)  264/    346C : 3A 74                	bnz $$ney0y
(1)  265/    346E : 8D                   	glo regarg2
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(lcc1802epiloCX.inc) - Page 62 - 10/29/2020 11:28:14


(1)  266/    346F : 52                   	str sp
(1)  267/    3470 : 8E                   	glo rwork
(1)  268/    3471 : F7                   	sm	;test low order bytes
(1)  269/    3472 : 32 82                	bz	$$out	;if = we're done
(1)  270/    3474 :                      $$ney0y:
(1)  271/    3474 : (MACRO)              	shl2 retval	;double quotient
(1)  272/    347A : (MACRO)              	shrU2 regarg2	;halve divisor
(1)  273/    3480 : 30 5B                	br $$computequot	;continue
(1)  274/    3482 :                      $$out:
(1)  275/    3482 :                      ;here the quotient is in retval, remainder in regarg1
(1)  276/    3482 : 12                    	inc sp	;release work area
(1)  277/    3483 : 02                  	ldn sp	;recover
(1)  278/    3484 : AB                  	plo R11	;bottom byte of R11
(1)  279/    3485 : (MACRO)             	popr R10 ;and all of R10
(1)  280/    348A : (MACRO)             	cretn	;and we're done
(1)  281/    348B :                     
(1)  282/    348B :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  283/    348B :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  284/    348B :                     _divI2:
(1)  285/    348B : 22                      dec	sp	;leave a work area available
(1)  286/    348C : 9C                      ghi regArg1
(1)  287/    348D : 52                      str sp	;save the sign of the 1st arg
(1)  288/    348E : FE                      shl
(1)  289/    348F : 3B 9A                   bnf $$pos1	;if the 1st arg is -v
(1)  290/    3491 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  291/    349A :                     $$pos1: ;1st is now +v, check 2nd
(1)  292/    349A : 9D                      ghi regArg2
(1)  293/    349B : F3                      xor	
(1)  294/    349C : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  295/    349D : 9D                      ghi regArg2
(1)  296/    349E : FE                      shl
(1)  297/    349F : 3B AA                   bnf $$pos2	;if the 2nd arg is -v
(1)  298/    34A1 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  299/    34AA :                     $$pos2: ; both args now +v
(1)  300/    34AA : 22                      dec sp	;protect workarea on the 1802
(1)  301/    34AB : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  302/    34AE : 12                      inc sp	;recover work area
(1)  303/    34AF :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  304/    34AF : 42                      lda	sp ;get back the sign bits and restore SP
(1)  305/    34B0 : FE                      shl
(1)  306/    34B1 : 3B BC                   bnf $$done ;if the signs were different
(1)  307/    34B3 : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  308/    34BC :                     $$done:
(1)  309/    34BC : (MACRO)                 Cretn ;and we're done - I hope!
(1)  310/    34BD : [189]                ENDIF
(1)  311/    34BD : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  312/    34BD :                     	align 256    ;32 bit operations follow
(1)  313/    3500 :                     _divu4:
(1)  314/    3500 :                     ;This is an unsigned 32 bit restoring division
(1)  315/    3500 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  316/    3500 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  317/    3500 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  318/    3500 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  319/    3500 :                     
(1)  320/    3500 : F8 20               	ldi 32		;set loop count
(1)  321/    3502 : AE                  	plo memaddr	;in temp register
(1)  322/    3503 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  323/    350F :                     $$loop:
(1)  324/    350F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  325/    351B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(lcc1802epiloCX.inc) - Page 63 - 10/29/2020 11:28:14


(1)  326/    3527 :                     
(1)  327/    3527 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  328/    353D :                     
(1)  329/    353D : FA 80               	ani 0x80	;check the top bit
(1)  330/    353F : 32 5D               	bz $$norestore	;if it's 0
(1)  331/    3541 : 89                  		glo RL8
(1)  332/    3542 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  333/    3544 : A9                  		plo RL8
(1)  334/    3545 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  335/    355B : 30 61               	br $$endlp 	;else
(1)  336/    355D :                     $$norestore:
(1)  337/    355D : 89                  		glo RL8
(1)  338/    355E : F9 01               		ori 1	;turn on the bottom bit
(1)  339/    3560 : A9                  		plo RL8
(1)  340/    3561 :                     	;end if
(1)  341/    3561 :                     $$endlp:
(1)  342/    3561 : 2E                  	dec memaddr	;check the cycle count
(1)  343/    3562 : 8E                  	glo memaddr
(1)  344/    3563 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  345/    3565 :                     	
(1)  346/    3565 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  347/    3566 :                     		
(1)  348/    3566 :                     
(1)  349/    3566 :                     _mulu4:
(1)  350/    3566 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  351/    3566 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  352/    3566 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  353/    3566 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  354/    3566 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  355/    3566 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  356/    3566 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  357/    3566 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  358/    3566 :                     	;for 10 we subtract and shift
(1)  359/    3566 :                     	;for 00 and 11 we just shift
(1)  360/    3566 :                     
(1)  361/    3566 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  362/    3572 : F8 20                   ldi 32
(1)  363/    3574 : AE                      plo memaddr		;cycle count
(1)  364/    3575 : FC 00                   adi 0		;clear df
(1)  365/    3577 :                     $$mloop:
(1)  366/    3577 : 89                      glo RL8
(1)  367/    3578 : FA 01                   ani 1		;isolate bottom bit of result
(1)  368/    357A : 3B 96                   bnf	$$check_sub	;
(1)  369/    357C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  370/    357E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  371/    357E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  372/    3594 : 30 AE                   br $$shift
(1)  373/    3596 :                     $$check_sub:
(1)  374/    3596 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  375/    3598 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  376/    3598 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  377/    35AE :                     $$shift:
(1)  378/    35AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  379/    35BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  380/    35C8 :                     
(1)  381/    35C8 : 2E                      dec memaddr		;cycle count
(1)  382/    35C9 : 8E                      glo memaddr
(1)  383/    35CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  384/    35CC :                         
(1)  385/    35CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(lcc1802epiloCX.inc) - Page 64 - 10/29/2020 11:28:14


(1)  386/    35CD :                     
(1)  387/    35CD :                     	align 256
(1)  388/    3600 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  389/    3600 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  390/    3600 :                     _divI4:
(1)  391/    3600 : 22                      dec	sp	;leave a work area available
(1)  392/    3601 : 98                      ghi RL8-1	;get the top of the dividend
(1)  393/    3602 : 52                      str sp	;save the sign of the 1st arg
(1)  394/    3603 : FE                      shl
(1)  395/    3604 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  396/    3606 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  397/    3626 :                     $$pos1: ;1st is now +v, check 2nd
(1)  398/    3626 : 9A                      ghi RL10-1
(1)  399/    3627 : F3                      xor	
(1)  400/    3628 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  401/    3629 : 9A                      ghi RL10-1
(1)  402/    362A : FE                      shl
(1)  403/    362B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  404/    362D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  405/    364D :                     $$pos2: ; both args now +v
(1)  406/    364D : 22                      dec sp	;protect workarea on the 1802
(1)  407/    364E : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  408/    3651 : 12                      inc sp	;recover work area
(1)  409/    3652 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  410/    3652 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  411/    3653 : FE                      shl
(1)  412/    3654 : 3B 76                   bnf $$done ;if the signs were different
(1)  413/    3656 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  414/    3676 :                     $$done:
(1)  415/    3676 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  416/    3677 : [311]                ENDIF
(1)  417/    3677 : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  418/    3677 :                     _modU4:	;32 bit unsigned remainder
(1)  419/    3677 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  420/    3677 : (MACRO)                 Ccall _divU4
(1)  421/    367A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  422/    3682 : (MACRO)                 Cretn
(1)  423/    3683 :                         
(1)  424/    3683 :                     _modI4:	;32 bit signed remainder
(1)  425/    3683 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  426/    3683 : (MACRO)                 Ccall _divI4
(1)  427/    3686 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  428/    368E : (MACRO)                 Cretn
(1)  429/    368F : [417]                ENDIF	
(1)  430/    368F :                     ;;function_end lcc1802init.inc
(1)  431/    368F :                     
    3239/    368F :                     	include IO1802.inc
(1)    1/    368F :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    368F :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    368F :                     ;18-02-23 changed label + to $$no0 in _inp: to eliminate this style of temporary
(1)    4/    368F :                     	align 64
(1)    5/    36C0 :                     ;;function_start IO1802.inc void function(void)
(1)    6/    36C0 :                     _putc:
(1)    7/    36C0 :                     _out5:	
(1)    8/    36C0 : 8C                  	glo	regArg1
(1)    9/    36C1 : 22                  	dec	sp
(1)   10/    36C2 : 52                  	str	sp
(1)   11/    36C3 : 65                  	out	5
(1)   12/    36C4 : (MACRO)             	Cretn
(1)   13/    36C5 :                     _inp:		;raw port input
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm(IO1802.inc) - Page 65 - 10/29/2020 11:28:14


(1)   14/    36C5 :                     		;stores a small tailored program on the stack and executes it
(1)   15/    36C5 : 22                  	dec	sp	;work backwards
(1)   16/    36C6 : F8 D3               	ldi	0xD3	;return instruction
(1)   17/    36C8 : 73                  	stxd		
(1)   18/    36C9 : 8C                  	glo	regarg1	;get the port number
(1)   19/    36CA : FA 07               	ani	0x07	;clean it
(1)   20/    36CC : 32 DC               	bz	$$no0	; inp(0) isn't valid
(1)   21/    36CE : F9 68               	ori	0x68	;make it an input instruction
(1)   22/    36D0 : 73                  	stxd		;store it for execution
(1)   23/    36D1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   24/    36D5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   25/    36D6 : D8                  	sep	rt1	;execute it
(1)   26/    36D7 :                     ;we will come back to here with the input byte in D
(1)   27/    36D7 : 12                  	inc	sp	;step over the work area
(1)   28/    36D8 : AF                  	plo	retVal	;save it to return
(1)   29/    36D9 : F8 00               	ldi	0
(1)   30/    36DB : BF                  	phi	retval	;clear top byte
(1)   31/    36DC : 12                  $$no0	inc	sp	;need to get rid of the 6x instruction
(1)   32/    36DD : 12                  	inc	sp	;and the D3
(1)   33/    36DE : (MACRO)             	Cretn		;and we're done
(1)   34/    36DF :                     	
(1)   35/    36DF :                     _out:		;raw port output
(1)   36/    36DF :                     		;stores a small tailored program on the stack and executes it
(1)   37/    36DF :                     		;this could be bolder:
(1)   38/    36DF :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   39/    36DF :                     		;then SEP sp
(1)   40/    36DF :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   41/    36DF :                     		;saves 6 instructions but it's a bit tricky.
(1)   42/    36DF : 22                  	dec	sp	;work backwards
(1)   43/    36E0 : F8 D3               	ldi	0xD3	;return instruction
(1)   44/    36E2 : 73                  	stxd		
(1)   45/    36E3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   46/    36E7 : 8C                  	glo	regarg1	;get the port number
(1)   47/    36E8 : FA 07               	ani	0x07	;clean it
(1)   48/    36EA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   49/    36EC : 73                  	stxd		;store it for execution
(1)   50/    36ED : 8D                  	glo	regarg2	;get the byte to be written
(1)   51/    36EE : 52                  	str	sp	;store it where sp points
(1)   52/    36EF : D8                  	sep	rt1	;execute it
(1)   53/    36F0 :                     ;we will come back to here with sp stepped up by one
(1)   54/    36F0 : 12                  	inc	sp	;need to get rid of the 6x instruction
(1)   55/    36F1 : 12                  	inc	sp	;and the D3
(1)   56/    36F2 : (MACRO)             	Cretn		;and we're done
(1)   57/    36F3 :                     ;;function_end IO1802.inc
(1)   58/    36F3 :                     
(1)   59/    36F3 :                     	
(1)   60/    36F3 :                     	
(1)   61/    36F3 :                     
    3240/    36F3 :                     	include LCC1802finale.inc
(1)    1/    36F3 :                     ;LCC1802finale.inc is the last code processed by the assembler
(1)    2/    36F3 :                     ;20-05-23 finale used to include comx/comx_final.inc with  comx load feature
(1)    3/    36F3 :                     ;20-06-11 renamed to basic_final to reflect this is a final addition to add BASIC routine
(1)    4/    36F3 :                     
(1)    5/    36F3 : =>UNDEFINED           IFDEF LCCCX
(1)    6/    36F3 :                         include devkit/system/basic_final.inc
(1)    7/    36F3 : [5]                   ENDIF
    3241/    36F3 :                     
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 66 - 10/29/2020 11:28:14


  Symbol Table (* = unused):
  --------------------------

 AGAIN277 :                    3445 C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
*BIGENDIAN :                      0 - |  BITLOOP206 :                  1943 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECK_SUB280 :                3596 C |  CKNEXT206 :                   1992 C |
 CKTOP206 :                    192E C |  CLRLP206 :                    191F C |
 CODELOC :                        0 - |  COMPUTEQUOT277 :              345B C |
*CONSTPI :        3.141592653589793 - |  CPUSPEED :                  186A00 - |
*CSEG :                           1 - | *DATE :                "10/29/2020" - |
 DCKLP206 :                    1946 C |  DNOADD206 :                   194E C |
 DONE206 :                     199C C |  DONE278 :                     34BC C |
 DONE281 :                     3676 C |  DSHLP206 :                    1962 C |
 ENDLP279 :                    3561 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          0 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 L10 :                          180 C |  L100 :                        2F38 C |
 L101 :                        2F27 C |  L102 :                        2EE7 C |
 L103 :                        2ECE C |  L104 :                        2EB5 C |
 L105 :                        2E9C C |  L106 :                        2E83 C |
 L107 :                        2E6A C |  L108 :                        2E35 C |
 L109 :                        2E1C C |  L11 :                          180 C |
 L110 :                        2DE7 C |  L111 :                        2DE1 C |
*L112 :                        0E60 C |  L113 :                        0E42 C |
 L114 :                        0E5C C | *L115 :                        0EBF C |
 L116 :                        0E86 C | *L117 :                        0EB3 C |
 L119 :                        0EB3 C | *L121 :                        0F42 C |
 L122 :                        0F0C C | *L124 :                        0FAF C |
 L126 :                        0F66 C |  L127 :                        0F6A C |
*L128 :                        0FD1 C |  L129 :                        104D C |
 L13 :                          0F5 C |  L130 :                        0FE9 C |
*L131 :                        103E C |  L133 :                        1041 C |
 L134 :                        1033 C |  L137 :                        1026 C |
 L138 :                        102C C |  L139 :                        103E C |
 L14 :                          10C C | *L141 :                        106D C |
 L142 :                        1063 C |  L143 :                        1065 C |
*L145 :                        1099 C |  L146 :                        1082 C |
 L147 :                        1095 C |  L15 :                          13E C |
*L150 :                        120A C |  L151 :                        114C C |
 L152 :                        115C C |  L153 :                        1165 C |
 L154 :                        11E7 C |  L156 :                        116C C |
*L157 :                        116C C |  L159 :                        1177 C |
 L160 :                        11D6 C |  L163 :                        11A0 C |
*L164 :                        12DF C |  L165 :                        129D C |
*L167 :                        1330 C | *L168 :                        1386 C |
*L169 :                        13F4 C |  L17 :                          155 C |
 L170 :                        13CE C |  L171 :                        13F4 C |
*L172 :                        1459 C | *L173 :                        1727 C |
 L174 :                        14A8 C |  L175 :                        1723 C |
 L177 :                        14C2 C |  L178 :                        1723 C |
 L180 :                        1706 C |  L181 :                        1723 C |
 L183 :                        15AF C |  L184 :                        15C1 C |
 L185 :                        15D9 C |  L186 :                        1602 C |
 L187 :                        161C C |  L188 :                        1620 C |
 L189 :                        1653 C |  L19 :                          16C C |
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 67 - 10/29/2020 11:28:14


 L190 :                        1706 C |  L192 :                        1679 C |
 L194 :                        16A3 C |  L195 :                        1701 C |
*L196 :                        1509 C |  L197 :                        1562 C |
*L198 :                        153B C | *L199 :                        1594 C |
 L20 :                          0EB C | *L200 :                        176D C |
 L201 :                        2DD8 C |  L202 :                        176A C |
*L203 :                        176A C | *L205 :                        17D8 C |
 L206 :                        179D C |  L207 :                        17BB C |
 L209 :                        17D4 C | *L21 :                          1CF C |
*L210 :                        1831 C |  L211 :                        1810 C |
 L212 :                        181C C | *L214 :                        186C C |
 L215 :                        185C C |  L216 :                        1860 C |
*L218 :                        19E1 C | *L22 :                          3F2 C |
 L23 :                          270 C | *L24 :                          2DA C |
 L26 :                          2DB C |  L27 :                          466 C |
 L28 :                          450 C |  L30 :                          54C C |
 L31 :                          48E C |  L32 :                          4C3 C |
 L34 :                          4C3 C |  L36 :                          501 C |
 L38 :                          510 C |  L40 :                          548 C |
 L42 :                          599 C |  L43 :                          595 C |
*L45 :                         0D3B C |  L46 :                         32CC C |
 L47 :                         32AD C |  L50 :                         3295 C |
 L53 :                         3293 C |  L54 :                         3263 C |
 L55 :                          6EC C |  L56 :                          6FE C |
 L57 :                         3237 C |  L58 :                         3208 C |
 L59 :                         31D1 C | *L6 :                            44 C |
 L60 :                         31A0 C |  L61 :                          741 C |
*L62 :                          9BB C |  L64 :                          9BC C |
 L65 :                         3181 C |  L67 :                          7AD C |
 L68 :                          7BC C |  L69 :                          7D2 C |
*L7 :                           184 C |  L70 :                          851 C |
 L72 :                          8BE C | *L73 :                          919 C |
 L75 :                          91A C |  L76 :                          919 C |
 L78 :                         3162 C |  L79 :                         314F C |
 L8 :                           0AA C |  L80 :                         3119 C |
 L81 :                         3100 C |  L82 :                         30E7 C |
 L83 :                         30CE C |  L84 :                         30B5 C |
 L85 :                         309C C |  L86 :                         3083 C |
 L87 :                         306A C |  L89 :                         3051 C |
 L92 :                         3027 C |  L93 :                         301B C |
 L94 :                         3002 C |  L95 :                         2FD1 C |
 L96 :                         2FB8 C |  L97 :                         2F9F C |
 L98 :                         2F86 C |  L99 :                         2F6D C |
 LCC1802INIT :                 32EB C | *LISTON :                         1 - |
 LOOP279 :                     350F C | *MACEXP :                         7 - |
 MEMADDR :                       0E - |  MLOOP280 :                    3577 C |
 MOMCPU :                      1802 - | *MOMCPUNAME :                "1802" - |
 MSLF275 :                     3362 C |  MULRDONE276 :                 3424 C |
 MULRLP276 :                   3404 C |  MULRNOADD276 :                3416 C |
 MULRSHFT276 :                 341C C | *NESTMAX :                      100 - |
 NEY0Y277 :                    3474 C |  NO0286 :                      36DC C |
 NORESTORE279 :                355D C |  OUT277 :                      3482 C |
*PACKING :                        0 - | *PADDING :                        1 - |
 POS1278 :                     349A C |  POS1281 :                     3626 C |
 POS2278 :                     34AA C |  POS2281 :                     364D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                           0A - |  R11 :                           0B - |
 R12 :                           0C - |  R13 :                           0D - |
*R14 :                           0E - |  R15 :                           0F - |
*R2 :                             2 - |  R3 :                             3 - |
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 68 - 10/29/2020 11:28:14


*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                       0C - |
 REGARG2 :                       0D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                        0F - |
*RL0 :                            1 - |  RL10 :                          0B - |
 RL12 :                          0D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                         0D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                         0E - |  SHIFT280 :                    35AE C |
 SP :                             2 - |  SUBOVHD :                       1B - |
 TESTEXIT277 :                 346A C | *TIME :                  "11:28:13" - |
*TRUE :                           1 - |  UPNXT206 :                    197B C |
 VERSION :                     142F - | *Z80SYNTAX :                      0 - |
 _00000265 :                   3305 C |  _ARR_1_GLOB :                 2D6A C |
 _ARR_2_GLOB :                 19E2 C |  _BOOL_GLOB :                  2DD0 C |
 _CALL :                       3341 C |  _CH_1_GLOB :                  2DCF C |
 _CH_2_GLOB :                  2DCE C |  _DIE265 :                     3308 C |
 _DIVI2 :                      348B C |  _DIVI4 :                      3600 C |
 _DIVU2 :                      3425 C |  _DIVU4 :                      3500 C |
 _DUBDABX :                    1900 C | *_EXIT :                       1744 C |
 _FUNC_1 :                      40B C |  _FUNC_2 :                      469 C |
 _FUNC_3 :                      565 C | *_INP :                        36C5 C |
 _INT_GLOB :                   2DD2 C |  _ITOA :                       10A3 C |
 _LTOA :                       1225 C |  _MAIN :                        59C C |
 _MALLOC :                        5 C |  _MALLOC_PTR :                    3 C |
*_MEMCMP :                     1772 C | *_MEMCPY :                     17ED C |
*_MEMSET :                     1841 C | *_MODI2 :                      3318 C |
*_MODI4 :                      3683 C | *_MODU2 :                      3310 C |
*_MODU4 :                      3677 C |  _MULU2 :                      3400 C |
*_MULU4 :                      3566 C |  _NEXT_PTR_GLOB :              2DD4 C |
*_NSTDLIBINCLUDER :            1877 C | *_ONEMS :                      3360 C |
 _OUT :                        36DF C | *_OUT4 :                       3320 C |
*_OUT5 :                       36C0 C |  _PRINTF :                     145E C |
 _PRINTINT :                   12F7 C |  _PRINTLINT :                  1339 C |
 _PRINTSTR :                   1073 C |  _PROC_1 :                     0D60 C |
 _PROC_2 :                     0E71 C |  _PROC_3 :                     0ECA C |
 _PROC_4 :                     0F49 C |  _PROC_5 :                     0FB7 C |
 _PROC_6 :                       49 C |  _PROC_7 :                      193 C |
 _PROC_8 :                      1D2 C |  _PTR_GLOB :                   2DD6 C |
*_PUTC :                       36C0 C |  _PUTX :                       13F9 C |
 _PUTXN :                      138F C |  _REG :                          47 C |
 _RETURN :                     3351 C | *_SETQOFF :                    330E C |
*_SETQON :                     330C C |  _STRCMP :                     19CA C |
 _STRCPY :                     19C0 C | *_STRLEN :                     1058 C |
*_STRNCMP :                    0FD2 C |  __STRCMPGT :                  19DF C |
 __STRCMPLP :                  19CF C |  __STRCMPNE :                  19DA C |
 __STRCPY :                    19C4 C |

    331 symbols
     87 unused symbols

 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 69 - 10/29/2020 11:28:14


  Defined Macros:
  ---------------

ALU1                                  | ALU2                                 
ALU2I                                 | ALU2RRS                              
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CCALLD                                | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | GLOBSS                               
INC4                                  | INCM                                 
JCF4                                  | JCI1I                                
JCI2                                  | JCI2I                                
JCI4                                  | JCU1                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI1                                
JEQI2                                 | JEQI4                                
JEQU1I                                | JEQU2I                               
JNEU1                                 | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | ORGC                                 
ORGD                                  | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
TESTSUB                               | ZEXT                                 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 70 - 10/29/2020 11:28:14


ZEXT4                                 |

    115 macros

 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.olasm - Page 71 - 10/29/2020 11:28:14


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.25 seconds assembly time

   5057 lines source file
  16696 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
