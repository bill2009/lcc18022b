; generated by lcc-xr18CX $Version: 5.2 - XR18CX $ on Thu Oct 29 11:28:12 2020

SP:	equ	2 
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802proloCX.inc
	listing on
	orgd
_malloc_ptr:
	dw 24576
	orgc
;;function_start _malloc pointer to void function(int)
_malloc:		
	reserve 2
;{
;  ret = (void*)malloc_ptr;
	ld2 R11,'D',(_malloc_ptr),0 
	st2 R11,'O',sp,(0+1)
;D*E*A*D  R11
;  malloc_ptr += size;
	alu2RRS R11,R12,'D',(_malloc_ptr),0,add,adc
	st2 R11,'D',(_malloc_ptr),0
;D*E*A*D  R11
;  return ret;
	ld2 R15,'O',sp,(0+1) 
L6:
	release 2
	Cretn

;;function_end$$ _malloc
	orgd
_Reg:
	dw 0
	orgc
;;function_start _Proc_6 int function(int,pointer to Enumeration)
_Proc_6:		
	pushr R6
	pushr R7
	reserve 4
	st2 R12,'O',sp,(10+1)
	inc memaddr				
	str2 R13,memaddr
	ld2 R7,'O',sp,(10+1) 
;{
;  *Enum_Ref_Par = Enum_Val_Par;
	ld2 R11,'O',sp,(12+1) 
	str2 R7,R11	
;D*E*A*D  R11
;  if (! Func_3 (Enum_Val_Par))
	cpy2 R12,R7 
	Ccall _Func_3
	jnzU2 R15,L8
;    *Enum_Ref_Par = Ident_4;
	ld2 R11,'O',sp,(12+1) 
	str2I 3,R11	
;D*E*A*D  R11
L8:
;  switch (Enum_Val_Par)
	cpy2 R6,R7 
;D*E*A*D  R7
	jcI2I R6,0,lbnf,L10  
	jnI2I R6,4,lbnf,L10
	shlR2R	R11,R6	
;D*E*A*D  R6
	ld2 R11,'O',R11,(L20) 
;D*E*A*D  R11
	jumpv R11
	orgc
L20:
	dw L13
	dw L14
	dw L17
	dw L11
	dw L19
	orgc
;  {
L13:
;      *Enum_Ref_Par = Ident_1;
	ld2 R11,'O',sp,(12+1) 
	str2I 0,R11	
;D*E*A*D  R11
;      break;
	lbr L11
L14:
;      if (Int_Glob > 100)
	ld2 R11,'D',(_Int_Glob),0 
	jnI2I R11,100,lbdf,L15 
;D*E*A*D  R11
;      *Enum_Ref_Par = Ident_1;
	ld2 R11,'O',sp,(12+1) 
	str2I 0,R11	
;D*E*A*D  R11
	lbr L11
L15:
;      else *Enum_Ref_Par = Ident_4;
	ld2 R11,'O',sp,(12+1) 
	str2I 3,R11	
;D*E*A*D  R11
;      break;
	lbr L11
L17:
;      *Enum_Ref_Par = Ident_2;
	ld2 R11,'O',sp,(12+1) 
	str2I 1,R11	
;D*E*A*D  R11
;      break;
	lbr L11
;    case Ident_4: break;
L19:
;      *Enum_Ref_Par = Ident_3;
	ld2 R11,'O',sp,(12+1) 
	str2I 2,R11	
;D*E*A*D  R11
;      break;
L10:
L11:
	ld2z R15
;} /* Proc_6 */
L7:
	release 4
	popr R7
	popr R6
	Cretn

;;function_end$$ _Proc_6
;;function_start _Proc_7 int function(int,int,pointer to int)
_Proc_7:		
	reserve 2
;{
;  Int_Loc = Int_1_Par_Val + 2;
	cpy2 R11,R12 
	incm R11,2
	st2 R11,'O',sp,(0+1)
;D*E*A*D  R11
;  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
	ld2 R11,'O',sp,(8+1) 
	alu2RRS R10,R13,'O',sp,(0+1),add,adc
	str2 R10,R11	
;D*E*A*D  R10
;D*E*A*D  R11
	ld2z R15
;} /* Proc_7 */
L21:
	release 2
	Cretn

;;function_end$$ _Proc_7
;;function_start _Proc_8 int function(pointer to int,pointer to array 50 of int,int,int)
_Proc_8:		
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 4
	cpy2 R7,R12
	cpy2 R6,R13
;{
;  Int_Loc = Int_1_Par_Val + 5;
	ld2 R11,'O',sp,(18+1) 
	ldA2 R1,'O',R11,(5)
;D*E*A*D  R11
;  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
	shlR2R	R11,R1	
	alu2 R11,R11,R7,add,adc	
	ld2 R10,'O',sp,(20+1) 
	str2 R10,R11	
;D*E*A*D  R10
;D*E*A*D  R11
;  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
	shlR2R	R11,R1	
	cpy2 R10,R11 
	incm R10,2
	alu2 R10,R10,R7,add,adc	
	alu2 R11,R11,R7,add,adc	
	mvcn2 R10,R11	
;D*E*A*D  R10
;D*E*A*D  R11
;  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
	shlR2R	R11,R1	
	ldA2 R11,'O',R11,(60)
	alu2 R11,R11,R7,add,adc	
	str2 R1,R11	
;D*E*A*D  R11
;  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
	cpy2 R0,R1 
	lbr L26
L23:
;    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
	cpy2 R13,R1 
	
	ld2z R15
	shl2I	R13,1
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shl2I	R13,1
	shl2I	R13,1
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shlR2R	R10,R0	
	alu2 R11,R15,R6,add,adc	
	alu2 R11,R10,R11,add,adc	
;D*E*A*D  R10
	str2 R1,R11	
;D*E*A*D  R11
L24:
;  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
	incm R0,1
L26:
	cpy2 R11,R1 
	incm R11,1
	jcI2 R11,R0,lbdf,L23 
;D*E*A*D  R11
;  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
	cpy2 R13,R1 
	
	ld2z R15
	shl2I	R13,1
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shl2I	R13,1
	shl2I	R13,1
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shlR2R	R10,R1	
	decm R10,2	
	alu2 R11,R15,R6,add,adc	
	alu2 R11,R10,R11,add,adc	
;D*E*A*D  R10
	ldn2 R10,R11	
	incm R10,1
	str2 R10,R11	
;D*E*A*D  R10
;D*E*A*D  R11
;  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
	cpy2 R13,R1 
	
	ld2z R15
	shl2I	R13,1
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shl2I	R13,1
	shl2I	R13,1
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shlR2R	R10,R1	
;D*E*A*D  R1
	ldA2 R11,'O',R15,(2000)
	alu2 R11,R11,R6,add,adc	
;D*E*A*D  R6
	alu2 R11,R10,R11,add,adc	
	alu2 R10,R10,R7,add,adc	
;D*E*A*D  R7
	mvcn2 R11,R10	
;D*E*A*D  R11
;D*E*A*D  R10
;  Int_Glob = 5;
	st2I 5,'D',(_Int_Glob),0
	ld2z R15
;} /* Proc_8 */
L22:
	release 4
	popr R7
	popr R6
	popr R1
	popr R0
	Cretn

;;function_end$$ _Proc_8
;;function_start _Func_1 Enumeration function(int,int)
_Func_1:		
	reserve 2
;{
;  Ch_1_Loc = Ch_1_Par_Val;
	ldA2 R11,'O',sp,(1+1)
	str1 R12,R11
;D*E*A*D  R11
;  Ch_2_Loc = Ch_1_Loc;
	ldA2 R11,'O',sp,(0+1)
	ldA2 R10,'O',sp,(1+1)
	ldn R10
	str R11
;D*E*A*D  R11
;  if (Ch_2_Loc != Ch_2_Par_Val)
	ld1 R11,'O',sp,(0+1)
	zExt R11 
	cpy1 R10,R13
	zExt R10 
	jeqI2 R11,R10,L28
;D*E*A*D  R11
;D*E*A*D  R10
;    return (Ident_1);
	ld2z R15
	lbr L27
L28:
;  {
;    Ch_1_Glob = Ch_1_Loc;
	ldaD R11,_Ch_1_Glob
	ldA2 R10,'O',sp,(1+1)
	ldn R10
	str R11
;D*E*A*D  R11
;    return (Ident_2);
	ldaD R15,1
L27:
	release 2
	Cretn

;;function_end$$ _Func_1
;;function_start _Func_2 int function(pointer to char,pointer to char)
_Func_2:		
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 4
	cpy2 R7,R12
	cpy2 R6,R13
;{
;  Int_Loc = 2;
	ldaD R1,2
	lbr L32
L31:
;    if (Func_1 (Str_1_Par_Ref[Int_Loc],
	alu2 R11,R1,R7,add,adc	
	ldn1 R12,R11	
;D*E*A*D  R11
	zExt R12 
	cpy2 R11,R1 
	incm R11,1
	alu2 R11,R11,R6,add,adc	
	ldn1 R13,R11	
;D*E*A*D  R11
	zExt R13 
	Ccall _Func_1
	jnzU2 R15,L34
;    {
;      Ch_Loc = 'A';
	ldaD R0,65
;      Int_Loc += 1;
	incm R1,1
;    } /* if, while */
L34:
L32:
;  while (Int_Loc <= 2) /* loop body executed once */
	jnI2I R1,2,lbdf,L31 
;  if (Ch_Loc >= 'W' && Ch_Loc < 'Z')
	cpy1 R11,R0
	zExt R11 
	jcI2I R11,87,lbnf,L36  
	jcI2I R11,90,lbdf,L36
;D*E*A*D  R11
;    Int_Loc = 7;
	ldaD R1,7
L36:
;  if (Ch_Loc == 'R')
	jneU1I R0,82,L38	
;D*E*A*D  R0
;    return (true);
	ldaD R15,1
	lbr L30
L38:
;  {
;    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
	cpy2 R12,R7 
;D*E*A*D  R7
	cpy2 R13,R6 
;D*E*A*D  R6
	Ccall _strcmp
	jnI2I R15,0,lbdf,L40 
;    {
;      Int_Loc += 7;
	ldA2 R1,'O',R1,(7)
;      Int_Glob = Int_Loc;
	st2 R1,'D',(_Int_Glob),0
;D*E*A*D  R1
;      return (true);
	ldaD R15,1
	lbr L30
L40:
;      return (false);
	ld2z R15
L30:
	release 4
	popr R7
	popr R6
	popr R1
	popr R0
	Cretn

;;function_end$$ _Func_2
;;function_start _Func_3 int function(int)
_Func_3:		
	reserve 2
;{
;  Enum_Loc = Enum_Par_Val;
	st2 R12,'O',sp,(0+1)
;  if (Enum_Loc == Ident_3)
	ld2 R11,'O',sp,(0+1) 
	jneU2I R11,2,L43
;D*E*A*D  R11
;    return (true);
	ldaD R15,1
	lbr L42
L43:
;    return (false);
	ld2z R15
L42:
	release 2
	Cretn

;;function_end$$ _Func_3
;;function_start _main int function(void)
_main: 
	reserve 70
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 8
;{
;  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
	ldaD R12,39
	Ccall _malloc
	st2 R15,'D',(_Next_Ptr_Glob),0
;  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
	ldaD R12,39
	Ccall _malloc
	st2 R15,'D',(_Ptr_Glob),0
;  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
	ld2 R11,'D',(_Ptr_Glob),0 
	ld2 R10,'D',(_Next_Ptr_Glob),0 
	str2 R10,R11	
;D*E*A*D  R10
;D*E*A*D  R11
;  Ptr_Glob->Discr                       = Ident_1;
	ld2 R11,'D',(_Ptr_Glob),0 
	st2I 0,'O',R11,(2)
;  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
	ld2 R11,'D',(_Ptr_Glob),0 
	st2I 2,'O',R11,(4)
;  Ptr_Glob->variant.var_1.Int_Comp      = 40;
	ld2 R11,'D',(_Ptr_Glob),0 
	st2I 40,'O',R11,(6)
;  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
	ld2 R11,'D',(_Ptr_Glob),0 
	ldA2 R12,'O',R11,(8)
;D*E*A*D  R11
	ldaD R13,L46
	Ccall _strcpy
;  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
	ldA2 R12,'O',sp,(18+1)
	ldaD R13,L47
	Ccall _strcpy
;  Arr_2_Glob [8][7] = 10;
	st2I 10,'D',(_Arr_2_Glob+800+14),0
;  printf("Arr_2_Glob[8][7]:%x=%d\n",Arr_2_Glob,Arr_2_Glob[8][7]),
	ldaD R12,L50
	ldaD R13,_Arr_2_Glob
	ld2 R11,'D',(_Arr_2_Glob+800+14),0 
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _printf
	ldaD R12,L53
	Ccall _printf
;  printf ("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
	ldaD R12,L54
	Ccall _printf
;  printf ("\n");
	ldaD R12,L53
	Ccall _printf
;  if (Reg)
	ld2 R11,'D',(_Reg),0 
	jzU2 R11,L55
;D*E*A*D  R11
;  {
;    printf ("Program compiled with 'register' attribute\n");
	ldaD R12,L57
	Ccall _printf
;    printf ("\n");
	ldaD R12,L53
	Ccall _printf
;  }
	lbr L56
L55:
;  {
;    printf ("Program compiled without 'register' attribute\n");
	ldaD R12,L58
	Ccall _printf
;    printf ("\n");
	ldaD R12,L53
	Ccall _printf
;  }
L56:
;  printf ("Please give the number of runs through the benchmark: ");
	ldaD R12,L59
	Ccall _printf
;  {
;    n=1000; //scanf ("%d", &n);
	st2I 1000,'O',sp,(16+1)
;    Number_Of_Runs = n;
	ld2 R0,'O',sp,(16+1) 
;  }
;  printf ("\n");
	ldaD R12,L53
	Ccall _printf
;  printf ("Execution starts, %d runs through Dhrystone !@#\n", Number_Of_Runs);
	ldaD R12,L60
	cpy2 R13,R0 
	Ccall _printf
;  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
	ldaD R1,1
	lbr L64
L61:
;  {
;    Proc_5();
	Ccall _Proc_5
;    Proc_4();
	Ccall _Proc_4
;    Int_1_Loc = 2;
	st2I 2,'O',sp,(84+1)
;    Int_2_Loc = 3;
	ldaD R7,3
;    strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
	ldA2 R12,'O',sp,(49+1)
	ldaD R13,L65
	Ccall _strcpy
;    Enum_Loc = Ident_2;
	st2I 1,'O',sp,(80+1)
;    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
	ldA2 R12,'O',sp,(18+1)
	ldA2 R13,'O',sp,(49+1)
	Ccall _Func_2
	cpy2 R11,R15 
	jnzU2 R11,L67
	st2I 1,'O',sp,(16+1)
	lbr L68
L67:
	st2I 0,'O',sp,(16+1)
L68:
	mvc2 R11,'D',(_Bool_Glob),0,'O',sp,(16+1)	
;D*E*A*D  R11
	lbr L70
L69:
;    {	//dbgprintf("while\n");
;      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
	ld2 R13,'O',sp,(84+1) 
	
	cpy2 R15,R13
	shl2I	R13,1
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	alu2 R11,R15,R7,sm,smb
	st2 R11,'O',sp,(82+1)
;D*E*A*D  R11
;      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
	ld2 R12,'O',sp,(84+1) 
	cpy2 R13,R7 
	ldA2 R11,'O',sp,(82+1)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _Proc_7
;      Int_1_Loc += 1;
	ld2 R11,'O',sp,(84+1) 
	incm R11,1
	st2 R11,'O',sp,(84+1)
;D*E*A*D  R11
;    } /* while */
L70:
;    while (Int_1_Loc < Int_2_Loc)  /* loop body executed once */
	ld2 R11,'O',sp,(84+1) 
	jcI2 R11,R7,lbnf,L69
;    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
	ldaD R12,_Arr_1_Glob
	ldaD R13,_Arr_2_Glob
	mvc2 R11,'O',sp,(4+1),'O',sp,(84+1)	
	mvc2 R11,'O',sp,(6+1),'O',sp,(82+1)	
;D*E*A*D  R11
	Ccall _Proc_8
;    Proc_1 (Ptr_Glob);
	ld2 R12,'D',(_Ptr_Glob),0 
	Ccall _Proc_1
;    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
	ldaD R6,65
	lbr L75
L72:
;    {
;      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
	cpy1 R12,R6
	zExt R12 
	ldaD R13,67
	Ccall _Func_1
	ld2 R10,'O',sp,(80+1) 
	jneU2 R10,R15,L76
;D*E*A*D  R10
;        {
;        Proc_6 (Ident_1, &Enum_Loc);
	ld2z R12
	ldA2 R13,'O',sp,(80+1)
	Ccall _Proc_6
;        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
	ldA2 R12,'O',sp,(49+1)
	ldaD R13,L78
	Ccall _strcpy
;        Int_2_Loc = Run_Index;
	cpy2 R7,R1 
;        Int_Glob = Run_Index;
	st2 R1,'D',(_Int_Glob),0
;        }
L76:
;    }
L73:
;    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
	incm R6,1	
L75:
	ldaD R11,_Ch_2_Glob
	ldn1 R11,R11
	jcU1 R11,R6,lbdf,L72 
;D*E*A*D  R11
;    Int_2_Loc = Int_2_Loc * Int_1_Loc;
	cpy2 R12,R7 
;D*E*A*D  R7
	ld2 R13,'O',sp,(84+1) 
	Ccall _mulu2
	cpy2 R7,R15 
;    Int_1_Loc = Int_2_Loc / Int_3_Loc;
	cpy2 R12,R7 
	ld2 R13,'O',sp,(82+1) 
	Ccall _divi2
	st2 R15,'O',sp,(84+1)
;    Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;
	ld2 R11,'O',sp,(82+1) 
	alu2 R13,R7,R11,sm,smb
;D*E*A*D  R7
;D*E*A*D  R11
	
	cpy2 R15,R13
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	shl2I	R13,1
	alu2 R15,R15,R13,add,adc
	ld2 R10,'O',sp,(84+1) 
	alu2 R7,R15,R10,sm,smb
;D*E*A*D  R10
;    Proc_2 (&Int_1_Loc);
	ldA2 R12,'O',sp,(84+1)
	Ccall _Proc_2
;  } /* loop "for Run_Index" */
L62:
;  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
	incm R1,1
L64:
	jcI2 R0,R1,lbdf,L61 
;  printf ("Execution ends!@#\n");
	ldaD R12,L79
	Ccall _printf
;  printf ("\n");
	ldaD R12,L53
	Ccall _printf
;  printf ("Final values of the variables used in the benchmark:\n");
	ldaD R12,L80
	Ccall _printf
;  printf ("\n");
	ldaD R12,L53
	Ccall _printf
;  printf ("Int_Glob:            %d\n", Int_Glob);
	ldaD R12,L81
	ld2 R13,'D',(_Int_Glob),0 
	Ccall _printf
;  printf ("        should be:   %d\n", 5);
	ldaD R12,L82
	ldaD R13,5
	Ccall _printf
;  printf ("Bool_Glob:           %d\n", Bool_Glob);
	ldaD R12,L83
	ld2 R13,'D',(_Bool_Glob),0 
	Ccall _printf
;  printf ("        should be:   %d\n", 1);
	ldaD R12,L82
	ldaD R13,1
	Ccall _printf
;  printf ("Ch_1_Glob:           %c\n", Ch_1_Glob);
	ldaD R12,L84
	ld1 R13,'D',(_Ch_1_Glob),0
	zExt R13 
	Ccall _printf
;  printf ("        should be:   %c\n", 'A');
	ldaD R12,L85
	ldaD R13,65
	Ccall _printf
;  printf ("Ch_2_Glob:           %c\n", Ch_2_Glob);
	ldaD R12,L86
	ld1 R13,'D',(_Ch_2_Glob),0
	zExt R13 
	Ccall _printf
;  printf ("        should be:   %c\n", 'B');
	ldaD R12,L85
	ldaD R13,66
	Ccall _printf
;  printf ("Arr_1_Glob[8]:       %d\n", Arr_1_Glob[8]);
	ldaD R12,L87
	ld2 R13,'D',(_Arr_1_Glob+16),0 
	Ccall _printf
;  printf ("        should be:   %d\n", 7);
	ldaD R12,L82
	ldaD R13,7
	Ccall _printf
;  printf ("Arr_2_Glob[8][7]:    %d\n", Arr_2_Glob[8][7]);
	ldaD R12,L89
	ld2 R13,'D',(_Arr_2_Glob+800+14),0 
	Ccall _printf
;  printf ("        should be:   Number_Of_Runs + 10\n");
	ldaD R12,L92
	Ccall _printf
;  printf ("Ptr_Glob->\n");
	ldaD R12,L93
	Ccall _printf
;  printf ("  Ptr_Comp:          %d\n", (int) Ptr_Glob->Ptr_Comp);
	ldaD R12,L94
	ld2 R11,'D',(_Ptr_Glob),0 
	ldn2s R11,R11	
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   (implementation-dependent)\n");
	ldaD R12,L95
	Ccall _printf
;  printf ("  Discr:             %d\n", Ptr_Glob->Discr);
	ldaD R12,L96
	ld2 R11,'D',(_Ptr_Glob),0 
	ld2 R13,'O',R11,(2) 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   %d\n", 0);
	ldaD R12,L82
	ld2z R13
	Ccall _printf
;  printf ("  Enum_Comp:         %d\n", Ptr_Glob->variant.var_1.Enum_Comp);
	ldaD R12,L97
	ld2 R11,'D',(_Ptr_Glob),0 
	ld2 R13,'O',R11,(4) 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   %d\n", 2);
	ldaD R12,L82
	ldaD R13,2
	Ccall _printf
;  printf ("  Int_Comp:          %d\n", Ptr_Glob->variant.var_1.Int_Comp);
	ldaD R12,L98
	ld2 R11,'D',(_Ptr_Glob),0 
	ld2 R13,'O',R11,(6) 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   %d\n", 17);
	ldaD R12,L82
	ldaD R13,17
	Ccall _printf
;  printf ("  Str_Comp:          %s\n", Ptr_Glob->variant.var_1.Str_Comp);
	ldaD R12,L99
	ld2 R11,'D',(_Ptr_Glob),0 
	ldA2 R13,'O',R11,(8)
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
	ldaD R12,L100
	Ccall _printf
;  printf ("Next_Ptr_Glob->\n");
	ldaD R12,L101
	Ccall _printf
;  printf ("  Ptr_Comp:          %d\n", (int) Next_Ptr_Glob->Ptr_Comp);
	ldaD R12,L94
	ld2 R11,'D',(_Next_Ptr_Glob),0 
	ldn2s R11,R11	
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   (implementation-dependent), same as above\n");
	ldaD R12,L102
	Ccall _printf
;  printf ("  Discr:             %d\n", Next_Ptr_Glob->Discr);
	ldaD R12,L96
	ld2 R11,'D',(_Next_Ptr_Glob),0 
	ld2 R13,'O',R11,(2) 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   %d\n", 0);
	ldaD R12,L82
	ld2z R13
	Ccall _printf
;  printf ("  Enum_Comp:         %d\n", Next_Ptr_Glob->variant.var_1.Enum_Comp);
	ldaD R12,L97
	ld2 R11,'D',(_Next_Ptr_Glob),0 
	ld2 R13,'O',R11,(4) 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   %d\n", 1);
	ldaD R12,L82
	ldaD R13,1
	Ccall _printf
;  printf ("  Int_Comp:          %d\n", Next_Ptr_Glob->variant.var_1.Int_Comp);
	ldaD R12,L98
	ld2 R11,'D',(_Next_Ptr_Glob),0 
	ld2 R13,'O',R11,(6) 
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   %d\n", 18);
	ldaD R12,L82
	ldaD R13,18
	Ccall _printf
;  printf ("  Str_Comp:          %s\n",
	ldaD R12,L99
	ld2 R11,'D',(_Next_Ptr_Glob),0 
	ldA2 R13,'O',R11,(8)
;D*E*A*D  R11
	Ccall _printf
;  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
	ldaD R12,L100
	Ccall _printf
;  printf ("Int_1_Loc:           %d\n", Int_1_Loc);
	ldaD R12,L103
	ld2 R13,'O',sp,(84+1) 
	Ccall _printf
;  printf ("        should be:   %d\n", 5);
	ldaD R12,L82
	ldaD R13,5
	Ccall _printf
;  printf ("Int_2_Loc:           %d\n", Int_2_Loc);
	ldaD R12,L104
	cpy2 R13,R7 
;D*E*A*D  R7
	Ccall _printf
;  printf ("        should be:   %d\n", 13);
	ldaD R12,L82
	ldaD R13,13
	Ccall _printf
;  printf ("Int_3_Loc:           %d\n", Int_3_Loc);
	ldaD R12,L105
	ld2 R13,'O',sp,(82+1) 
	Ccall _printf
;  printf ("        should be:   %d\n", 7);
	ldaD R12,L82
	ldaD R13,7
	Ccall _printf
;  printf ("Enum_Loc:            %d\n", Enum_Loc);
	ldaD R12,L106
	ld2 R13,'O',sp,(80+1) 
	Ccall _printf
;  printf ("        should be:   %d\n", 1);
	ldaD R12,L82
	ldaD R13,1
	Ccall _printf
;  printf ("Str_1_Loc:           %s\n", Str_1_Loc);
	ldaD R12,L107
	ldA2 R13,'O',sp,(18+1)
	Ccall _printf
;  printf ("        should be:   DHRYSTONE PROGRAM, 1'ST STRING\n");
	ldaD R12,L108
	Ccall _printf
;  printf ("Str_2_Loc:           %s\n", Str_2_Loc);
	ldaD R12,L109
	ldA2 R13,'O',sp,(49+1)
	Ccall _printf
;  printf ("        should be:   DHRYSTONE PROGRAM, 2'ND STRING\n");
	ldaD R12,L110
	Ccall _printf
;  printf ("done\n");
	ldaD R12,L111
	Ccall _printf
	ld2z R15
;}
L45:
	release 8
	popr R7
	popr R6
	popr R1
	popr R0
	release 70
	Cretn

;;function_end$$ _main
;;function_start _Proc_1 int function(pointer to struct record)
_Proc_1:		
	pushr R6
	pushr R7
	reserve 6
	cpy2 R7,R12
;{
;  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
	ldn2 R6,R7	
;  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
	ldn2 R11,R7	
	ld2 R8,'D',(_Ptr_Glob),0 
	blkcpy R11,R8,39
;D*E*A*D  R11
;D*E*A*D  R8
;  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
	st2I 5,'O',R7,(6)
;  Next_Record->variant.var_1.Int_Comp
	ld2 R11,'O',R7,(6) 
	st2 R11,'O',R6,(6)
;D*E*A*D  R11
;  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
	mvcn2 R6,R7	
;  Proc_3 (&Next_Record->Ptr_Comp);
	cpy2 R12,R6 
	Ccall _Proc_3
;  if (Next_Record->Discr == Ident_1)
	ld2 R11,'O',R6,(2) 
	jnzU2 R11,L113
;D*E*A*D  R11
;  {
;    Next_Record->variant.var_1.Int_Comp = 6;
	st2I 6,'O',R6,(6)
;    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp,
	ld2 R12,'O',R7,(4) 
;D*E*A*D  R7
	cpy2 R13,R6
	incm R13,4
	Ccall _Proc_6
;    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
	ld2 R11,'D',(_Ptr_Glob),0 
	mvcn2 R6,R11	
;D*E*A*D  R11
;    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10,
	ldA2 R11,'O',R6,(6)
;D*E*A*D  R6
	ldn2 R12,R11	
	ldaD R13,10
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _Proc_7
;  }
	lbr L114
L113:
;    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
	ldn2 R8,R7	
	blkcpy R7,R8,39
;D*E*A*D  R7
;D*E*A*D  R8
L114:
	ld2z R15
;} /* Proc_1 */
L112:
	release 6
	popr R7
	popr R6
	Cretn

;;function_end$$ _Proc_1
;;function_start _Proc_2 int function(pointer to int)
_Proc_2:		
	pushr R6
	pushr R7
;{
;  Int_Loc = *Int_Par_Ref + 10;
	ldn2 R11,R12	
	ldA2 R6,'O',R11,(10)
;D*E*A*D  R11
L116:
;    if (Ch_1_Glob == 'A')
	ldaD R11,_Ch_1_Glob
	ldn1 R11,R11
	jneU1I R11,65,L119	
;D*E*A*D  R11
;    {
;      Int_Loc -= 1;
	decm R6,1	
;      *Int_Par_Ref = Int_Loc - Int_Glob;
	ld2 R11,'D',(_Int_Glob),0 
	alu2 R11,R6,R11,sm,smb
	str2 R11,R12	
;D*E*A*D  R11
;      Enum_Loc = Ident_1;
	ld2z R7
;    } /* if */
L119:
L117:
;  while (Enum_Loc != Ident_1); /* true */
	jnzU2 R7,L116
	ld2z R15
;} /* Proc_2 */
L115:
	popr R7
	popr R6
	Cretn

;;function_end$$ _Proc_2
;;function_start _Proc_3 int function(pointer to pointer to struct record)
_Proc_3:		
	reserve 6
	st2 R12,'O',sp,(8+1)
;{
;  if (Ptr_Glob != Null)
	ld2 R11,'D',(_Ptr_Glob),0 
	jzU2 R11,L122
;D*E*A*D  R11
;    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
	ld2 R11,'O',sp,(8+1) 
	ld2 R10,'D',(_Ptr_Glob),0 
	mvcn2 R11,R10	
;D*E*A*D  R11
;D*E*A*D  R10
L122:
;  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
	ldaD R12,10
	ld2 R13,'D',(_Int_Glob),0 
	ld2 R11,'D',(_Ptr_Glob),0 
	ldA2 R11,'O',R11,(6)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _Proc_7
	ld2z R15
;} /* Proc_3 */
L121:
	release 6
	Cretn

;;function_end$$ _Proc_3
;;function_start _Proc_4 int function(void)
_Proc_4:		
	reserve 2
	pushr R7
;{
;  Bool_Loc = Ch_1_Glob == 'A';
	ldaD R11,_Ch_1_Glob
	ldn1 R11,R11
	jneU1I R11,65,L126	
;D*E*A*D  R11
	ldaD R7,1
	lbr L127
L126:
	ld2z R7
L127:
	st2 R7,'O',sp,(2+1)
;D*E*A*D  R7
;  Bool_Glob = Bool_Loc | Bool_Glob;
	ld2 R11,'O',sp,(2+1) 
	ld2 R10,'D',(_Bool_Glob),0 
	alu2 R11,R11,R10,or,or
;D*E*A*D  R10
	st2 R11,'D',(_Bool_Glob),0
;D*E*A*D  R11
;  Ch_2_Glob = 'B';
	ldaD R11,_Ch_2_Glob
	str1I 66,R11
;D*E*A*D  R11
	ld2z R15
;} /* Proc_4 */
L124:
	popr R7
	release 2
	Cretn

;;function_end$$ _Proc_4
;;function_start _Proc_5 int function(void)
_Proc_5:		
;{
;  Ch_1_Glob = 'A';
	ldaD R11,_Ch_1_Glob
	str1I 65,R11
;D*E*A*D  R11
;  Bool_Glob = false;
	st2I 0,'D',(_Bool_Glob),0
	ld2z R15
;} /* Proc_5 */
L128:
	Cretn

;;function_end$$ _Proc_5
;;function_start _strncmp int function(pointer to const char,pointer to const char,unsigned int)
_strncmp:		
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(10+1) 
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L133
L130:
;	if (*s1 != *s2)
	ldn1 R11,R12	
	zExt R11 
	ldn1 R10,R13	
	zExt R10 
	jeqI2 R11,R10,L134
;D*E*A*D  R11
;D*E*A*D  R10
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ldn1 R11,R12	
	zExt R11 
	ldn1 R10,R13	
	zExt R10 
	jcI2 R11,R10,lbdf,L137
;D*E*A*D  R11
;D*E*A*D  R10
	ldaD R6,-1
	lbr L138
L137:
	ldaD R6,1
L138:
	cpy2 R15,R6 
;D*E*A*D  R6
	lbr L129
L134:
;	else if (*s1 == '\0')
	ldn    R12
	lbnz   L139
;D*E*A*D  R11 - but not in vain I
;	    return 0;
	ld2z R15
	lbr L129
L139:
L131:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1	
L133:
	jnzU2 R7,L130
;    return 0;
	ld2z R15
L129:
	popr R7
	popr R6
	Cretn

;;function_end$$ _strncmp
;;function_start _strlen unsigned int function(pointer to char)
_strlen:		
	pushr R7
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L143
L142:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L143:
;	while (*str != 0) {
	ldn    R12
	lbnz   L142
;D*E*A*D  R11 - but not in vain I
;   return slen;
	cpy2 R15,R7 
;D*E*A*D  R7
L141:
	popr R7
	Cretn

;;function_end$$ _strlen
;;function_start _printstr void function(pointer to char)
_printstr:		
	pushr R7
	reserve 4
	cpy2 R7,R12
;void printstr(char *ptr){
	lbr L147
L146:
;    while(*ptr){
;		putc(*ptr++); //jan 29
	ldaD R12,7
	cpy2 R11,R7 
	incm R7,1
	ldn1 R13,R11	
;D*E*A*D  R11
	zExt R13 
	Ccall _out
;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
 nop1806
 nop1806
 nop1806
;	}
L147:
;    while(*ptr){
	ldn    R7
	lbnz   L146
;D*E*A*D  R11 - but not in vain I
;}
L145:
	release 4
	popr R7
	Cretn

;;function_end$$ _printstr
;;function_start _itoa pointer to char function(int,pointer to char)
_itoa:		
	reserve 2
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 4
	st2 R12,'O',sp,(16+1)
	inc memaddr				
	str2 R13,memaddr
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R0
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(18+1) 
	st2 R11,'O',sp,(12+1)
;D*E*A*D  R11
;	if (s<0){
	ld2 R11,'O',sp,(16+1) 
	jcI2I R11,0,lbdf,L151
;D*E*A*D  R11
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(12+1) 
	str1I 45,R11
;D*E*A*D  R11
	ld2 R11,'O',sp,(12+1) 
	incm R11,1
	st2 R11,'O',sp,(12+1)
;D*E*A*D  R11
;		n=-s;
	ld2 R11,'O',sp,(16+1) 
	negI2 R11,R11 
	cpy2 R6,R11 
;D*E*A*D  R11
;	} else{
	lbr L152
L151:
;		n=s;
	ld2 R11,'O',sp,(16+1) 
	cpy2 R6,R11 
;D*E*A*D  R11
;	}
L152:
;	k=10000;
	ldaD R7,10000
	lbr L154
L153:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R1
	lbr L159
L156:
L157:
	incm R1,1
	alu2 R6,R6,R7,sm,smb
L159:
	jcU2 R6,R7,lbdf,L156 
;		if (flag || r>0||k==1){
	jnzU2 R0,L163
	jnzU2 R1,L163
	jneU2I R7,1,L160
L163:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(12+1) 
	ldA2 R10,'O',R1,(48)
;D*E*A*D  R1
	str1 R10,R11
;D*E*A*D  R10
;D*E*A*D  R11
	ld2 R11,'O',sp,(12+1) 
	incm R11,1
	st2 R11,'O',sp,(12+1)
;D*E*A*D  R11
;			flag='y';
	ldaD R0,121
;		}
L160:
;		k=k/10;
	cpy2 R12,R7 
;D*E*A*D  R7
	ldaD R13,10
	Ccall _divu2
	cpy2 R7,R15 
;	}
L154:
;	while(k>0){
	jnzU2 R7,L153
;	*bptr='\0';
	ld2 R11,'O',sp,(12+1) 
	str1I 0,R11
;D*E*A*D  R11
;	return buffer;
	ld2 R15,'O',sp,(18+1) 
L150:
	release 4
	popr R7
	popr R6
	popr R1
	popr R0
	release 2
	Cretn

;;function_end$$ _itoa
;;function_start _ltoa pointer to char function(long int,pointer to char)
_ltoa:		
	pushr R1
	pushr R6
	pushr R7
	reserve 8
	cpy4 RL6,RL12
;D*E*A*D  RL12
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R1,'O',sp,(20+1) 
;	if (s<0){
	ldI4 RL10,0 
	jcI4 RL6,RL10,lbdf,L165
;D*E*A*D  RL10
;		*bptr++='-';
	cpy2 R11,R1 
	incm R1,1
	str1I 45,R11
;D*E*A*D  R11
;		s=-s;
	negI4 RL6,RL6 
;	}
L165:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6
;D*E*A*D  RL6
	st2 R1,'O',sp,(4+1)
	st2i 1,'O',sp,(6+1)
;D*E*A*D  R11 - but not in vain A
	Ccall _dubdabx
	cpy2 R11,R15 
	cpy2 R12,R1 
;D*E*A*D  R1
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(20+1) 
L164:
	release 8
	popr R7
	popr R6
	popr R1
	Cretn

;;function_end$$ _ltoa
;;function_start _printint void function(int)
_printint:		
	reserve 12
	st2 R12,'O',sp,(14+1)
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(14+1) 
	ldA2 R13,'O',sp,(4+1)
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(4+1)
	Ccall _printstr
;}
L167:
	release 12
	Cretn

;;function_end$$ _printint
;;function_start _printlint void function(long int)
_printlint:		
	reserve 18
	st2 R12,'O',sp,(20+1)
	inc memaddr				
	str2 R13,memaddr
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(20+1)
	ldA2 R11,'O',sp,(6+1)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _ltoa
	cpy2 R12,R15 
;D*E*A*D  R11 - but not in vain 5
	Ccall _printstr
;}
L168:
	release 18
	Cretn

;;function_end$$ _printlint
;;function_start _putxn void function(unsigned char)
_putxn:		
	reserve 4
	st1 R12,'O',sp,(6+1)
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(6+1)
	jcI1I R11,10,lbdf,L170
;D*E*A*D  R11
;		putc(x+'0');
	ldaD R12,7
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	ldA2 R13,'O',R11,(48)
;D*E*A*D  R11
	Ccall _out
;	} else {
	lbr L171
L170:
;		putc(x+'A'-10);
	ldaD R12,7
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	ldA2 R11,'O',R11,(65)
	alu2I R13,R11,10,smi,smbi
;D*E*A*D  R11
	Ccall _out
;	}
L171:
;}
L169:
	release 4
	Cretn

;;function_end$$ _putxn
;;function_start _putx void function(unsigned char)
_putx:		
	reserve 4
	st1 R12,'O',sp,(6+1)
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	shrI2I R11,4
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	alu2I R11,R11,15,ani,ani
	
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putxn
;}
L172:
	release 4
	Cretn

;;function_end$$ _putx
;;function_start _printf void function(pointer to char,...)
_printf:		
	reserve 4
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 4
	st2 R12,'O',sp,(18+1)
	inc memaddr				
	str2 R13,memaddr
;D*E*A*D  memaddr
;void printf(char *pptr,...){ //limited implementation of printf
;	register char* ptr=pptr; //try to save on loads/spills
	ld2 R7,'O',sp,(18+1) 
;	int argslot=0;	//used to align longs
	ld2z R0
;	int * this=(int *)&pptr;
	ldA2 R1,'O',sp,(18+1)
;	this++; argslot++; //advance argument pointer and slot #
	incm R1,2
	incm R0,1
	lbr L175
L174:
;    while(*ptr) {
;		c=*ptr; ptr++;
	ldn1 R6,R7
	incm R7,1
;		if (c!='%'){
	jeqU1I R6,37,L177
;			putc(c);
	ldaD R12,7
	cpy1 R13,R6
;D*E*A*D  R6
	zExt R13 
	Ccall _out
;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
 nop1806
 nop1806
 nop1806
;		} else{
	lbr L178
L177:
;			c=*ptr;ptr++;
	ldn1 R6,R7
	incm R7,1
;			switch (c){
	cpy1 R11,R6
	zExt R11 
	st2 R11,'O',sp,(13+1)
	jeqU2I R11,105,L183
	ldaD R10,108
	jeqI2 R11,R10,L189
	jcI2 R10,R11,lbnf,L197 
;D*E*A*D  R10
;D*E*A*D  R11
L196:
	ld2 R11,'O',sp,(13+1) 
	ldaD R10,88
	jeqI2 R11,R10,L188
	jcI2 R11,R10,lbnf,L180
;D*E*A*D  R11
;D*E*A*D  R10
L198:
	ld2 R11,'O',sp,(13+1) 
	jeqU2I R11,99,L185
	jeqU2I R11,100,L183
;D*E*A*D  R11
	lbr L180
L197:
	ld2 R11,'O',sp,(13+1) 
	ldaD R10,115
	jeqI2 R11,R10,L184
	jcI2 R11,R10,lbnf,L180
;D*E*A*D  R11
;D*E*A*D  R10
L199:
	ld2 R11,'O',sp,(13+1) 
	jeqU2I R11,120,L188
;D*E*A*D  R11
	lbr L180
L183:
;					printint(*this++);
	cpy2 R11,R1 
	incm R1,2
	ldn2 R12,R11	
;D*E*A*D  R11
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L181
L184:
;					printstr((char*) *this++);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	cpy2 R12,R11 
;D*E*A*D  R11
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L181
L185:
;					if (*ptr=='x'){ //if there's an x
	ldn1 R11,R7
	jneU1I R11,120,L186	
;D*E*A*D  R11
;						ptr++; //skip over the x
	incm R7,1
;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					} else{
	lbr L187
L186:
;						putc((unsigned int) *this++);		//print as char
	ldaD R12,7
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _out
;					}
L187:
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L181
L188:
;					putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	
	ghi	R11	
;D*E*A*D  R11
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L181
L189:
;					if (*ptr){ //as long as there's something there
	ldn   R7
	lbz   L190
;D*E*A*D  R11 - but not in vain H
;						xord=*ptr++;
	cpy2 R11,R7 
	incm R7,1
	ldA2 R10,'O',sp,(15+1)
	ldn R11
	str R10
;D*E*A*D  R10
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	
	jzU2 R11,L192
;D*E*A*D  R11
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L192:
;						if(xord=='d'){
	ld1 R11,'O',sp,(15+1)
	jneU1I R11,100,L194	
;D*E*A*D  R11
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R1,4
;						} else{
	lbr L195
L194:
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	
	ghi	R11	
;D*E*A*D  R11
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	
	ghi	R11	
;D*E*A*D  R11
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;						}
L195:
;						argslot+=2;
	incm R0,2
;						break;
	lbr L181
L190:
L180:
;					putc('%');putc(c);
	ldaD R12,7
	ldaD R13,37
	Ccall _out
	ldaD R12,7
	cpy1 R13,R6
;D*E*A*D  R6
	zExt R13 
	Ccall _out
;			} //switch
L181:
;		} //%
L178:
;	} //while
L175:
;    while(*ptr) {
	ldn    R7
	lbnz   L174
;D*E*A*D  R11 - but not in vain I
;} //prtf
L173:
	release 4
	popr R7
	popr R6
	popr R1
	popr R0
	release 4
	Cretn

;;function_end$$ _printf
;;function_start _exit void function(int)
_exit:		
	reserve 4
	st2 R12,'O',sp,(6+1)
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L201
	ld2 R13,'O',sp,(6+1) 
	Ccall _printf
L202:
;	while(1);
L203:
	lbr L202
;}
L200:
	release 4
	Cretn

;;function_end$$ _exit
;;function_start _memcmp int function(pointer to const void,pointer to const void,unsigned int)
_memcmp:		
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(14+1) 
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R6
;    p1 = (unsigned char *)Ptr1;
	cpy2 R1,R12 
;    p2 = (unsigned char *)Ptr2;
	cpy2 R0,R13 
	lbr L207
L206:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R1 
	incm R1,1
	cpy2 R10,R0 
	incm R0,1
	ldn1 R11,R11	
	zExt R11 
	ldn1 R10,R10	
	zExt R10 
	alu2 R6,R11,R10,sm,smb
;D*E*A*D  R11
;D*E*A*D  R10
;    }
L207:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 
;D*E*A*D  R7
	cpy2 R7,R11	
	decm R7,1	
	jzU2 R11,L209
;D*E*A*D  R11
	jzU2 R6,L206
L209:
;    return v;
	cpy2 R15,R6 
;D*E*A*D  R6
L205:
	popr R7
	popr R6
	popr R1
	popr R0
	Cretn

;;function_end$$ _memcmp
;;function_start _memcpy pointer to void function(pointer to void,pointer to const void,unsigned int)
_memcpy:		
	pushr R1
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(12+1) 
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R6,R12 
;        char* src8 = (char*)src;
	cpy2 R1,R13 
	lbr L212
L211:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R6 
	incm R6,1
	cpy2 R10,R1 
	incm R1,1
	ldn R10
	str R11
;D*E*A*D  R11
;        }
L212:
;        while (count--) {
	cpy2 R11,R7 
;D*E*A*D  R7
	cpy2 R7,R11	
	decm R7,1	
	jnzU2 R11,L211
;D*E*A*D  R11
;        return dest;
	cpy2 R15,R12 
L210:
	popr R7
	popr R6
	popr R1
	Cretn

;;function_end$$ _memcpy
;;function_start _memset pointer to void function(pointer to void,int,unsigned int)
_memset:		
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(10+1) 
;{
;    unsigned char* p=s;
	cpy2 R6,R12 
	lbr L216
L215:
;    while(n){
;        *p = (unsigned char)c;
	str1 R13,R6
;        p++;
	incm R6,1
;        n--;
	decm R7,1	
;	}
L216:
;    while(n){
	jnzU2 R7,L215
;    return s;
	cpy2 R15,R12 
L214:
	popr R7
	popr R6
	Cretn

;;function_end$$ _memset
;;function_start _nstdlibincluder void function(void)
_nstdlibincluder:		
;void nstdlibincluder(){
;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
	include nstdlib.inc
;}
L218:
	Cretn

;;function_end$$ _nstdlibincluder
	orgd
_Arr_2_Glob:
	globss 1000
	globss 1000
	globss 1000
	globss 1000
	globss 1000
_Arr_1_Glob:
	globss 100
_Ch_2_Glob:
	globss 1
_Ch_1_Glob:
	globss 1
_Bool_Glob:
	globss 2
_Int_Glob:
	globss 2
_Next_Ptr_Glob:
	globss 2
_Ptr_Glob:
	globss 2
	orgc
L201:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
L111:
	db 100
	db 111
	db 110
	db 101
	db 10
	db 0
L110:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 68
	db 72
	db 82
	db 89
	db 83
	db 84
	db 79
	db 78
	db 69
	db 32
	db 80
	db 82
	db 79
	db 71
	db 82
	db 65
	db 77
	db 44
	db 32
	db 50
	db 39
	db 78
	db 68
	db 32
	db 83
	db 84
	db 82
	db 73
	db 78
	db 71
	db 10
	db 0
L109:
	db 83
	db 116
	db 114
	db 95
	db 50
	db 95
	db 76
	db 111
	db 99
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 115
	db 10
	db 0
L108:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 68
	db 72
	db 82
	db 89
	db 83
	db 84
	db 79
	db 78
	db 69
	db 32
	db 80
	db 82
	db 79
	db 71
	db 82
	db 65
	db 77
	db 44
	db 32
	db 49
	db 39
	db 83
	db 84
	db 32
	db 83
	db 84
	db 82
	db 73
	db 78
	db 71
	db 10
	db 0
L107:
	db 83
	db 116
	db 114
	db 95
	db 49
	db 95
	db 76
	db 111
	db 99
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 115
	db 10
	db 0
L106:
	db 69
	db 110
	db 117
	db 109
	db 95
	db 76
	db 111
	db 99
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L105:
	db 73
	db 110
	db 116
	db 95
	db 51
	db 95
	db 76
	db 111
	db 99
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L104:
	db 73
	db 110
	db 116
	db 95
	db 50
	db 95
	db 76
	db 111
	db 99
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L103:
	db 73
	db 110
	db 116
	db 95
	db 49
	db 95
	db 76
	db 111
	db 99
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L102:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 40
	db 105
	db 109
	db 112
	db 108
	db 101
	db 109
	db 101
	db 110
	db 116
	db 97
	db 116
	db 105
	db 111
	db 110
	db 45
	db 100
	db 101
	db 112
	db 101
	db 110
	db 100
	db 101
	db 110
	db 116
	db 41
	db 44
	db 32
	db 115
	db 97
	db 109
	db 101
	db 32
	db 97
	db 115
	db 32
	db 97
	db 98
	db 111
	db 118
	db 101
	db 10
	db 0
L101:
	db 78
	db 101
	db 120
	db 116
	db 95
	db 80
	db 116
	db 114
	db 95
	db 71
	db 108
	db 111
	db 98
	db 45
	db 62
	db 10
	db 0
L100:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 68
	db 72
	db 82
	db 89
	db 83
	db 84
	db 79
	db 78
	db 69
	db 32
	db 80
	db 82
	db 79
	db 71
	db 82
	db 65
	db 77
	db 44
	db 32
	db 83
	db 79
	db 77
	db 69
	db 32
	db 83
	db 84
	db 82
	db 73
	db 78
	db 71
	db 10
	db 0
L99:
	db 32
	db 32
	db 83
	db 116
	db 114
	db 95
	db 67
	db 111
	db 109
	db 112
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 115
	db 10
	db 0
L98:
	db 32
	db 32
	db 73
	db 110
	db 116
	db 95
	db 67
	db 111
	db 109
	db 112
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L97:
	db 32
	db 32
	db 69
	db 110
	db 117
	db 109
	db 95
	db 67
	db 111
	db 109
	db 112
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L96:
	db 32
	db 32
	db 68
	db 105
	db 115
	db 99
	db 114
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L95:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 40
	db 105
	db 109
	db 112
	db 108
	db 101
	db 109
	db 101
	db 110
	db 116
	db 97
	db 116
	db 105
	db 111
	db 110
	db 45
	db 100
	db 101
	db 112
	db 101
	db 110
	db 100
	db 101
	db 110
	db 116
	db 41
	db 10
	db 0
L94:
	db 32
	db 32
	db 80
	db 116
	db 114
	db 95
	db 67
	db 111
	db 109
	db 112
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L93:
	db 80
	db 116
	db 114
	db 95
	db 71
	db 108
	db 111
	db 98
	db 45
	db 62
	db 10
	db 0
L92:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 78
	db 117
	db 109
	db 98
	db 101
	db 114
	db 95
	db 79
	db 102
	db 95
	db 82
	db 117
	db 110
	db 115
	db 32
	db 43
	db 32
	db 49
	db 48
	db 10
	db 0
L89:
	db 65
	db 114
	db 114
	db 95
	db 50
	db 95
	db 71
	db 108
	db 111
	db 98
	db 91
	db 56
	db 93
	db 91
	db 55
	db 93
	db 58
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L87:
	db 65
	db 114
	db 114
	db 95
	db 49
	db 95
	db 71
	db 108
	db 111
	db 98
	db 91
	db 56
	db 93
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L86:
	db 67
	db 104
	db 95
	db 50
	db 95
	db 71
	db 108
	db 111
	db 98
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 99
	db 10
	db 0
L85:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 37
	db 99
	db 10
	db 0
L84:
	db 67
	db 104
	db 95
	db 49
	db 95
	db 71
	db 108
	db 111
	db 98
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 99
	db 10
	db 0
L83:
	db 66
	db 111
	db 111
	db 108
	db 95
	db 71
	db 108
	db 111
	db 98
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L82:
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 115
	db 104
	db 111
	db 117
	db 108
	db 100
	db 32
	db 98
	db 101
	db 58
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L81:
	db 73
	db 110
	db 116
	db 95
	db 71
	db 108
	db 111
	db 98
	db 58
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 32
	db 37
	db 100
	db 10
	db 0
L80:
	db 70
	db 105
	db 110
	db 97
	db 108
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 115
	db 32
	db 111
	db 102
	db 32
	db 116
	db 104
	db 101
	db 32
	db 118
	db 97
	db 114
	db 105
	db 97
	db 98
	db 108
	db 101
	db 115
	db 32
	db 117
	db 115
	db 101
	db 100
	db 32
	db 105
	db 110
	db 32
	db 116
	db 104
	db 101
	db 32
	db 98
	db 101
	db 110
	db 99
	db 104
	db 109
	db 97
	db 114
	db 107
	db 58
	db 10
	db 0
L79:
	db 69
	db 120
	db 101
	db 99
	db 117
	db 116
	db 105
	db 111
	db 110
	db 32
	db 101
	db 110
	db 100
	db 115
	db 33
	db 64
	db 35
	db 10
	db 0
L78:
	db 68
	db 72
	db 82
	db 89
	db 83
	db 84
	db 79
	db 78
	db 69
	db 32
	db 80
	db 82
	db 79
	db 71
	db 82
	db 65
	db 77
	db 44
	db 32
	db 51
	db 39
	db 82
	db 68
	db 32
	db 83
	db 84
	db 82
	db 73
	db 78
	db 71
	db 0
L65:
	db 68
	db 72
	db 82
	db 89
	db 83
	db 84
	db 79
	db 78
	db 69
	db 32
	db 80
	db 82
	db 79
	db 71
	db 82
	db 65
	db 77
	db 44
	db 32
	db 50
	db 39
	db 78
	db 68
	db 32
	db 83
	db 84
	db 82
	db 73
	db 78
	db 71
	db 0
L60:
	db 69
	db 120
	db 101
	db 99
	db 117
	db 116
	db 105
	db 111
	db 110
	db 32
	db 115
	db 116
	db 97
	db 114
	db 116
	db 115
	db 44
	db 32
	db 37
	db 100
	db 32
	db 114
	db 117
	db 110
	db 115
	db 32
	db 116
	db 104
	db 114
	db 111
	db 117
	db 103
	db 104
	db 32
	db 68
	db 104
	db 114
	db 121
	db 115
	db 116
	db 111
	db 110
	db 101
	db 32
	db 33
	db 64
	db 35
	db 10
	db 0
L59:
	db 80
	db 108
	db 101
	db 97
	db 115
	db 101
	db 32
	db 103
	db 105
	db 118
	db 101
	db 32
	db 116
	db 104
	db 101
	db 32
	db 110
	db 117
	db 109
	db 98
	db 101
	db 114
	db 32
	db 111
	db 102
	db 32
	db 114
	db 117
	db 110
	db 115
	db 32
	db 116
	db 104
	db 114
	db 111
	db 117
	db 103
	db 104
	db 32
	db 116
	db 104
	db 101
	db 32
	db 98
	db 101
	db 110
	db 99
	db 104
	db 109
	db 97
	db 114
	db 107
	db 58
	db 32
	db 0
L58:
	db 80
	db 114
	db 111
	db 103
	db 114
	db 97
	db 109
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 100
	db 32
	db 119
	db 105
	db 116
	db 104
	db 111
	db 117
	db 116
	db 32
	db 39
	db 114
	db 101
	db 103
	db 105
	db 115
	db 116
	db 101
	db 114
	db 39
	db 32
	db 97
	db 116
	db 116
	db 114
	db 105
	db 98
	db 117
	db 116
	db 101
	db 10
	db 0
L57:
	db 80
	db 114
	db 111
	db 103
	db 114
	db 97
	db 109
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 100
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 39
	db 114
	db 101
	db 103
	db 105
	db 115
	db 116
	db 101
	db 114
	db 39
	db 32
	db 97
	db 116
	db 116
	db 114
	db 105
	db 98
	db 117
	db 116
	db 101
	db 10
	db 0
L54:
	db 68
	db 104
	db 114
	db 121
	db 115
	db 116
	db 111
	db 110
	db 101
	db 32
	db 66
	db 101
	db 110
	db 99
	db 104
	db 109
	db 97
	db 114
	db 107
	db 44
	db 32
	db 86
	db 101
	db 114
	db 115
	db 105
	db 111
	db 110
	db 32
	db 50
	db 46
	db 49
	db 32
	db 40
	db 76
	db 97
	db 110
	db 103
	db 117
	db 97
	db 103
	db 101
	db 58
	db 32
	db 67
	db 41
	db 10
	db 0
L53:
	db 10
	db 0
L50:
	db 65
	db 114
	db 114
	db 95
	db 50
	db 95
	db 71
	db 108
	db 111
	db 98
	db 91
	db 56
	db 93
	db 91
	db 55
	db 93
	db 58
	db 37
	db 120
	db 61
	db 37
	db 100
	db 10
	db 0
L47:
	db 68
	db 72
	db 82
	db 89
	db 83
	db 84
	db 79
	db 78
	db 69
	db 32
	db 80
	db 82
	db 79
	db 71
	db 82
	db 65
	db 77
	db 44
	db 32
	db 49
	db 39
	db 83
	db 84
	db 32
	db 83
	db 84
	db 82
	db 73
	db 78
	db 71
	db 0
L46:
	db 68
	db 72
	db 82
	db 89
	db 83
	db 84
	db 79
	db 78
	db 69
	db 32
	db 80
	db 82
	db 79
	db 71
	db 82
	db 65
	db 77
	db 44
	db 32
	db 83
	db 79
	db 77
	db 69
	db 32
	db 83
	db 84
	db 82
	db 73
	db 78
	db 71
	db 0
	include lcc1802epiloCX.inc
	include IO1802.inc
	include LCC1802finale.inc
