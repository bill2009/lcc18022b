 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 1 - 10/28/2020 10:49:19


       1/       0 :                     ; generated by lcc-xr18CX $Version: 5.2 - XR18CX $ on Wed Oct 28 10:49:17 2020
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =0EH                memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =0FH                retVal:	equ	15
       7/       0 : =0CH                regArg1: equ	12
       8/       0 : =0DH                regArg2: equ	13
(1) 1159/    4401 :                     	listing	on
(1) 1160/    4401 : C0 7B F0            	lbr	lcc1802init
(1) 1161/    4404 :                     	
(1) 1162/    4404 :                     
      11/    4404 :                     	listing on
      12/    4404 : (MACRO)             	orgd
      13/    4404 :                     _malloc_ptr:
      14/    4404 : 60 00               	dw 24576
      15/    4406 : (MACRO)             	orgc
      16/    4406 :                     ;;function_start _malloc pointer to void function(int)
      17/    4406 :                     _malloc:		;framesize=4
      18/    4406 : (MACRO)             	reserve 2
      19/    4408 :                     ;{
      20/    4408 :                     ;  ret = (void*)malloc_ptr;
      21/    4408 : (MACRO)             	ld2 R11,'D',(_malloc_ptr),0 ;reg:INDIRP2(addr)
      22/    4412 : (MACRO)             	st2 R11,'O',sp,(0+1); ASGNP2(addr,reg)
      23/    441F :                     ;  malloc_ptr += size;
      24/    441F : (MACRO)             	alu2RRS R11,R12,'D',(_malloc_ptr),0,add,adc; ADDI2(r,INDIRP2(addr))	DH3.1
      25/    442E : (MACRO)             	st2 R11,'D',(_malloc_ptr),0; ASGNP2(addr,reg)
      26/    4439 :                     ;  return ret;
      27/    4439 : (MACRO)             	ld2 R15,'O',sp,(0+1) ;reg:INDIRP2(addr)
      28/    4445 :                     L6:
      29/    4445 : (MACRO)             	release 2
      30/    4447 : (MACRO)             	Cretn
      31/    4449 :                     
      32/    4449 :                     ;;function_end$$ _malloc
      33/    4449 : (MACRO)             	orgd
      34/    4449 :                     _Reg:
      35/    4449 : 00 00               	dw 0
      36/    444B : (MACRO)             	orgc
      37/    444B :                     ;;function_start _Proc_6 int function(int,pointer to Enumeration)
      38/    444B :                     _Proc_6:		;framesize=10
      39/    444B : (MACRO)             	pushr R6
      40/    444F : (MACRO)             	pushr R7
      41/    4453 : (MACRO)             	reserve 4; save room for outgoing arguments
      42/    4457 : (MACRO)             	st2 R12,'O',sp,(10+1)			
      43/    4464 : 1E                  	inc memaddr				;opt16.1
      44/    4465 : (MACRO)             	str2 R13,memaddr			
      45/    446B : (MACRO)             	ld2 R7,'O',sp,(10+1) ;reg:INDIRI2(addr)
      46/    4477 :                     ;{
      47/    4477 :                     ;  *Enum_Ref_Par = Enum_Val_Par;
      48/    4477 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
      49/    4483 : (MACRO)             	str2 R7,R11	;opt5 ASGNI2
      50/    4489 :                     ;  if (! Func_3 (Enum_Val_Par))
      51/    4489 : (MACRO)             	cpy2 R12,R7 ;LOADI2(reg)
      52/    448D : (MACRO)             	Ccall _Func_3; CALLI2(ar)
      53/    4491 : (MACRO)             	jnzU2 R15,L8; NE 0
      54/    4499 :                     ;    *Enum_Ref_Par = Ident_4;
      55/    4499 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
      56/    44A5 : (MACRO)             	str2I 3,R11	;opt8.3n
      57/    44AD :                     L8:
      58/    44AD :                     ;  switch (Enum_Val_Par)
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 2 - 10/28/2020 10:49:19


      59/    44AD : (MACRO)             	cpy2 R6,R7 ;LOADI2(reg)
      60/    44B1 : (MACRO)             	jcI2I R6,0,lbnf,L10  ;LT=lbnf i.e. subtract immedB from A and jump if borrow J2020-7
      61/    44C2 : (MACRO)             	jnI2I R6,4,lbnf,L10; GT reverse  the subtraction
      62/    44D3 : (MACRO)             	shlR2R	R11,R6	;opt6
      63/    44D9 : (MACRO)             	ld2 R11,'O',R11,(L20) ;reg:INDIRP2(addr)
      64/    44E5 : (MACRO)             	jumpv R11; JUMPV(reg)
      65/    44EF : (MACRO)             	orgc
      66/    44EF :                     L20:
      67/    44EF : 44 F9               	dw L13
      68/    44F1 : 45 10               	dw L14
      69/    44F3 : 45 59               	dw L17
      70/    44F5 : 45 84               	dw L11
      71/    44F7 : 45 70               	dw L19
      72/    44F9 : (MACRO)             	orgc
      73/    44F9 :                     ;  {
      74/    44F9 :                     L13:
      75/    44F9 :                     ;      *Enum_Ref_Par = Ident_1;
      76/    44F9 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
      77/    4505 : (MACRO)             	str2I 0,R11	;opt8.3n
      78/    450D :                     ;      break;
      79/    450D : C0 45 84            	lbr L11
      80/    4510 :                     L14:
      81/    4510 :                     ;      if (Int_Glob > 100)
      82/    4510 : (MACRO)             	ld2 R11,'D',(_Int_Glob),0 ;reg:INDIRI2(addr)
      83/    451A : (MACRO)             	jnI2I R11,100,lbdf,L15 ;LEI2 100 11 L15; LE is flipped test & subtraction
      84/    452B :                     ;      *Enum_Ref_Par = Ident_1;
      85/    452B : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
      86/    4537 : (MACRO)             	str2I 0,R11	;opt8.3n
      87/    453F : C0 45 84            	lbr L11
      88/    4542 :                     L15:
      89/    4542 :                     ;      else *Enum_Ref_Par = Ident_4;
      90/    4542 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
      91/    454E : (MACRO)             	str2I 3,R11	;opt8.3n
      92/    4556 :                     ;      break;
      93/    4556 : C0 45 84            	lbr L11
      94/    4559 :                     L17:
      95/    4559 :                     ;      *Enum_Ref_Par = Ident_2;
      96/    4559 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
      97/    4565 : (MACRO)             	str2I 1,R11	;opt8.3n
      98/    456D :                     ;      break;
      99/    456D : C0 45 84            	lbr L11
     100/    4570 :                     ;    case Ident_4: break;
     101/    4570 :                     L19:
     102/    4570 :                     ;      *Enum_Ref_Par = Ident_3;
     103/    4570 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
     104/    457C : (MACRO)             	str2I 2,R11	;opt8.3n
     105/    4584 :                     ;      break;
     106/    4584 :                     L10:
     107/    4584 :                     L11:
     108/    4584 : (MACRO)             	ld2z R15; reg:con0
     109/    4588 :                     ;} /* Proc_6 */
     110/    4588 :                     L7:
     111/    4588 : (MACRO)             	release 4; release room for outgoing arguments
     112/    458C : (MACRO)             	popr R7
     113/    4591 : (MACRO)             	popr R6
     114/    4596 : (MACRO)             	Cretn
     115/    4598 :                     
     116/    4598 :                     ;;function_end$$ _Proc_6
     117/    4598 :                     ;;function_start _Proc_7 int function(int,int,pointer to int)
     118/    4598 :                     _Proc_7:		;framesize=4
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 3 - 10/28/2020 10:49:19


     119/    4598 : (MACRO)             	reserve 2
     120/    459A :                     ;{
     121/    459A :                     ;  Int_Loc = Int_1_Par_Val + 2;
     122/    459A : (MACRO)             	cpy2 R11,R12 ;reg:ADDI2(consm,reg)
     123/    459E : (MACRO)             	incm R11,2
     124/    45A0 : (MACRO)             	st2 R11,'O',sp,(0+1); ASGNI2(addr,reg)
     125/    45AD :                     ;  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     126/    45AD : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRP2(addr)
     127/    45B9 : (MACRO)             	alu2RRS R10,R13,'O',sp,(0+1),add,adc; ADDI2(r,INDIRI2(addr))	DH3
     128/    45CA : (MACRO)             	str2 R10,R11	;opt5 ASGNI2
     129/    45D0 : (MACRO)             	ld2z R15; reg:con0
     130/    45D4 :                     ;} /* Proc_7 */
     131/    45D4 :                     L21:
     132/    45D4 : (MACRO)             	release 2
     133/    45D6 : (MACRO)             	Cretn
     134/    45D8 :                     
     135/    45D8 :                     ;;function_end$$ _Proc_7
     136/    45D8 :                     ;;function_start _Proc_8 int function(pointer to int,pointer to array 50 of int,int,int)
     137/    45D8 :                     _Proc_8:		;framesize=14
     138/    45D8 : (MACRO)             	reserve 4; save room for local variables
     139/    45DC : (MACRO)             	pushr R6
     140/    45E0 : (MACRO)             	pushr R7
     141/    45E4 : (MACRO)             	reserve 4; save room for outgoing arguments
     142/    45E8 : (MACRO)             	cpy2 R7,R12; function(2055) 1
     143/    45EC : (MACRO)             	cpy2 R6,R13; function(2055) 1
     144/    45F0 :                     ;{
     145/    45F0 :                     ;  Int_Loc = Int_1_Par_Val + 5;
     146/    45F0 : (MACRO)             	ld2 R11,'O',sp,(18+1) ;reg:INDIRI2(addr)
     147/    45FC : (MACRO)             	ldA2 R11,'O',R11,(5); reg:addr
     148/    4604 : (MACRO)             	st2 R11,'O',sp,(10+1); ASGNI2(addr,reg)
     149/    4611 :                     ;  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
     150/    4611 : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     151/    461D : (MACRO)             	shl2I R11,1
     152/    4623 : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
     153/    462D : (MACRO)             	ld2 R10,'O',sp,(20+1) ;reg:INDIRI2(addr)
     154/    4639 : (MACRO)             	str2 R10,R11	;opt5 ASGNI2
     155/    463F :                     ;  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
     156/    463F : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     157/    464B : (MACRO)             	shl2I R11,1
     158/    4651 : (MACRO)             	cpy2 R10,R11 ;reg:ADDI2(consm,reg)
     159/    4655 : (MACRO)             	incm R10,2
     160/    4657 : (MACRO)             	alu2 R10,R10,R7,add,adc	;ADDP2(reg,reg)
     161/    4661 : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
     162/    466B : (MACRO)             	mvcn2 R10,R11	;opt12xs
     163/    4672 :                     ;  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
     164/    4672 : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     165/    467E : (MACRO)             	shlR2R	R10,R11	;opt6
     166/    4684 : (MACRO)             	ldA2 R10,'O',R10,(60); reg:addr
     167/    468C : (MACRO)             	alu2 R10,R10,R7,add,adc	;ADDP2(reg,reg)
     168/    4696 : (MACRO)             	str2 R11,R10	;opt5 ASGNI2
     169/    469C :                     ;  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
     170/    469C : (MACRO)             	mvc2 R11,'O',sp,(8+1),'O',sp,(10+1)	;opt12
     171/    46B1 : C0 47 50            	lbr L26
     172/    46B4 :                     L23:
     173/    46B4 :                     ;    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
     174/    46B4 : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     175/    46C0 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     176/    46C4 :                     	;inline multiplication by a constant 100
     177/    46C4 : (MACRO)             	ld2z R15
     178/    46C8 : (MACRO)             	shl2I	R13,1
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 4 - 10/28/2020 10:49:19


     179/    46CE : (MACRO)             	shl2I	R13,1
     180/    46D4 : (MACRO)             	alu2 R15,R15,R13,add,adc
     181/    46DE : (MACRO)             	shl2I	R13,1
     182/    46E4 : (MACRO)             	shl2I	R13,1
     183/    46EA : (MACRO)             	shl2I	R13,1
     184/    46F0 : (MACRO)             	alu2 R15,R15,R13,add,adc
     185/    46FA : (MACRO)             	shl2I	R13,1
     186/    4700 : (MACRO)             	alu2 R15,R15,R13,add,adc
     187/    470A : (MACRO)             	ld2 R9,'O',sp,(8+1) ;reg:INDIRI2(addr)
     188/    4716 : (MACRO)             	shl2I R9,1
     189/    471C : (MACRO)             	alu2 R10,R15,R6,add,adc	;ADDP2(reg,reg)
     190/    4726 : (MACRO)             	alu2 R10,R9,R10,add,adc	;ADDP2(reg,reg)
     191/    4730 : (MACRO)             	str2 R11,R10	;opt5 ASGNI2
     192/    4736 :                     L24:
     193/    4736 :                     ;  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
     194/    4736 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRI2(addr)
     195/    4742 : (MACRO)             	incm R11,1
     196/    4743 : (MACRO)             	st2 R11,'O',sp,(8+1); ASGNI2(addr,reg)
     197/    4750 :                     L26:
     198/    4750 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRI2(addr)
     199/    475C : (MACRO)             	ld2 R10,'O',sp,(10+1) ;reg:INDIRI2(addr)
     200/    4768 : (MACRO)             	incm R10,1
     201/    4769 : (MACRO)             	jcI2 R10,R11,lbdf,L23 ;LE is flipped test & operands
     202/    477B :                     ;  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
     203/    477B : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     204/    4787 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     205/    478B :                     	;inline multiplication by a constant 100
     206/    478B : (MACRO)             	ld2z R15
     207/    478F : (MACRO)             	shl2I	R13,1
     208/    4795 : (MACRO)             	shl2I	R13,1
     209/    479B : (MACRO)             	alu2 R15,R15,R13,add,adc
     210/    47A5 : (MACRO)             	shl2I	R13,1
     211/    47AB : (MACRO)             	shl2I	R13,1
     212/    47B1 : (MACRO)             	shl2I	R13,1
     213/    47B7 : (MACRO)             	alu2 R15,R15,R13,add,adc
     214/    47C1 : (MACRO)             	shl2I	R13,1
     215/    47C7 : (MACRO)             	alu2 R15,R15,R13,add,adc
     216/    47D1 : (MACRO)             	shl2I R11,1
     217/    47D7 : (MACRO)             	decm R11,2	;SUBI2(reg,consm)
     218/    47D9 : (MACRO)             	alu2 R10,R15,R6,add,adc	;ADDP2(reg,reg)
     219/    47E3 : (MACRO)             	alu2 R11,R11,R10,add,adc	;ADDP2(reg,reg)
     220/    47ED : (MACRO)             	ldn2 R10,R11	;opt9x
     221/    47F2 : (MACRO)             	incm R10,1
     222/    47F3 : (MACRO)             	str2 R10,R11	;opt5 ASGNI2
     223/    47F9 :                     ;  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
     224/    47F9 : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     225/    4805 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     226/    4809 :                     	;inline multiplication by a constant 100
     227/    4809 : (MACRO)             	ld2z R15
     228/    480D : (MACRO)             	shl2I	R13,1
     229/    4813 : (MACRO)             	shl2I	R13,1
     230/    4819 : (MACRO)             	alu2 R15,R15,R13,add,adc
     231/    4823 : (MACRO)             	shl2I	R13,1
     232/    4829 : (MACRO)             	shl2I	R13,1
     233/    482F : (MACRO)             	shl2I	R13,1
     234/    4835 : (MACRO)             	alu2 R15,R15,R13,add,adc
     235/    483F : (MACRO)             	shl2I	R13,1
     236/    4845 : (MACRO)             	alu2 R15,R15,R13,add,adc
     237/    484F : (MACRO)             	shl2I R11,1
     238/    4855 : (MACRO)             	ldA2 R10,'O',R15,(2000); reg:addr
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 5 - 10/28/2020 10:49:19


     239/    485D : (MACRO)             	alu2 R10,R10,R6,add,adc	;ADDP2(reg,reg)
     240/    4867 : (MACRO)             	alu2 R10,R11,R10,add,adc	;ADDP2(reg,reg)
     241/    4871 : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
     242/    487B : (MACRO)             	mvcn2 R10,R11	;opt12xs
     243/    4882 :                     ;  Int_Glob = 5;
     244/    4882 : (MACRO)             	st2I 5,'D',(_Int_Glob),0; ASGNI2(addr,acon)
     245/    488F : (MACRO)             	ld2z R15; reg:con0
     246/    4893 :                     ;} /* Proc_8 */
     247/    4893 :                     L22:
     248/    4893 : (MACRO)             	release 4; release room for outgoing arguments
     249/    4897 : (MACRO)             	popr R7
     250/    489C : (MACRO)             	popr R6
     251/    48A1 : (MACRO)             	release 4; release room for local variables 
     252/    48A5 : (MACRO)             	Cretn
     253/    48A7 :                     
     254/    48A7 :                     ;;function_end$$ _Proc_8
     255/    48A7 :                     ;;function_start _Func_1 Enumeration function(int,int)
     256/    48A7 :                     _Func_1:		;framesize=4
     257/    48A7 : (MACRO)             	reserve 2
     258/    48A9 :                     ;{
     259/    48A9 :                     ;  Ch_1_Loc = Ch_1_Par_Val;
     260/    48A9 : (MACRO)             	ldA2 R11,'O',sp,(1+1); reg:addr
     261/    48B1 : (MACRO)             	str1 R12,R11; ASGNU1(indaddr,reg)		DH*
     262/    48B3 :                     ;  Ch_2_Loc = Ch_1_Loc;
     263/    48B3 : (MACRO)             	ldA2 R11,'O',sp,(0+1); reg:addr
     264/    48BB : (MACRO)             	ldA2 R10,'O',sp,(1+1); reg:addr
     265/    48C3 : 0A                  	ldn R10
     266/    48C4 : 5B                  	str R11; ASGNU1(indaddr,INDIRU1(indaddr))J2020-1
     267/    48C5 :                     ;  if (Ch_2_Loc != Ch_2_Par_Val)
     268/    48C5 : (MACRO)             	ld1 R11,'O',sp,(0+1)
     269/    48CF : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
     270/    48D2 : (MACRO)             	cpy1 R10,R13
     271/    48D4 : (MACRO)             	zExt R10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     272/    48D7 : (MACRO)             	jeqI2 R11,R10,L28; EQI2(reg,reg)
     273/    48E5 :                     ;    return (Ident_1);
     274/    48E5 : (MACRO)             	ld2z R15; reg:con0
     275/    48E9 : C0 49 02            	lbr L27
     276/    48EC :                     L28:
     277/    48EC :                     ;  {
     278/    48EC :                     ;    Ch_1_Glob = Ch_1_Loc;
     279/    48EC : (MACRO)             	ldaD R11,_Ch_1_Glob; reg:acon
     280/    48F2 : (MACRO)             	ldA2 R10,'O',sp,(1+1); reg:addr
     281/    48FA : 0A                  	ldn R10
     282/    48FB : 5B                  	str R11; ASGNU1(indaddr,INDIRU1(indaddr))J2020-1
     283/    48FC :                     ;    return (Ident_2);
     284/    48FC : (MACRO)             	ldaD R15,1; reg:acon
     285/    4902 :                     L27:
     286/    4902 : (MACRO)             	release 2
     287/    4904 : (MACRO)             	Cretn
     288/    4906 :                     
     289/    4906 :                     ;;function_end$$ _Func_1
     290/    4906 :                     ;;function_start _Func_2 int function(pointer to char,pointer to char)
     291/    4906 :                     _Func_2:		;framesize=14
     292/    4906 : (MACRO)             	reserve 4; save room for local variables
     293/    490A : (MACRO)             	pushr R6
     294/    490E : (MACRO)             	pushr R7
     295/    4912 : (MACRO)             	reserve 4; save room for outgoing arguments
     296/    4916 : (MACRO)             	cpy2 R7,R12; function(2055) 1
     297/    491A : (MACRO)             	cpy2 R6,R13; function(2055) 1
     298/    491E :                     ;{
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 6 - 10/28/2020 10:49:19


     299/    491E :                     ;  Int_Loc = 2;
     300/    491E : (MACRO)             	st2I 2,'O',sp,(10+1); ASGNI2(addr,acon)
     301/    492D : C0 49 8C            	lbr L32
     302/    4930 :                     L31:
     303/    4930 :                     ;    if (Func_1 (Str_1_Par_Ref[Int_Loc],
     304/    4930 : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     305/    493C : (MACRO)             	alu2 R10,R11,R7,add,adc	;ADDP2(reg,reg)
     306/    4946 : (MACRO)             	ldn1 R12,R10	;opt14*
     307/    4948 : (MACRO)             	zExt R12 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
     308/    494B : (MACRO)             	incm R11,1
     309/    494C : (MACRO)             	alu2 R11,R11,R6,add,adc	;ADDP2(reg,reg)
     310/    4956 : (MACRO)             	ldn1 R13,R11	;opt14*
     311/    4958 : (MACRO)             	zExt R13 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
     312/    495B : (MACRO)             	Ccall _Func_1; CALLI2(ar)
     313/    495F : (MACRO)             	jnzU2 R15,L34; NE 0
     314/    4967 :                     ;    {
     315/    4967 :                     ;      Ch_Loc = 'A';
     316/    4967 : (MACRO)             	ldA2 R11,'O',sp,(9+1); reg:addr
     317/    496F : (MACRO)             	str1I 65,R11; ASGNU1(indaddr,acon)	DH
     318/    4972 :                     ;      Int_Loc += 1;
     319/    4972 : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     320/    497E : (MACRO)             	incm R11,1
     321/    497F : (MACRO)             	st2 R11,'O',sp,(10+1); ASGNI2(addr,reg)
     322/    498C :                     ;    } /* if, while */
     323/    498C :                     L34:
     324/    498C :                     L32:
     325/    498C :                     ;  while (Int_Loc <= 2) /* loop body executed once */
     326/    498C : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     327/    4998 : (MACRO)             	jnI2I R11,2,lbdf,L31 ;LEI2 2 11 L31; LE is flipped test & subtraction
     328/    49A9 :                     ;  if (Ch_Loc >= 'W' && Ch_Loc < 'Z')
     329/    49A9 : (MACRO)             	ld1 R11,'O',sp,(9+1)
     330/    49B3 : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
     331/    49B6 : (MACRO)             	jcI2I R11,87,lbnf,L36  ;LT=lbnf i.e. subtract immedB from A and jump if borrow J2020-7
     332/    49C7 : (MACRO)             	jcI2I R11,90,lbdf,L36; GE is flipped test from LT
     333/    49D8 :                     ;    Int_Loc = 7;
     334/    49D8 : (MACRO)             	st2I 7,'O',sp,(10+1); ASGNI2(addr,acon)
     335/    49E7 :                     L36:
     336/    49E7 :                     ;  if (Ch_Loc == 'R')
     337/    49E7 : (MACRO)             	ld1 R11,'O',sp,(9+1)
     338/    49F1 : (MACRO)             	jneU1I R11,82,L38	; DH 4
     339/    49F7 :                     ;    return (true);
     340/    49F7 : (MACRO)             	ldaD R15,1; reg:acon
     341/    49FD : C0 4A 62            	lbr L30
     342/    4A00 :                     L38:
     343/    4A00 :                     ;  {
     344/    4A00 :                     ;    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
     345/    4A00 : (MACRO)             	cpy2 R12,R7 ;LOADP2(reg)
     346/    4A04 : (MACRO)             	cpy2 R13,R6 ;LOADP2(reg)
     347/    4A08 : (MACRO)             	Ccall _strcmp; CALLI2(ar)
     348/    4A0C : (MACRO)             	jnI2I R15,0,lbdf,L40 ;LEI2 0 15 L40; LE is flipped test & subtraction
     349/    4A1D :                     ;    {
     350/    4A1D :                     ;      Int_Loc += 7;
     351/    4A1D : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     352/    4A29 : (MACRO)             	ldA2 R11,'O',R11,(7); reg:addr
     353/    4A31 : (MACRO)             	st2 R11,'O',sp,(10+1); ASGNI2(addr,reg)
     354/    4A3E :                     ;      Int_Glob = Int_Loc;
     355/    4A3E : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRI2(addr)
     356/    4A4A : (MACRO)             	st2 R11,'D',(_Int_Glob),0; ASGNI2(addr,reg)
     357/    4A55 :                     ;      return (true);
     358/    4A55 : (MACRO)             	ldaD R15,1; reg:acon
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 7 - 10/28/2020 10:49:19


     359/    4A5B : C0 4A 62            	lbr L30
     360/    4A5E :                     L40:
     361/    4A5E :                     ;      return (false);
     362/    4A5E : (MACRO)             	ld2z R15; reg:con0
     363/    4A62 :                     L30:
     364/    4A62 : (MACRO)             	release 4; release room for outgoing arguments
     365/    4A66 : (MACRO)             	popr R7
     366/    4A6B : (MACRO)             	popr R6
     367/    4A70 : (MACRO)             	release 4; release room for local variables 
     368/    4A74 : (MACRO)             	Cretn
     369/    4A76 :                     
     370/    4A76 :                     ;;function_end$$ _Func_2
     371/    4A76 :                     ;;function_start _Func_3 int function(int)
     372/    4A76 :                     _Func_3:		;framesize=4
     373/    4A76 : (MACRO)             	reserve 2
     374/    4A78 :                     ;{
     375/    4A78 :                     ;  Enum_Loc = Enum_Par_Val;
     376/    4A78 : (MACRO)             	st2 R12,'O',sp,(0+1); ASGNI2(addr,reg)
     377/    4A85 :                     ;  if (Enum_Loc == Ident_3)
     378/    4A85 : (MACRO)             	ld2 R11,'O',sp,(0+1) ;reg:INDIRI2(addr)
     379/    4A91 : (MACRO)             	jneU2I R11,2,L43; NE
     380/    4A9D :                     ;    return (true);
     381/    4A9D : (MACRO)             	ldaD R15,1; reg:acon
     382/    4AA3 : C0 4A AA            	lbr L42
     383/    4AA6 :                     L43:
     384/    4AA6 :                     ;    return (false);
     385/    4AA6 : (MACRO)             	ld2z R15; reg:con0
     386/    4AAA :                     L42:
     387/    4AAA : (MACRO)             	release 2
     388/    4AAC : (MACRO)             	Cretn
     389/    4AAE :                     
     390/    4AAE :                     ;;function_end$$ _Func_3
     391/    4AAE :                     ;;function_start _main int function(void)
     392/    4AAE :                     _main: ;copt is peeping your size 88 frame with 2020-7 vision
     393/    4AAE : (MACRO)             	reserve 74; save room for local variables
     394/    4AB8 : (MACRO)             	pushr R6
     395/    4ABC : (MACRO)             	pushr R7
     396/    4AC0 : (MACRO)             	reserve 8; save room for outgoing arguments
     397/    4AC8 :                     ;{
     398/    4AC8 :                     ;  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     399/    4AC8 : (MACRO)             	ldaD R12,39; reg:acon
     400/    4ACE : (MACRO)             	Ccall _malloc
     401/    4AD2 : (MACRO)             	st2 R15,'D',(_Next_Ptr_Glob),0; ASGNP2(addr,reg)
     402/    4ADD :                     ;  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     403/    4ADD : (MACRO)             	ldaD R12,39; reg:acon
     404/    4AE3 : (MACRO)             	Ccall _malloc
     405/    4AE7 : (MACRO)             	st2 R15,'D',(_Ptr_Glob),0; ASGNP2(addr,reg)
     406/    4AF2 :                     ;  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
     407/    4AF2 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     408/    4AFC : (MACRO)             	ld2 R10,'D',(_Next_Ptr_Glob),0 ;reg:INDIRP2(addr)
     409/    4B06 : (MACRO)             	str2 R10,R11	;opt5 ASGNP2
     410/    4B0C :                     ;  Ptr_Glob->Discr                       = Ident_1;
     411/    4B0C : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     412/    4B16 : (MACRO)             	st2I 0,'O',R11,(2); ASGNI2(addr,acon)
     413/    4B25 :                     ;  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
     414/    4B25 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     415/    4B2F : (MACRO)             	st2I 2,'O',R11,(4); ASGNI2(addr,acon)
     416/    4B3E :                     ;  Ptr_Glob->variant.var_1.Int_Comp      = 40;
     417/    4B3E : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     418/    4B48 : (MACRO)             	st2I 40,'O',R11,(6); ASGNI2(addr,acon)
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 8 - 10/28/2020 10:49:19


     419/    4B57 :                     ;  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     420/    4B57 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     421/    4B61 : (MACRO)             	ldA2 R12,'O',R11,(8); reg:addr
     422/    4B69 : (MACRO)             	ldaD R13,L46; reg:acon
     423/    4B6F : (MACRO)             	Ccall _strcpy
     424/    4B73 :                     ;  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
     425/    4B73 : (MACRO)             	ldA2 R12,'O',sp,(16+1); reg:addr
     426/    4B7B : (MACRO)             	ldaD R13,L47; reg:acon
     427/    4B81 : (MACRO)             	Ccall _strcpy
     428/    4B85 :                     ;  Arr_2_Glob [8][7] = 10;
     429/    4B85 : (MACRO)             	st2I 10,'D',(_Arr_2_Glob+800+14),0; ASGNI2(addr,acon)
     430/    4B92 :                     ;  printf("Arr_2_Glob[8][7]:%x=%d\n",Arr_2_Glob,Arr_2_Glob[8][7]),
     431/    4B92 : (MACRO)             	ldaD R12,L50; reg:acon
     432/    4B98 : (MACRO)             	ldaD R13,_Arr_2_Glob; reg:acon
     433/    4B9E : (MACRO)             	ld2 R11,'D',(_Arr_2_Glob+800+14),0 ;reg:INDIRI2(addr)
     434/    4BA8 : (MACRO)             	st2 R11,'O',sp,(4+1); arg+f**
     435/    4BB5 : (MACRO)             	Ccall _printf
     436/    4BB9 : (MACRO)             	ldaD R12,L53; reg:acon
     437/    4BBF : (MACRO)             	Ccall _printf
     438/    4BC3 :                     ;  printf ("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
     439/    4BC3 : (MACRO)             	ldaD R12,L54; reg:acon
     440/    4BC9 : (MACRO)             	Ccall _printf
     441/    4BCD :                     ;  printf ("\n");
     442/    4BCD : (MACRO)             	ldaD R12,L53; reg:acon
     443/    4BD3 : (MACRO)             	Ccall _printf
     444/    4BD7 :                     ;  if (Reg)
     445/    4BD7 : (MACRO)             	ld2 R11,'D',(_Reg),0 ;reg:INDIRI2(addr)
     446/    4BE1 : (MACRO)             	jzU2 R11,L55; EQ I 0
     447/    4BE9 :                     ;  {
     448/    4BE9 :                     ;    printf ("Program compiled with 'register' attribute\n");
     449/    4BE9 : (MACRO)             	ldaD R12,L57; reg:acon
     450/    4BEF : (MACRO)             	Ccall _printf
     451/    4BF3 :                     ;    printf ("\n");
     452/    4BF3 : (MACRO)             	ldaD R12,L53; reg:acon
     453/    4BF9 : (MACRO)             	Ccall _printf
     454/    4BFD :                     ;  }
     455/    4BFD : C0 4C 14            	lbr L56
     456/    4C00 :                     L55:
     457/    4C00 :                     ;  {
     458/    4C00 :                     ;    printf ("Program compiled without 'register' attribute\n");
     459/    4C00 : (MACRO)             	ldaD R12,L58; reg:acon
     460/    4C06 : (MACRO)             	Ccall _printf
     461/    4C0A :                     ;    printf ("\n");
     462/    4C0A : (MACRO)             	ldaD R12,L53; reg:acon
     463/    4C10 : (MACRO)             	Ccall _printf
     464/    4C14 :                     ;  }
     465/    4C14 :                     L56:
     466/    4C14 :                     ;  printf ("Please give the number of runs through the benchmark: ");
     467/    4C14 : (MACRO)             	ldaD R12,L59; reg:acon
     468/    4C1A : (MACRO)             	Ccall _printf
     469/    4C1E :                     ;  {
     470/    4C1E :                     ;    n=1000; //scanf ("%d", &n);
     471/    4C1E : (MACRO)             	st2I 1000,'O',sp,(12+1); ASGNI2(addr,acon)
     472/    4C2D :                     ;    Number_Of_Runs = n;
     473/    4C2D : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
     474/    4C39 : (MACRO)             	st2 R11,'O',sp,(14+1); ASGNI2(addr,reg)
     475/    4C46 :                     ;  }
     476/    4C46 :                     ;  printf ("\n");
     477/    4C46 : (MACRO)             	ldaD R12,L53; reg:acon
     478/    4C4C : (MACRO)             	Ccall _printf
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 9 - 10/28/2020 10:49:19


     479/    4C50 :                     ;  printf ("Execution starts, %d runs through Dhrystone !@#\n", Number_Of_Runs);
     480/    4C50 : (MACRO)             	ldaD R12,L60; reg:acon
     481/    4C56 : (MACRO)             	ld2 R13,'O',sp,(14+1) ;reg:INDIRI2(addr)
     482/    4C62 : (MACRO)             	Ccall _printf
     483/    4C66 :                     ;  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
     484/    4C66 : (MACRO)             	st2I 1,'O',sp,(78+1); ASGNI2(addr,acon)
     485/    4C75 : C0 4F 2D            	lbr L64
     486/    4C78 :                     L61:
     487/    4C78 :                     ;  {
     488/    4C78 :                     ;    Proc_5();
     489/    4C78 : (MACRO)             	Ccall _Proc_5; CALLI2(ar)
     490/    4C7C :                     ;    Proc_4();
     491/    4C7C : (MACRO)             	Ccall _Proc_4; CALLI2(ar)
     492/    4C80 :                     ;    Int_1_Loc = 2;
     493/    4C80 : (MACRO)             	st2I 2,'O',sp,(84+1); ASGNI2(addr,acon)
     494/    4C8F :                     ;    Int_2_Loc = 3;
     495/    4C8F : (MACRO)             	ldaD R7,3; reg:acon
     496/    4C95 :                     ;    strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
     497/    4C95 : (MACRO)             	ldA2 R12,'O',sp,(47+1); reg:addr
     498/    4C9D : (MACRO)             	ldaD R13,L65; reg:acon
     499/    4CA3 : (MACRO)             	Ccall _strcpy
     500/    4CA7 :                     ;    Enum_Loc = Ident_2;
     501/    4CA7 : (MACRO)             	st2I 1,'O',sp,(80+1); ASGNI2(addr,acon)
     502/    4CB6 :                     ;    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
     503/    4CB6 : (MACRO)             	ldA2 R12,'O',sp,(16+1); reg:addr
     504/    4CBE : (MACRO)             	ldA2 R13,'O',sp,(47+1); reg:addr
     505/    4CC6 : (MACRO)             	Ccall _Func_2; CALLI2(ar)
     506/    4CCA : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     507/    4CCE : (MACRO)             	jnzU2 R11,L67; NE 0
     508/    4CD6 : (MACRO)             	st2I 1,'O',sp,(12+1); ASGNI2(addr,acon)
     509/    4CE5 : C0 4C F7            	lbr L68
     510/    4CE8 :                     L67:
     511/    4CE8 : (MACRO)             	st2I 0,'O',sp,(12+1); ASGNI2(addr,acon)
     512/    4CF7 :                     L68:
     513/    4CF7 : (MACRO)             	mvc2 R11,'D',(_Bool_Glob),0,'O',sp,(12+1)	;opt12
     514/    4D0A : C0 4D 8D            	lbr L70
     515/    4D0D :                     L69:
     516/    4D0D :                     ;    {	//dbgprintf("while\n");
     517/    4D0D :                     ;      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
     518/    4D0D : (MACRO)             	ld2 R13,'O',sp,(84+1) ;reg:INDIRI2(addr)
     519/    4D19 :                     	;inline multiplication by a constant 5
     520/    4D19 : (MACRO)             	cpy2 R15,R13
     521/    4D1D : (MACRO)             	shl2I	R13,1
     522/    4D23 : (MACRO)             	shl2I	R13,1
     523/    4D29 : (MACRO)             	alu2 R15,R15,R13,add,adc
     524/    4D33 : (MACRO)             	alu2 R11,R15,R7,sm,smb
     525/    4D3D : (MACRO)             	st2 R11,'O',sp,(82+1); ASGNI2(addr,reg)
     526/    4D4A :                     ;      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
     527/    4D4A : (MACRO)             	ld2 R12,'O',sp,(84+1) ;reg:INDIRI2(addr)
     528/    4D56 : (MACRO)             	cpy2 R13,R7 ;LOADI2(reg)
     529/    4D5A : (MACRO)             	ldA2 R11,'O',sp,(82+1); reg:addr
     530/    4D62 : (MACRO)             	st2 R11,'O',sp,(4+1); arg+f**
     531/    4D6F : (MACRO)             	Ccall _Proc_7; CALLI2(ar)
     532/    4D73 :                     ;      Int_1_Loc += 1;
     533/    4D73 : (MACRO)             	ld2 R11,'O',sp,(84+1) ;reg:INDIRI2(addr)
     534/    4D7F : (MACRO)             	incm R11,1
     535/    4D80 : (MACRO)             	st2 R11,'O',sp,(84+1); ASGNI2(addr,reg)
     536/    4D8D :                     ;    } /* while */
     537/    4D8D :                     L70:
     538/    4D8D :                     ;    while (Int_1_Loc < Int_2_Loc)  /* loop body executed once */
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 10 - 10/28/2020 10:49:19


     539/    4D8D : (MACRO)             	ld2 R11,'O',sp,(84+1) ;reg:INDIRI2(addr)
     540/    4D99 : (MACRO)             	jcI2 R11,R7,lbnf,L69; LT=lbnf i.e. subtract B from A and jump if borrow 
     541/    4DAB :                     ;    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
     542/    4DAB : (MACRO)             	ldaD R12,_Arr_1_Glob; reg:acon
     543/    4DB1 : (MACRO)             	ldaD R13,_Arr_2_Glob; reg:acon
     544/    4DB7 : (MACRO)             	mvc2 R11,'O',sp,(4+1),'O',sp,(84+1)	;opt12.1
     545/    4DCC : (MACRO)             	mvc2 R11,'O',sp,(6+1),'O',sp,(82+1)	;opt12.2
     546/    4DE1 : (MACRO)             	Ccall _Proc_8; CALLI2(ar)
     547/    4DE5 :                     ;    Proc_1 (Ptr_Glob);
     548/    4DE5 : (MACRO)             	ld2 R12,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     549/    4DEF : (MACRO)             	Ccall _Proc_1; CALLI2(ar)
     550/    4DF3 :                     ;    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     551/    4DF3 : (MACRO)             	ldaD R6,65; reg:acon
     552/    4DF9 : C0 4E 6F            	lbr L75
     553/    4DFC :                     L72:
     554/    4DFC :                     ;    {
     555/    4DFC :                     ;      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
     556/    4DFC : (MACRO)             	cpy1 R12,R6
     557/    4DFE : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     558/    4E01 : (MACRO)             	ldaD R13,67; reg:acon
     559/    4E07 : (MACRO)             	Ccall _Func_1; CALLI2(ar)
     560/    4E0B : (MACRO)             	ld2 R10,'O',sp,(80+1) ;reg:INDIRI2(addr)
     561/    4E17 : (MACRO)             	jneU2 R10,R15,L76; NE
     562/    4E29 :                     ;        {
     563/    4E29 :                     ;        Proc_6 (Ident_1, &Enum_Loc);
     564/    4E29 : (MACRO)             	ld2z R12; reg:con0
     565/    4E2D : (MACRO)             	ldA2 R13,'O',sp,(80+1); reg:addr
     566/    4E35 : (MACRO)             	Ccall _Proc_6; CALLI2(ar)
     567/    4E39 :                     ;        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
     568/    4E39 : (MACRO)             	ldA2 R12,'O',sp,(47+1); reg:addr
     569/    4E41 : (MACRO)             	ldaD R13,L78; reg:acon
     570/    4E47 : (MACRO)             	Ccall _strcpy
     571/    4E4B :                     ;        Int_2_Loc = Run_Index;
     572/    4E4B : (MACRO)             	ld2 R7,'O',sp,(78+1) ;reg:INDIRI2(addr)
     573/    4E57 :                     ;        Int_Glob = Run_Index;
     574/    4E57 : (MACRO)             	ld2 R11,'O',sp,(78+1) ;reg:INDIRI2(addr)
     575/    4E63 : (MACRO)             	st2 R11,'D',(_Int_Glob),0; ASGNI2(addr,reg)
     576/    4E6E :                     ;        }
     577/    4E6E :                     L76:
     578/    4E6E :                     ;    }
     579/    4E6E :                     L73:
     580/    4E6E :                     ;    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     581/    4E6E : (MACRO)             	incm R6,1	;opt 20-2 unsigned char for loop increment
     582/    4E6F :                     L75:
     583/    4E6F : (MACRO)             	ldaD R11,_Ch_2_Glob; reg:acon
     584/    4E75 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     585/    4E77 : (MACRO)             	jcU1 R11,R6,lbdf,L72 ;LE is flipped test & operands **opt 20**
     586/    4E7E :                     ;    Int_2_Loc = Int_2_Loc * Int_1_Loc;
     587/    4E7E : (MACRO)             	cpy2 R12,R7 ;LOADI2(reg)
     588/    4E82 : (MACRO)             	ld2 R13,'O',sp,(84+1) ;reg:INDIRI2(addr)
     589/    4E8E : (MACRO)             	Ccall _mulu2; MULI2(reg,reg)
     590/    4E92 : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)
     591/    4E96 :                     ;    Int_1_Loc = Int_2_Loc / Int_3_Loc;
     592/    4E96 : (MACRO)             	cpy2 R12,R7 ;LOADI2(reg)
     593/    4E9A : (MACRO)             	ld2 R13,'O',sp,(82+1) ;reg:INDIRI2(addr)
     594/    4EA6 : (MACRO)             	Ccall _divi2
     595/    4EAA : (MACRO)             	st2 R15,'O',sp,(84+1); ASGNI2(addr,reg)
     596/    4EB7 :                     ;    Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;
     597/    4EB7 : (MACRO)             	ld2 R11,'O',sp,(82+1) ;reg:INDIRI2(addr)
     598/    4EC3 : (MACRO)             	alu2 R13,R7,R11,sm,smb
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 11 - 10/28/2020 10:49:19


     599/    4ECD :                     	;inline multiplication by a constant 7
     600/    4ECD : (MACRO)             	cpy2 R15,R13
     601/    4ED1 : (MACRO)             	shl2I	R13,1
     602/    4ED7 : (MACRO)             	alu2 R15,R15,R13,add,adc
     603/    4EE1 : (MACRO)             	shl2I	R13,1
     604/    4EE7 : (MACRO)             	alu2 R15,R15,R13,add,adc
     605/    4EF1 : (MACRO)             	ld2 R10,'O',sp,(84+1) ;reg:INDIRI2(addr)
     606/    4EFD : (MACRO)             	alu2 R7,R15,R10,sm,smb
     607/    4F07 :                     ;    Proc_2 (&Int_1_Loc);
     608/    4F07 : (MACRO)             	ldA2 R12,'O',sp,(84+1); reg:addr
     609/    4F0F : (MACRO)             	Ccall _Proc_2; CALLI2(ar)
     610/    4F13 :                     ;  } /* loop "for Run_Index" */
     611/    4F13 :                     L62:
     612/    4F13 :                     ;  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
     613/    4F13 : (MACRO)             	ld2 R11,'O',sp,(78+1) ;reg:INDIRI2(addr)
     614/    4F1F : (MACRO)             	incm R11,1
     615/    4F20 : (MACRO)             	st2 R11,'O',sp,(78+1); ASGNI2(addr,reg)
     616/    4F2D :                     L64:
     617/    4F2D : (MACRO)             	ld2 R11,'O',sp,(78+1) ;reg:INDIRI2(addr)
     618/    4F39 : (MACRO)             	ld2 R10,'O',sp,(14+1) ;reg:INDIRI2(addr)
     619/    4F45 : (MACRO)             	jcI2 R10,R11,lbdf,L61 ;LE is flipped test & operands
     620/    4F57 :                     ;  printf ("Execution ends!@#\n");
     621/    4F57 : (MACRO)             	ldaD R12,L79; reg:acon
     622/    4F5D : (MACRO)             	Ccall _printf
     623/    4F61 :                     ;  printf ("\n");
     624/    4F61 : (MACRO)             	ldaD R12,L53; reg:acon
     625/    4F67 : (MACRO)             	Ccall _printf
     626/    4F6B :                     ;  printf ("Final values of the variables used in the benchmark:\n");
     627/    4F6B : (MACRO)             	ldaD R12,L80; reg:acon
     628/    4F71 : (MACRO)             	Ccall _printf
     629/    4F75 :                     ;  printf ("\n");
     630/    4F75 : (MACRO)             	ldaD R12,L53; reg:acon
     631/    4F7B : (MACRO)             	Ccall _printf
     632/    4F7F :                     ;  printf ("Int_Glob:            %d\n", Int_Glob);
     633/    4F7F : (MACRO)             	ldaD R12,L81; reg:acon
     634/    4F85 : (MACRO)             	ld2 R13,'D',(_Int_Glob),0 ;reg:INDIRI2(addr)
     635/    4F8F : (MACRO)             	Ccall _printf
     636/    4F93 :                     ;  printf ("        should be:   %d\n", 5);
     637/    4F93 : (MACRO)             	ldaD R12,L82; reg:acon
     638/    4F99 : (MACRO)             	ldaD R13,5; reg:acon
     639/    4F9F : (MACRO)             	Ccall _printf
     640/    4FA3 :                     ;  printf ("Bool_Glob:           %d\n", Bool_Glob);
     641/    4FA3 : (MACRO)             	ldaD R12,L83; reg:acon
     642/    4FA9 : (MACRO)             	ld2 R13,'D',(_Bool_Glob),0 ;reg:INDIRI2(addr)
     643/    4FB3 : (MACRO)             	Ccall _printf
     644/    4FB7 :                     ;  printf ("        should be:   %d\n", 1);
     645/    4FB7 : (MACRO)             	ldaD R12,L82; reg:acon
     646/    4FBD : (MACRO)             	ldaD R13,1; reg:acon
     647/    4FC3 : (MACRO)             	Ccall _printf
     648/    4FC7 :                     ;  printf ("Ch_1_Glob:           %c\n", Ch_1_Glob);
     649/    4FC7 : (MACRO)             	ldaD R12,L84; reg:acon
     650/    4FCD : (MACRO)             	ld1 R13,'D',(_Ch_1_Glob),0
     651/    4FD5 : (MACRO)             	zExt R13 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
     652/    4FD8 : (MACRO)             	Ccall _printf
     653/    4FDC :                     ;  printf ("        should be:   %c\n", 'A');
     654/    4FDC : (MACRO)             	ldaD R12,L85; reg:acon
     655/    4FE2 : (MACRO)             	ldaD R13,65; reg:acon
     656/    4FE8 : (MACRO)             	Ccall _printf
     657/    4FEC :                     ;  printf ("Ch_2_Glob:           %c\n", Ch_2_Glob);
     658/    4FEC : (MACRO)             	ldaD R12,L86; reg:acon
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 12 - 10/28/2020 10:49:19


     659/    4FF2 : (MACRO)             	ld1 R13,'D',(_Ch_2_Glob),0
     660/    4FFA : (MACRO)             	zExt R13 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
     661/    4FFD : (MACRO)             	Ccall _printf
     662/    5001 :                     ;  printf ("        should be:   %c\n", 'B');
     663/    5001 : (MACRO)             	ldaD R12,L85; reg:acon
     664/    5007 : (MACRO)             	ldaD R13,66; reg:acon
     665/    500D : (MACRO)             	Ccall _printf
     666/    5011 :                     ;  printf ("Arr_1_Glob[8]:       %d\n", Arr_1_Glob[8]);
     667/    5011 : (MACRO)             	ldaD R12,L87; reg:acon
     668/    5017 : (MACRO)             	ld2 R13,'D',(_Arr_1_Glob+16),0 ;reg:INDIRI2(addr)
     669/    5021 : (MACRO)             	Ccall _printf
     670/    5025 :                     ;  printf ("        should be:   %d\n", 7);
     671/    5025 : (MACRO)             	ldaD R12,L82; reg:acon
     672/    502B : (MACRO)             	ldaD R13,7; reg:acon
     673/    5031 : (MACRO)             	Ccall _printf
     674/    5035 :                     ;  printf ("Arr_2_Glob[8][7]:    %d\n", Arr_2_Glob[8][7]);
     675/    5035 : (MACRO)             	ldaD R12,L89; reg:acon
     676/    503B : (MACRO)             	ld2 R13,'D',(_Arr_2_Glob+800+14),0 ;reg:INDIRI2(addr)
     677/    5045 : (MACRO)             	Ccall _printf
     678/    5049 :                     ;  printf ("        should be:   Number_Of_Runs + 10\n");
     679/    5049 : (MACRO)             	ldaD R12,L92; reg:acon
     680/    504F : (MACRO)             	Ccall _printf
     681/    5053 :                     ;  printf ("Ptr_Glob->\n");
     682/    5053 : (MACRO)             	ldaD R12,L93; reg:acon
     683/    5059 : (MACRO)             	Ccall _printf
     684/    505D :                     ;  printf ("  Ptr_Comp:          %d\n", (int) Ptr_Glob->Ptr_Comp);
     685/    505D : (MACRO)             	ldaD R12,L94; reg:acon
     686/    5063 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     687/    506D : (MACRO)             	ldn2s R11,R11	;opt9xs
     688/    5074 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     689/    5078 : (MACRO)             	Ccall _printf
     690/    507C :                     ;  printf ("        should be:   (implementation-dependent)\n");
     691/    507C : (MACRO)             	ldaD R12,L95; reg:acon
     692/    5082 : (MACRO)             	Ccall _printf
     693/    5086 :                     ;  printf ("  Discr:             %d\n", Ptr_Glob->Discr);
     694/    5086 : (MACRO)             	ldaD R12,L96; reg:acon
     695/    508C : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     696/    5096 : (MACRO)             	ld2 R13,'O',R11,(2) ;reg:INDIRI2(addr)
     697/    50A2 : (MACRO)             	Ccall _printf
     698/    50A6 :                     ;  printf ("        should be:   %d\n", 0);
     699/    50A6 : (MACRO)             	ldaD R12,L82; reg:acon
     700/    50AC : (MACRO)             	ld2z R13; reg:con0
     701/    50B0 : (MACRO)             	Ccall _printf
     702/    50B4 :                     ;  printf ("  Enum_Comp:         %d\n", Ptr_Glob->variant.var_1.Enum_Comp);
     703/    50B4 : (MACRO)             	ldaD R12,L97; reg:acon
     704/    50BA : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     705/    50C4 : (MACRO)             	ld2 R13,'O',R11,(4) ;reg:INDIRI2(addr)
     706/    50D0 : (MACRO)             	Ccall _printf
     707/    50D4 :                     ;  printf ("        should be:   %d\n", 2);
     708/    50D4 : (MACRO)             	ldaD R12,L82; reg:acon
     709/    50DA : (MACRO)             	ldaD R13,2; reg:acon
     710/    50E0 : (MACRO)             	Ccall _printf
     711/    50E4 :                     ;  printf ("  Int_Comp:          %d\n", Ptr_Glob->variant.var_1.Int_Comp);
     712/    50E4 : (MACRO)             	ldaD R12,L98; reg:acon
     713/    50EA : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     714/    50F4 : (MACRO)             	ld2 R13,'O',R11,(6) ;reg:INDIRI2(addr)
     715/    5100 : (MACRO)             	Ccall _printf
     716/    5104 :                     ;  printf ("        should be:   %d\n", 17);
     717/    5104 : (MACRO)             	ldaD R12,L82; reg:acon
     718/    510A : (MACRO)             	ldaD R13,17; reg:acon
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 13 - 10/28/2020 10:49:19


     719/    5110 : (MACRO)             	Ccall _printf
     720/    5114 :                     ;  printf ("  Str_Comp:          %s\n", Ptr_Glob->variant.var_1.Str_Comp);
     721/    5114 : (MACRO)             	ldaD R12,L99; reg:acon
     722/    511A : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     723/    5124 : (MACRO)             	ldA2 R13,'O',R11,(8); reg:addr
     724/    512C : (MACRO)             	Ccall _printf
     725/    5130 :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
     726/    5130 : (MACRO)             	ldaD R12,L100; reg:acon
     727/    5136 : (MACRO)             	Ccall _printf
     728/    513A :                     ;  printf ("Next_Ptr_Glob->\n");
     729/    513A : (MACRO)             	ldaD R12,L101; reg:acon
     730/    5140 : (MACRO)             	Ccall _printf
     731/    5144 :                     ;  printf ("  Ptr_Comp:          %d\n", (int) Next_Ptr_Glob->Ptr_Comp);
     732/    5144 : (MACRO)             	ldaD R12,L94; reg:acon
     733/    514A : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 ;reg:INDIRP2(addr)
     734/    5154 : (MACRO)             	ldn2s R11,R11	;opt9xs
     735/    515B : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     736/    515F : (MACRO)             	Ccall _printf
     737/    5163 :                     ;  printf ("        should be:   (implementation-dependent), same as above\n");
     738/    5163 : (MACRO)             	ldaD R12,L102; reg:acon
     739/    5169 : (MACRO)             	Ccall _printf
     740/    516D :                     ;  printf ("  Discr:             %d\n", Next_Ptr_Glob->Discr);
     741/    516D : (MACRO)             	ldaD R12,L96; reg:acon
     742/    5173 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 ;reg:INDIRP2(addr)
     743/    517D : (MACRO)             	ld2 R13,'O',R11,(2) ;reg:INDIRI2(addr)
     744/    5189 : (MACRO)             	Ccall _printf
     745/    518D :                     ;  printf ("        should be:   %d\n", 0);
     746/    518D : (MACRO)             	ldaD R12,L82; reg:acon
     747/    5193 : (MACRO)             	ld2z R13; reg:con0
     748/    5197 : (MACRO)             	Ccall _printf
     749/    519B :                     ;  printf ("  Enum_Comp:         %d\n", Next_Ptr_Glob->variant.var_1.Enum_Comp);
     750/    519B : (MACRO)             	ldaD R12,L97; reg:acon
     751/    51A1 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 ;reg:INDIRP2(addr)
     752/    51AB : (MACRO)             	ld2 R13,'O',R11,(4) ;reg:INDIRI2(addr)
     753/    51B7 : (MACRO)             	Ccall _printf
     754/    51BB :                     ;  printf ("        should be:   %d\n", 1);
     755/    51BB : (MACRO)             	ldaD R12,L82; reg:acon
     756/    51C1 : (MACRO)             	ldaD R13,1; reg:acon
     757/    51C7 : (MACRO)             	Ccall _printf
     758/    51CB :                     ;  printf ("  Int_Comp:          %d\n", Next_Ptr_Glob->variant.var_1.Int_Comp);
     759/    51CB : (MACRO)             	ldaD R12,L98; reg:acon
     760/    51D1 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 ;reg:INDIRP2(addr)
     761/    51DB : (MACRO)             	ld2 R13,'O',R11,(6) ;reg:INDIRI2(addr)
     762/    51E7 : (MACRO)             	Ccall _printf
     763/    51EB :                     ;  printf ("        should be:   %d\n", 18);
     764/    51EB : (MACRO)             	ldaD R12,L82; reg:acon
     765/    51F1 : (MACRO)             	ldaD R13,18; reg:acon
     766/    51F7 : (MACRO)             	Ccall _printf
     767/    51FB :                     ;  printf ("  Str_Comp:          %s\n",
     768/    51FB : (MACRO)             	ldaD R12,L99; reg:acon
     769/    5201 : (MACRO)             	ld2 R11,'D',(_Next_Ptr_Glob),0 ;reg:INDIRP2(addr)
     770/    520B : (MACRO)             	ldA2 R13,'O',R11,(8); reg:addr
     771/    5213 : (MACRO)             	Ccall _printf
     772/    5217 :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
     773/    5217 : (MACRO)             	ldaD R12,L100; reg:acon
     774/    521D : (MACRO)             	Ccall _printf
     775/    5221 :                     ;  printf ("Int_1_Loc:           %d\n", Int_1_Loc);
     776/    5221 : (MACRO)             	ldaD R12,L103; reg:acon
     777/    5227 : (MACRO)             	ld2 R13,'O',sp,(84+1) ;reg:INDIRI2(addr)
     778/    5233 : (MACRO)             	Ccall _printf
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 14 - 10/28/2020 10:49:19


     779/    5237 :                     ;  printf ("        should be:   %d\n", 5);
     780/    5237 : (MACRO)             	ldaD R12,L82; reg:acon
     781/    523D : (MACRO)             	ldaD R13,5; reg:acon
     782/    5243 : (MACRO)             	Ccall _printf
     783/    5247 :                     ;  printf ("Int_2_Loc:           %d\n", Int_2_Loc);
     784/    5247 : (MACRO)             	ldaD R12,L104; reg:acon
     785/    524D : (MACRO)             	cpy2 R13,R7 ;LOADI2(reg)
     786/    5251 : (MACRO)             	Ccall _printf
     787/    5255 :                     ;  printf ("        should be:   %d\n", 13);
     788/    5255 : (MACRO)             	ldaD R12,L82; reg:acon
     789/    525B : (MACRO)             	ldaD R13,13; reg:acon
     790/    5261 : (MACRO)             	Ccall _printf
     791/    5265 :                     ;  printf ("Int_3_Loc:           %d\n", Int_3_Loc);
     792/    5265 : (MACRO)             	ldaD R12,L105; reg:acon
     793/    526B : (MACRO)             	ld2 R13,'O',sp,(82+1) ;reg:INDIRI2(addr)
     794/    5277 : (MACRO)             	Ccall _printf
     795/    527B :                     ;  printf ("        should be:   %d\n", 7);
     796/    527B : (MACRO)             	ldaD R12,L82; reg:acon
     797/    5281 : (MACRO)             	ldaD R13,7; reg:acon
     798/    5287 : (MACRO)             	Ccall _printf
     799/    528B :                     ;  printf ("Enum_Loc:            %d\n", Enum_Loc);
     800/    528B : (MACRO)             	ldaD R12,L106; reg:acon
     801/    5291 : (MACRO)             	ld2 R13,'O',sp,(80+1) ;reg:INDIRI2(addr)
     802/    529D : (MACRO)             	Ccall _printf
     803/    52A1 :                     ;  printf ("        should be:   %d\n", 1);
     804/    52A1 : (MACRO)             	ldaD R12,L82; reg:acon
     805/    52A7 : (MACRO)             	ldaD R13,1; reg:acon
     806/    52AD : (MACRO)             	Ccall _printf
     807/    52B1 :                     ;  printf ("Str_1_Loc:           %s\n", Str_1_Loc);
     808/    52B1 : (MACRO)             	ldaD R12,L107; reg:acon
     809/    52B7 : (MACRO)             	ldA2 R13,'O',sp,(16+1); reg:addr
     810/    52BF : (MACRO)             	Ccall _printf
     811/    52C3 :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, 1'ST STRING\n");
     812/    52C3 : (MACRO)             	ldaD R12,L108; reg:acon
     813/    52C9 : (MACRO)             	Ccall _printf
     814/    52CD :                     ;  printf ("Str_2_Loc:           %s\n", Str_2_Loc);
     815/    52CD : (MACRO)             	ldaD R12,L109; reg:acon
     816/    52D3 : (MACRO)             	ldA2 R13,'O',sp,(47+1); reg:addr
     817/    52DB : (MACRO)             	Ccall _printf
     818/    52DF :                     ;  printf ("        should be:   DHRYSTONE PROGRAM, 2'ND STRING\n");
     819/    52DF : (MACRO)             	ldaD R12,L110; reg:acon
     820/    52E5 : (MACRO)             	Ccall _printf
     821/    52E9 :                     ;  printf ("done\n");
     822/    52E9 : (MACRO)             	ldaD R12,L111; reg:acon
     823/    52EF : (MACRO)             	Ccall _printf
     824/    52F3 : (MACRO)             	ld2z R15; reg:con0
     825/    52F7 :                     ;}
     826/    52F7 :                     L45:
     827/    52F7 : (MACRO)             	release 8; release room for outgoing arguments
     828/    52FF : (MACRO)             	popr R7
     829/    5304 : (MACRO)             	popr R6
     830/    5309 : (MACRO)             	release 74; release room for local variables 
     831/    5311 : (MACRO)             	Cretn
     832/    5313 :                     
     833/    5313 :                     ;;function_end$$ _main
     834/    5313 :                     ;;function_start _Proc_1 int function(pointer to struct record)
     835/    5313 :                     _Proc_1:		;framesize=12
     836/    5313 : (MACRO)             	pushr R6
     837/    5317 : (MACRO)             	pushr R7
     838/    531B : (MACRO)             	reserve 6; save room for outgoing arguments
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 15 - 10/28/2020 10:49:19


     839/    5321 : (MACRO)             	cpy2 R7,R12; function(2055) 1
     840/    5325 :                     ;{
     841/    5325 :                     ;  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
     842/    5325 : (MACRO)             	ldn2 R6,R7	;opt9x
     843/    532A :                     ;  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     844/    532A : (MACRO)             	ldn2 R11,R7	;opt9x
     845/    532F : (MACRO)             	ld2 R8,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     846/    5339 : (MACRO)             	blkcpy R11,R8,39; ASGNB(reg,INDIRB(reg))
     847/    534E :                     ;  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
     848/    534E : (MACRO)             	st2I 5,'O',R7,(6); ASGNI2(addr,acon)
     849/    535D :                     ;  Next_Record->variant.var_1.Int_Comp
     850/    535D : (MACRO)             	ld2 R11,'O',R7,(6) ;reg:INDIRI2(addr)
     851/    5369 : (MACRO)             	st2 R11,'O',R6,(6); ASGNI2(addr,reg)
     852/    5376 :                     ;  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
     853/    5376 : (MACRO)             	mvcn2 R6,R7	;opt12x
     854/    537D :                     ;  Proc_3 (&Next_Record->Ptr_Comp);
     855/    537D : (MACRO)             	cpy2 R12,R6 ;LOADP2(reg)
     856/    5381 : (MACRO)             	Ccall _Proc_3; CALLI2(ar)
     857/    5385 :                     ;  if (Next_Record->Discr == Ident_1)
     858/    5385 : (MACRO)             	ld2 R11,'O',R6,(2) ;reg:INDIRI2(addr)
     859/    5391 : (MACRO)             	jnzU2 R11,L113; NE 0
     860/    5399 :                     ;  {
     861/    5399 :                     ;    Next_Record->variant.var_1.Int_Comp = 6;
     862/    5399 : (MACRO)             	st2I 6,'O',R6,(6); ASGNI2(addr,acon)
     863/    53A8 :                     ;    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp,
     864/    53A8 : (MACRO)             	ld2 R12,'O',R7,(4) ;reg:INDIRI2(addr)
     865/    53B4 : (MACRO)             	cpy2 R13,R6
     866/    53B8 : (MACRO)             	incm R13,4
     867/    53BC : (MACRO)             	Ccall _Proc_6; CALLI2(ar)
     868/    53C0 :                     ;    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
     869/    53C0 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     870/    53CA : (MACRO)             	mvcn2 R6,R11	;opt12xs
     871/    53D1 :                     ;    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10,
     872/    53D1 : (MACRO)             	ldA2 R11,'O',R6,(6); reg:addr
     873/    53D9 : (MACRO)             	ldn2 R12,R11	;opt9x
     874/    53DE : (MACRO)             	ldaD R13,10; reg:acon
     875/    53E4 : (MACRO)             	st2 R11,'O',sp,(4+1); arg+f**
     876/    53F1 : (MACRO)             	Ccall _Proc_7; CALLI2(ar)
     877/    53F5 :                     ;  }
     878/    53F5 : C0 54 12            	lbr L114
     879/    53F8 :                     L113:
     880/    53F8 :                     ;    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
     881/    53F8 : (MACRO)             	ldn2 R8,R7	;opt9x
     882/    53FD : (MACRO)             	blkcpy R7,R8,39; ASGNB(reg,INDIRB(reg))
     883/    5412 :                     L114:
     884/    5412 : (MACRO)             	ld2z R15; reg:con0
     885/    5416 :                     ;} /* Proc_1 */
     886/    5416 :                     L112:
     887/    5416 : (MACRO)             	release 6; release room for outgoing arguments
     888/    541C : (MACRO)             	popr R7
     889/    5421 : (MACRO)             	popr R6
     890/    5426 : (MACRO)             	Cretn
     891/    5428 :                     
     892/    5428 :                     ;;function_end$$ _Proc_1
     893/    5428 :                     ;;function_start _Proc_2 int function(pointer to int)
     894/    5428 :                     _Proc_2:		;framesize=6
     895/    5428 : (MACRO)             	pushr R6
     896/    542C : (MACRO)             	pushr R7
     897/    5430 :                     ;{
     898/    5430 :                     ;  Int_Loc = *Int_Par_Ref + 10;
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 16 - 10/28/2020 10:49:19


     899/    5430 : (MACRO)             	ldn2 R11,R12	;opt9x
     900/    5435 : (MACRO)             	ldA2 R6,'O',R11,(10); reg:addr
     901/    543D :                     L116:
     902/    543D :                     ;    if (Ch_1_Glob == 'A')
     903/    543D : (MACRO)             	ldaD R11,_Ch_1_Glob; reg:acon
     904/    5443 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     905/    5445 : (MACRO)             	jneU1I R11,65,L119	; DH 4
     906/    544B :                     ;    {
     907/    544B :                     ;      Int_Loc -= 1;
     908/    544B : (MACRO)             	decm R6,1	;SUBI2(reg,consm)
     909/    544C :                     ;      *Int_Par_Ref = Int_Loc - Int_Glob;
     910/    544C : (MACRO)             	ld2 R11,'D',(_Int_Glob),0 ;reg:INDIRI2(addr)
     911/    5456 : (MACRO)             	alu2 R11,R6,R11,sm,smb
     912/    5460 : (MACRO)             	str2 R11,R12	;opt5 ASGNI2
     913/    5466 :                     ;      Enum_Loc = Ident_1;
     914/    5466 : (MACRO)             	ld2z R7; reg:con0
     915/    546A :                     ;    } /* if */
     916/    546A :                     L119:
     917/    546A :                     L117:
     918/    546A :                     ;  while (Enum_Loc != Ident_1); /* true */
     919/    546A : (MACRO)             	jnzU2 R7,L116; NE 0
     920/    5472 : (MACRO)             	ld2z R15; reg:con0
     921/    5476 :                     ;} /* Proc_2 */
     922/    5476 :                     L115:
     923/    5476 : (MACRO)             	popr R7
     924/    547B : (MACRO)             	popr R6
     925/    5480 : (MACRO)             	Cretn
     926/    5482 :                     
     927/    5482 :                     ;;function_end$$ _Proc_2
     928/    5482 :                     ;;function_start _Proc_3 int function(pointer to pointer to struct record)
     929/    5482 :                     _Proc_3:		;framesize=8
     930/    5482 : (MACRO)             	reserve 6
     931/    5488 : (MACRO)             	st2 R12,'O',sp,(8+1); flag1 
     932/    5495 :                     ;{
     933/    5495 :                     ;  if (Ptr_Glob != Null)
     934/    5495 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     935/    549F : (MACRO)             	jzU2 R11,L122; EQ U 0
     936/    54A7 :                     ;    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
     937/    54A7 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRP2(addr)
     938/    54B3 : (MACRO)             	ld2 R10,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     939/    54BD : (MACRO)             	mvcn2 R11,R10	;opt12xs:
     940/    54C4 :                     L122:
     941/    54C4 :                     ;  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
     942/    54C4 : (MACRO)             	ldaD R12,10; reg:acon
     943/    54CA : (MACRO)             	ld2 R13,'D',(_Int_Glob),0 ;reg:INDIRI2(addr)
     944/    54D4 : (MACRO)             	ld2 R11,'D',(_Ptr_Glob),0 ;reg:INDIRP2(addr)
     945/    54DE : (MACRO)             	ldA2 R11,'O',R11,(6); reg:addr
     946/    54E6 : (MACRO)             	st2 R11,'O',sp,(4+1); arg+f**
     947/    54F3 : (MACRO)             	Ccall _Proc_7; CALLI2(ar)
     948/    54F7 : (MACRO)             	ld2z R15; reg:con0
     949/    54FB :                     ;} /* Proc_3 */
     950/    54FB :                     L121:
     951/    54FB : (MACRO)             	release 6
     952/    5501 : (MACRO)             	Cretn
     953/    5503 :                     
     954/    5503 :                     ;;function_end$$ _Proc_3
     955/    5503 :                     ;;function_start _Proc_4 int function(void)
     956/    5503 :                     _Proc_4:		;framesize=6
     957/    5503 : (MACRO)             	reserve 2; save room for local variables
     958/    5505 : (MACRO)             	pushr R7
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 17 - 10/28/2020 10:49:19


     959/    5509 :                     ;{
     960/    5509 :                     ;  Bool_Loc = Ch_1_Glob == 'A';
     961/    5509 : (MACRO)             	ldaD R11,_Ch_1_Glob; reg:acon
     962/    550F : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     963/    5511 : (MACRO)             	jneU1I R11,65,L126	; DH 4
     964/    5517 : (MACRO)             	ldaD R7,1; reg:acon
     965/    551D : C0 55 24            	lbr L127
     966/    5520 :                     L126:
     967/    5520 : (MACRO)             	ld2z R7; reg:con0
     968/    5524 :                     L127:
     969/    5524 : (MACRO)             	st2 R7,'O',sp,(2+1); ASGNI2(addr,reg)
     970/    5531 :                     ;  Bool_Glob = Bool_Loc | Bool_Glob;
     971/    5531 : (MACRO)             	ld2 R11,'O',sp,(2+1) ;reg:INDIRI2(addr)
     972/    553D : (MACRO)             	ld2 R10,'D',(_Bool_Glob),0 ;reg:INDIRI2(addr)
     973/    5547 : (MACRO)             	alu2 R11,R11,R10,or,or
     974/    5551 : (MACRO)             	st2 R11,'D',(_Bool_Glob),0; ASGNI2(addr,reg)
     975/    555C :                     ;  Ch_2_Glob = 'B';
     976/    555C : (MACRO)             	ldaD R11,_Ch_2_Glob; reg:acon
     977/    5562 : (MACRO)             	str1I 66,R11; ASGNU1(indaddr,acon)	DH
     978/    5565 : (MACRO)             	ld2z R15; reg:con0
     979/    5569 :                     ;} /* Proc_4 */
     980/    5569 :                     L124:
     981/    5569 : (MACRO)             	popr R7
     982/    556E : (MACRO)             	release 2; release room for local variables 
     983/    5570 : (MACRO)             	Cretn
     984/    5572 :                     
     985/    5572 :                     ;;function_end$$ _Proc_4
     986/    5572 :                     ;;function_start _Proc_5 int function(void)
     987/    5572 :                     _Proc_5:		;framesize=2
     988/    5572 :                     ;{
     989/    5572 :                     ;  Ch_1_Glob = 'A';
     990/    5572 : (MACRO)             	ldaD R11,_Ch_1_Glob; reg:acon
     991/    5578 : (MACRO)             	str1I 65,R11; ASGNU1(indaddr,acon)	DH
     992/    557B :                     ;  Bool_Glob = false;
     993/    557B : (MACRO)             	st2I 0,'D',(_Bool_Glob),0; ASGNI2(addr,acon)
     994/    5588 : (MACRO)             	ld2z R15; reg:con0
     995/    558C :                     ;} /* Proc_5 */
     996/    558C :                     L128:
     997/    558C : (MACRO)             	Cretn
     998/    558E :                     
     999/    558E :                     ;;function_end$$ _Proc_5
    1000/    558E :                     ;;function_start _strncmp int function(pointer to const char,pointer to const char,unsigned int)
    1001/    558E :                     _strncmp:		;framesize=6
    1002/    558E : (MACRO)             	pushr R6
    1003/    5592 : (MACRO)             	pushr R7
    1004/    5596 : (MACRO)             	ld2 R7,'O',sp,(10+1) ;reg:INDIRU2(addr)
    1005/    55A2 :                     ;{
    1006/    55A2 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1007/    55A2 : C0 55 FF            	lbr L133
    1008/    55A5 :                     L130:
    1009/    55A5 :                     ;	if (*s1 != *s2)
    1010/    55A5 : (MACRO)             	ldn1 R11,R12	;opt14*
    1011/    55A7 : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1012/    55AA : (MACRO)             	ldn1 R10,R13	;opt14*
    1013/    55AC : (MACRO)             	zExt R10 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1014/    55AF : (MACRO)             	jeqI2 R11,R10,L134; EQI2(reg,reg)
    1015/    55BD :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    1016/    55BD : (MACRO)             	ldn1 R11,R12	;opt14*
    1017/    55BF : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1018/    55C2 : (MACRO)             	ldn1 R10,R13	;opt14*
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 18 - 10/28/2020 10:49:19


    1019/    55C4 : (MACRO)             	zExt R10 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1020/    55C7 : (MACRO)             	jcI2 R11,R10,lbdf,L137; GE is flipped test from LT
    1021/    55D9 : (MACRO)             	ldaD R6,-1; reg:acon
    1022/    55DF : C0 55 E8            	lbr L138
    1023/    55E2 :                     L137:
    1024/    55E2 : (MACRO)             	ldaD R6,1; reg:acon
    1025/    55E8 :                     L138:
    1026/    55E8 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)
    1027/    55EC : C0 56 0B            	lbr L129
    1028/    55EF :                     L134:
    1029/    55EF :                     ;	else if (*s1 == '\0')
    1030/    55EF : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1031/    55F1 : (MACRO)             	jnzU1 R11,L139; NEI2(CVUI2(reg),con0)
    1032/    55F5 :                     ;	    return 0;
    1033/    55F5 : (MACRO)             	ld2z R15; reg:con0
    1034/    55F9 : C0 56 0B            	lbr L129
    1035/    55FC :                     L139:
    1036/    55FC :                     L131:
    1037/    55FC :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1038/    55FC : (MACRO)             	incm R12,1
    1039/    55FD : (MACRO)             	incm R13,1
    1040/    55FE : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
    1041/    55FF :                     L133:
    1042/    55FF : (MACRO)             	jnzU2 R7,L130; NE 0 
    1043/    5607 :                     ;    return 0;
    1044/    5607 : (MACRO)             	ld2z R15; reg:con0
    1045/    560B :                     L129:
    1046/    560B : (MACRO)             	popr R7
    1047/    5610 : (MACRO)             	popr R6
    1048/    5615 : (MACRO)             	Cretn
    1049/    5617 :                     
    1050/    5617 :                     ;;function_end$$ _strncmp
    1051/    5617 :                     ;;function_start _strlen unsigned int function(pointer to char)
    1052/    5617 :                     _strlen:		;framesize=4
    1053/    5617 : (MACRO)             	pushr R7
    1054/    561B :                     ;{
    1055/    561B :                     ;	unsigned int slen = 0 ;
    1056/    561B : (MACRO)             	ld2z R7; reg:con0
    1057/    561F : C0 56 24            	lbr L143
    1058/    5622 :                     L142:
    1059/    5622 :                     ;	while (*str != 0) {
    1060/    5622 :                     ;      slen++ ;
    1061/    5622 : (MACRO)             	incm R7,1
    1062/    5623 :                     ;      str++ ;
    1063/    5623 : (MACRO)             	incm R12,1
    1064/    5624 :                     ;   }
    1065/    5624 :                     L143:
    1066/    5624 :                     ;	while (*str != 0) {
    1067/    5624 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1068/    5626 : (MACRO)             	jnzU1 R11,L142; NEI2(CVUI2(reg),con0)
    1069/    562A :                     ;   return slen;
    1070/    562A : (MACRO)             	cpy2 R15,R7 ;LOADU2*(reg)
    1071/    562E :                     L141:
    1072/    562E : (MACRO)             	popr R7
    1073/    5633 : (MACRO)             	Cretn
    1074/    5635 :                     
    1075/    5635 :                     ;;function_end$$ _strlen
    1076/    5635 :                     ;;function_start _printstr void function(pointer to char)
    1077/    5635 :                     _printstr:		;framesize=8
    1078/    5635 : (MACRO)             	pushr R7
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 19 - 10/28/2020 10:49:19


    1079/    5639 : (MACRO)             	reserve 4; save room for outgoing arguments
    1080/    563D : (MACRO)             	cpy2 R7,R12; function(2055) 1
    1081/    5641 :                     ;void printstr(char *ptr){
    1082/    5641 : C0 56 58            	lbr L147
    1083/    5644 :                     L146:
    1084/    5644 :                     ;    while(*ptr){
    1085/    5644 :                     ;		putc(*ptr++); //jan 29
    1086/    5644 : (MACRO)             	ldaD R12,7; reg:acon
    1087/    564A : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) ;opt1.1
    1088/    564E : (MACRO)             	incm R7,1
    1089/    564F : (MACRO)             	ldn1 R13,R11	;opt14*
    1090/    5651 : (MACRO)             	zExt R13 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1091/    5654 : (MACRO)             	Ccall _out; CALLI2(ar)
    1092/    5658 :                     ;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
    1093/    5658 : (MACRO)              nop1806
    1094/    5658 : (MACRO)              nop1806
    1095/    5658 : (MACRO)              nop1806
    1096/    5658 :                     ;	}
    1097/    5658 :                     L147:
    1098/    5658 :                     ;    while(*ptr){
    1099/    5658 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1100/    565A : (MACRO)             	jnzU1 R11,L146; NEI2(CVUI2(reg),con0)
    1101/    565E :                     ;}
    1102/    565E :                     L145:
    1103/    565E : (MACRO)             	release 4; release room for outgoing arguments
    1104/    5662 : (MACRO)             	popr R7
    1105/    5667 : (MACRO)             	Cretn
    1106/    5669 :                     
    1107/    5669 :                     ;;function_end$$ _printstr
    1108/    5669 :                     ;;function_start _itoa pointer to char function(int,pointer to char)
    1109/    5669 :                     _itoa:		;framesize=16
    1110/    5669 : (MACRO)             	reserve 6; save room for local variables
    1111/    566F : (MACRO)             	pushr R6
    1112/    5673 : (MACRO)             	pushr R7
    1113/    5677 : (MACRO)             	reserve 4; save room for outgoing arguments
    1114/    567B : (MACRO)             	st2 R12,'O',sp,(16+1)			
    1115/    5688 : 1E                  	inc memaddr				;opt16.1
    1116/    5689 : (MACRO)             	str2 R13,memaddr			
    1117/    568F :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1118/    568F :                     ;	unsigned int flag=0;
    1119/    568F : (MACRO)             	ld2z R11; reg:con0
    1120/    5693 : (MACRO)             	st2 R11,'O',sp,(10+1); ASGNU2(addr,reg)
    1121/    56A0 :                     ;	char * bptr; bptr=buffer;
    1122/    56A0 : (MACRO)             	ld2 R11,'O',sp,(18+1) ;reg:INDIRP2(addr)
    1123/    56AC : (MACRO)             	st2 R11,'O',sp,(8+1); ASGNP2(addr,reg)
    1124/    56B9 :                     ;	if (s<0){
    1125/    56B9 : (MACRO)             	ld2 R11,'O',sp,(16+1) ;reg:INDIRI2(addr)
    1126/    56C5 : (MACRO)             	jcI2I R11,0,lbdf,L151; GE is flipped test from LT
    1127/    56D6 :                     ;		*bptr='-';bptr++;
    1128/    56D6 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRP2(addr)
    1129/    56E2 : (MACRO)             	str1I 45,R11; ASGNU1(indaddr,acon)	DH
    1130/    56E5 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRP2(addr)
    1131/    56F1 : (MACRO)             	incm R11,1
    1132/    56F2 : (MACRO)             	st2 R11,'O',sp,(8+1); ASGNP2(addr,reg)
    1133/    56FF :                     ;		n=-s;
    1134/    56FF : (MACRO)             	ld2 R11,'O',sp,(16+1) ;reg:INDIRI2(addr)
    1135/    570B : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    1136/    5714 : (MACRO)             	cpy2 R6,R11 ;LOADU2*(reg)
    1137/    5718 :                     ;	} else{
    1138/    5718 : C0 57 2B            	lbr L152
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 20 - 10/28/2020 10:49:19


    1139/    571B :                     L151:
    1140/    571B :                     ;		n=s;
    1141/    571B : (MACRO)             	ld2 R11,'O',sp,(16+1) ;reg:INDIRI2(addr)
    1142/    5727 : (MACRO)             	cpy2 R6,R11 ;LOADU2*(reg)
    1143/    572B :                     ;	}
    1144/    572B :                     L152:
    1145/    572B :                     ;	k=10000;
    1146/    572B : (MACRO)             	ldaD R7,10000; reg:acon
    1147/    5731 : C0 58 0E            	lbr L154
    1148/    5734 :                     L153:
    1149/    5734 :                     ;	while(k>0){
    1150/    5734 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1151/    5734 : (MACRO)             	ld2z R11; reg:con0
    1152/    5738 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNU2(addr,reg)
    1153/    5745 : C0 57 6C            	lbr L159
    1154/    5748 :                     L156:
    1155/    5748 :                     L157:
    1156/    5748 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRU2(addr)
    1157/    5754 : (MACRO)             	incm R11,1
    1158/    5755 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNU2(addr,reg)
    1159/    5762 : (MACRO)             	alu2 R6,R6,R7,sm,smb
    1160/    576C :                     L159:
    1161/    576C : (MACRO)             	jcU2 R6,R7,lbdf,L156 ;LE is flipped test & operands
    1162/    5779 :                     ;		if (flag || r>0||k==1){
    1163/    5779 : (MACRO)             	ld2 R11,'O',sp,(10+1) ;reg:INDIRU2(addr)
    1164/    5785 : (MACRO)             	jnzU2 R11,L163; NE 0 
    1165/    578D : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRU2(addr)
    1166/    5799 : (MACRO)             	jnzU2 R11,L163; NE 0 
    1167/    57A1 : (MACRO)             	jneU2I R7,1,L160; NE
    1168/    57AD :                     L163:
    1169/    57AD :                     ;			*bptr=('0'+r);bptr++;
    1170/    57AD : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRP2(addr)
    1171/    57B9 : (MACRO)             	ld2 R10,'O',sp,(12+1) ;reg:INDIRU2(addr)
    1172/    57C5 : (MACRO)             	ldA2 R10,'O',R10,(48); reg:addr
    1173/    57CD : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH*
    1174/    57CF : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRP2(addr)
    1175/    57DB : (MACRO)             	incm R11,1
    1176/    57DC : (MACRO)             	st2 R11,'O',sp,(8+1); ASGNP2(addr,reg)
    1177/    57E9 :                     ;			flag='y';
    1178/    57E9 : (MACRO)             	ldaD R11,121; reg:acon
    1179/    57EF : (MACRO)             	st2 R11,'O',sp,(10+1); ASGNU2(addr,reg)
    1180/    57FC :                     ;		}
    1181/    57FC :                     L160:
    1182/    57FC :                     ;		k=k/10;
    1183/    57FC : (MACRO)             	cpy2 R12,R7 ;LOADU2*(reg)
    1184/    5800 : (MACRO)             	ldaD R13,10; reg:acon
    1185/    5806 : (MACRO)             	Ccall _divu2
    1186/    580A : (MACRO)             	cpy2 R7,R15 ;LOADU2*(reg)
    1187/    580E :                     ;	}
    1188/    580E :                     L154:
    1189/    580E :                     ;	while(k>0){
    1190/    580E : (MACRO)             	jnzU2 R7,L153; NE 0 
    1191/    5816 :                     ;	*bptr='\0';
    1192/    5816 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRP2(addr)
    1193/    5822 : (MACRO)             	str1I 0,R11; ASGNU1(indaddr,acon)	DH
    1194/    5825 :                     ;	return buffer;
    1195/    5825 : (MACRO)             	ld2 R15,'O',sp,(18+1) ;reg:INDIRP2(addr)
    1196/    5831 :                     L150:
    1197/    5831 : (MACRO)             	release 4; release room for outgoing arguments
    1198/    5835 : (MACRO)             	popr R7
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 21 - 10/28/2020 10:49:19


    1199/    583A : (MACRO)             	popr R6
    1200/    583F : (MACRO)             	release 6; release room for local variables 
    1201/    5845 : (MACRO)             	Cretn
    1202/    5847 :                     
    1203/    5847 :                     ;;function_end$$ _itoa
    1204/    5847 :                     ;;function_start _ltoa pointer to char function(long int,pointer to char)
    1205/    5847 :                     _ltoa:		;framesize=16
    1206/    5847 : (MACRO)             	reserve 2; save room for local variables
    1207/    5849 : (MACRO)             	pushr R6
    1208/    584D : (MACRO)             	pushr R7
    1209/    5851 : (MACRO)             	reserve 8; save room for outgoing arguments
    1210/    5859 : (MACRO)             	cpy4 RL6,RL12; halfbaked
    1211/    5861 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1212/    5861 :                     ;	char* bptr=buffer;
    1213/    5861 : (MACRO)             	ld2 R11,'O',sp,(20+1) ;reg:INDIRP2(addr)
    1214/    586D : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNP2(addr,reg)
    1215/    587A :                     ;	if (s<0){
    1216/    587A : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    1217/    5886 : (MACRO)             	jcI4 RL6,RL10,lbdf,L165; GE is flipped test from LT
    1218/    58A2 :                     ;		*bptr++='-';
    1219/    58A2 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
    1220/    58AE : (MACRO)             	cpy2 R10,R11
    1221/    58B2 : (MACRO)             	incm R10,1
    1222/    58B3 : (MACRO)             	st2 R10,'O',sp,(12+1); ASGNP2(addr,reg)
    1223/    58C0 : (MACRO)             	str1I 45,R11; ASGNU1(indaddr,acon)	DH
    1224/    58C3 :                     ;		s=-s;
    1225/    58C3 : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
    1226/    58E3 :                     ;	}
    1227/    58E3 :                     L165:
    1228/    58E3 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    1229/    58E3 : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
    1230/    58EB : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
    1231/    58F7 : (MACRO)             	st2 R11,'O',sp,(4+1); arg+f**
    1232/    5904 : (MACRO)             	ldaD R11,1; reg:acon
    1233/    590A : (MACRO)             	st2 R11,'O',sp,(6+1); arg+f**
    1234/    5917 : (MACRO)             	Ccall _dubdabx
    1235/    591B : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1236/    591F : (MACRO)             	ld2 R12,'O',sp,(12+1) ;reg:INDIRP2(addr)
    1237/    592B : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1238/    592F : (MACRO)             	Ccall _strcpy
    1239/    5933 :                     ;	return buffer;
    1240/    5933 : (MACRO)             	ld2 R15,'O',sp,(20+1) ;reg:INDIRP2(addr)
    1241/    593F :                     L164:
    1242/    593F : (MACRO)             	release 8; release room for outgoing arguments
    1243/    5947 : (MACRO)             	popr R7
    1244/    594C : (MACRO)             	popr R6
    1245/    5951 : (MACRO)             	release 2; release room for local variables 
    1246/    5953 : (MACRO)             	Cretn
    1247/    5955 :                     
    1248/    5955 :                     ;;function_end$$ _ltoa
    1249/    5955 :                     ;;function_start _printint void function(int)
    1250/    5955 :                     _printint:		;framesize=14
    1251/    5955 : (MACRO)             	reserve 12
    1252/    595F : (MACRO)             	st2 R12,'O',sp,(14+1); flag1 
    1253/    596C :                     ;void printint(int s){ //print an integer
    1254/    596C :                     ;	itoa(s,buffer);
    1255/    596C : (MACRO)             	ld2 R12,'O',sp,(14+1) ;reg:INDIRI2(addr)
    1256/    5978 : (MACRO)             	ldA2 R13,'O',sp,(4+1); reg:addr
    1257/    5980 : (MACRO)             	Ccall _itoa
    1258/    5984 :                     ;	printstr(buffer);
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 22 - 10/28/2020 10:49:19


    1259/    5984 : (MACRO)             	ldA2 R12,'O',sp,(4+1); reg:addr
    1260/    598C : (MACRO)             	Ccall _printstr
    1261/    5990 :                     ;}
    1262/    5990 :                     L167:
    1263/    5990 : (MACRO)             	release 12
    1264/    5998 : (MACRO)             	Cretn
    1265/    599A :                     
    1266/    599A :                     ;;function_end$$ _printint
    1267/    599A :                     ;;function_start _printlint void function(long int)
    1268/    599A :                     _printlint:		;framesize=20
    1269/    599A : (MACRO)             	reserve 18
    1270/    59A4 : (MACRO)             	st2 R12,'O',sp,(20+1)			
    1271/    59B1 : 1E                  	inc memaddr				;opt16.1
    1272/    59B2 : (MACRO)             	str2 R13,memaddr			
    1273/    59B8 :                     ;void printlint(long s){ //print a long integer
    1274/    59B8 :                     ;	printstr(ltoa(s,buffer));
    1275/    59B8 : (MACRO)             	ld4 Rp1p2,'O',sp,(20+1);reg:  INDIRI4(addr)
    1276/    59C8 : (MACRO)             	ldA2 R11,'O',sp,(6+1); reg:addr
    1277/    59D0 : (MACRO)             	st2 R11,'O',sp,(4+1); arg+f**
    1278/    59DD : (MACRO)             	Ccall _ltoa
    1279/    59E1 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1280/    59E5 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1281/    59E9 : (MACRO)             	Ccall _printstr
    1282/    59ED :                     ;}
    1283/    59ED :                     L168:
    1284/    59ED : (MACRO)             	release 18
    1285/    59F5 : (MACRO)             	Cretn
    1286/    59F7 :                     
    1287/    59F7 :                     ;;function_end$$ _printlint
    1288/    59F7 :                     ;;function_start _putxn void function(unsigned char)
    1289/    59F7 :                     _putxn:		;framesize=6
    1290/    59F7 : (MACRO)             	reserve 4
    1291/    59FB : (MACRO)             	st1 R12,'O',sp,(6+1); flag1 opt 2020-7.1
    1292/    5A05 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1293/    5A05 :                     ;	if (x<10){
    1294/    5A05 : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1295/    5A0F : (MACRO)             	jcI1I R11,10,lbdf,L170; GE is flipped test from LT J2020-4
    1296/    5A15 :                     ;		putc(x+'0');
    1297/    5A15 : (MACRO)             	ldaD R12,7; reg:acon
    1298/    5A1B : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1299/    5A25 : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1300/    5A28 : (MACRO)             	ldA2 R13,'O',R11,(48); reg:addr
    1301/    5A30 : (MACRO)             	Ccall _out; CALLI2(ar)
    1302/    5A34 :                     ;	} else {
    1303/    5A34 : C0 5A 5E            	lbr L171
    1304/    5A37 :                     L170:
    1305/    5A37 :                     ;		putc(x+'A'-10);
    1306/    5A37 : (MACRO)             	ldaD R12,7; reg:acon
    1307/    5A3D : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1308/    5A47 : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1309/    5A4A : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    1310/    5A52 : (MACRO)             	alu2I R13,R11,10,smi,smbi
    1311/    5A5A : (MACRO)             	Ccall _out; CALLI2(ar)
    1312/    5A5E :                     ;	}
    1313/    5A5E :                     L171:
    1314/    5A5E :                     ;}
    1315/    5A5E :                     L169:
    1316/    5A5E : (MACRO)             	release 4
    1317/    5A62 : (MACRO)             	Cretn
    1318/    5A64 :                     
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 23 - 10/28/2020 10:49:19


    1319/    5A64 :                     ;;function_end$$ _putxn
    1320/    5A64 :                     ;;function_start _putx void function(unsigned char)
    1321/    5A64 :                     _putx:		;framesize=6
    1322/    5A64 : (MACRO)             	reserve 4
    1323/    5A68 : (MACRO)             	st1 R12,'O',sp,(6+1); flag1 opt 2020-7.1
    1324/    5A72 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1325/    5A72 :                     ;	putxn(x>>4);
    1326/    5A72 : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1327/    5A7C : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1328/    5A7F : (MACRO)             	shrI2I R11,4
    1329/    5A9F : (MACRO)             	cpy1 R12,R11
    1330/    5AA1 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1331/    5AA4 : (MACRO)             	Ccall _putxn
    1332/    5AA8 :                     ;	putxn(x & 0x0F);
    1333/    5AA8 : (MACRO)             	ld1 R11,'O',sp,(6+1)
    1334/    5AB2 : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1335/    5AB5 : (MACRO)             	alu2I R11,R11,15,ani,ani
    1336/    5ABD :                     	;removed ?	cpy2 R11,R11
    1337/    5ABD : (MACRO)             	cpy1 R12,R11
    1338/    5ABF : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1339/    5AC2 : (MACRO)             	Ccall _putxn
    1340/    5AC6 :                     ;}
    1341/    5AC6 :                     L172:
    1342/    5AC6 : (MACRO)             	release 4
    1343/    5ACA : (MACRO)             	Cretn
    1344/    5ACC :                     
    1345/    5ACC :                     ;;function_end$$ _putx
    1346/    5ACC :                     ;;function_start _printf void function(pointer to char,...)
    1347/    5ACC :                     _printf:		;framesize=18
    1348/    5ACC : (MACRO)             	reserve 8; save room for local variables
    1349/    5AD4 : (MACRO)             	pushr R6
    1350/    5AD8 : (MACRO)             	pushr R7
    1351/    5ADC : (MACRO)             	reserve 4; save room for outgoing arguments
    1352/    5AE0 : (MACRO)             	st2 R12,'O',sp,(18+1)			
    1353/    5AED : 1E                  	inc memaddr				;opt16
    1354/    5AEE : (MACRO)             	str2 R13,memaddr			
    1355/    5AF4 :                     ;void printf(char *pptr,...){ //limited implementation of printf
    1356/    5AF4 :                     ;	register char* ptr=pptr; //try to save on loads/spills
    1357/    5AF4 : (MACRO)             	ld2 R7,'O',sp,(18+1) ;reg:INDIRP2(addr)
    1358/    5B00 :                     ;	int argslot=0;	//used to align longs
    1359/    5B00 : (MACRO)             	st2I 0,'O',sp,(12+1); ASGNI2(addr,acon)
    1360/    5B0F :                     ;	int * this=(int *)&pptr;
    1361/    5B0F : (MACRO)             	ldA2 R11,'O',sp,(18+1); reg:addr
    1362/    5B17 : (MACRO)             	st2 R11,'O',sp,(14+1); ASGNP2(addr,reg)
    1363/    5B24 :                     ;	this++; argslot++; //advance argument pointer and slot #
    1364/    5B24 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1365/    5B30 : (MACRO)             	incm R11,2
    1366/    5B32 : (MACRO)             	st2 R11,'O',sp,(14+1); ASGNP2(addr,reg)
    1367/    5B3F : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1368/    5B4B : (MACRO)             	incm R11,1
    1369/    5B4C : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNI2(addr,reg)
    1370/    5B59 : C0 5F A0            	lbr L175
    1371/    5B5C :                     L174:
    1372/    5B5C :                     ;    while(*ptr) {
    1373/    5B5C :                     ;		c=*ptr; ptr++;
    1374/    5B5C : (MACRO)             	ldn1 R6,R7;reg:  INDIRU1(indaddr)
    1375/    5B5E : (MACRO)             	incm R7,1
    1376/    5B5F :                     ;		if (c!='%'){
    1377/    5B5F : (MACRO)             	jeqU1I R6,37,L177;EQI2(CVUI2(reg),con8bit)**opt20**
    1378/    5B65 :                     ;			putc(c);
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 24 - 10/28/2020 10:49:19


    1379/    5B65 : (MACRO)             	ldaD R12,7; reg:acon
    1380/    5B6B : (MACRO)             	cpy1 R13,R6
    1381/    5B6D : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1382/    5B70 : (MACRO)             	Ccall _out; CALLI2(ar)
    1383/    5B74 :                     ;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
    1384/    5B74 : (MACRO)              nop1806
    1385/    5B74 : (MACRO)              nop1806
    1386/    5B74 : (MACRO)              nop1806
    1387/    5B74 :                     ;		} else{
    1388/    5B74 : C0 5F A0            	lbr L178
    1389/    5B77 :                     L177:
    1390/    5B77 :                     ;			c=*ptr;ptr++;
    1391/    5B77 : (MACRO)             	ldn1 R6,R7;reg:  INDIRU1(indaddr)
    1392/    5B79 : (MACRO)             	incm R7,1
    1393/    5B7A :                     ;			switch (c){
    1394/    5B7A : (MACRO)             	cpy1 R11,R6
    1395/    5B7C : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1396/    5B7F : (MACRO)             	st2 R11,'O',sp,(9+1); ASGNI2(addr,reg) -removing reg:INDIRI2(addr) opt2020-1 
    1397/    5B8C : (MACRO)             	jeqU2I R11,105,L183;EQI2(reg,con)
    1398/    5B98 : (MACRO)             	ldaD R10,108; reg:acon
    1399/    5B9E : (MACRO)             	jeqI2 R11,R10,L189; EQI2(reg,reg)
    1400/    5BAC : (MACRO)             	jcI2 R10,R11,lbnf,L197 ;GT is reversed operands from LT
    1401/    5BBE :                     L196:
    1402/    5BBE : (MACRO)             	ld2 R11,'O',sp,(9+1) ;reg:INDIRI2(addr)
    1403/    5BCA : (MACRO)             	ldaD R10,88; reg:acon
    1404/    5BD0 : (MACRO)             	jeqI2 R11,R10,L188; EQI2(reg,reg)
    1405/    5BDE : (MACRO)             	jcI2 R11,R10,lbnf,L180; LT=lbnf i.e. subtract B from A and jump if borrow 
    1406/    5BF0 :                     L198:
    1407/    5BF0 : (MACRO)             	ld2 R11,'O',sp,(9+1) ;reg:INDIRI2(addr)
    1408/    5BFC : (MACRO)             	jeqU2I R11,99,L185;EQI2(reg,con)
    1409/    5C08 : (MACRO)             	jeqU2I R11,100,L183;EQI2(reg,con)
    1410/    5C14 : C0 5F 81            	lbr L180
    1411/    5C17 :                     L197:
    1412/    5C17 : (MACRO)             	ld2 R11,'O',sp,(9+1) ;reg:INDIRI2(addr)
    1413/    5C23 : (MACRO)             	ldaD R10,115; reg:acon
    1414/    5C29 : (MACRO)             	jeqI2 R11,R10,L184; EQI2(reg,reg)
    1415/    5C37 : (MACRO)             	jcI2 R11,R10,lbnf,L180; LT=lbnf i.e. subtract B from A and jump if borrow 
    1416/    5C49 :                     L199:
    1417/    5C49 : (MACRO)             	ld2 R11,'O',sp,(9+1) ;reg:INDIRI2(addr)
    1418/    5C55 : (MACRO)             	jeqU2I R11,120,L188;EQI2(reg,con)
    1419/    5C61 : C0 5F 81            	lbr L180
    1420/    5C64 :                     L183:
    1421/    5C64 :                     ;					printint(*this++);
    1422/    5C64 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1423/    5C70 : (MACRO)             	cpy2 R10,R11
    1424/    5C74 : (MACRO)             	incm R10,2
    1425/    5C76 : (MACRO)             	st2 R10,'O',sp,(14+1); ASGNP2(addr,reg)
    1426/    5C83 : (MACRO)             	ldn2 R12,R11	;opt9x
    1427/    5C88 : (MACRO)             	Ccall _printint
    1428/    5C8C :                     ;					argslot+=1; //next argument slot
    1429/    5C8C : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1430/    5C98 : (MACRO)             	incm R11,1
    1431/    5C99 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNI2(addr,reg)
    1432/    5CA6 :                     ;					break;
    1433/    5CA6 : C0 5F A0            	lbr L181
    1434/    5CA9 :                     L184:
    1435/    5CA9 :                     ;					printstr((char*) *this++);
    1436/    5CA9 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1437/    5CB5 : (MACRO)             	cpy2 R10,R11
    1438/    5CB9 : (MACRO)             	incm R10,2
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 25 - 10/28/2020 10:49:19


    1439/    5CBB : (MACRO)             	st2 R10,'O',sp,(14+1); ASGNP2(addr,reg)
    1440/    5CC8 : (MACRO)             	ldn2s R11,R11	;opt9xs
    1441/    5CCF : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1442/    5CD3 : (MACRO)             	Ccall _printstr
    1443/    5CD7 :                     ;					argslot+=1; //next argument slot
    1444/    5CD7 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1445/    5CE3 : (MACRO)             	incm R11,1
    1446/    5CE4 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNI2(addr,reg)
    1447/    5CF1 :                     ;					break;
    1448/    5CF1 : C0 5F A0            	lbr L181
    1449/    5CF4 :                     L185:
    1450/    5CF4 :                     ;					if (*ptr=='x'){ //if there's an x
    1451/    5CF4 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1452/    5CF6 : (MACRO)             	jneU1I R11,120,L186	; DH 4
    1453/    5CFC :                     ;						ptr++; //skip over the x
    1454/    5CFC : (MACRO)             	incm R7,1
    1455/    5CFD :                     ;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
    1456/    5CFD : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1457/    5D09 : (MACRO)             	cpy2 R10,R11
    1458/    5D0D : (MACRO)             	incm R10,2
    1459/    5D0F : (MACRO)             	st2 R10,'O',sp,(14+1); ASGNP2(addr,reg)
    1460/    5D1C : (MACRO)             	ldn2s R11,R11	;opt9xs
    1461/    5D23 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1462/    5D2B : (MACRO)             	cpy1 R12,R11
    1463/    5D2D : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1464/    5D30 : (MACRO)             	Ccall _putx
    1465/    5D34 :                     ;					} else{
    1466/    5D34 : C0 5D 6B            	lbr L187
    1467/    5D37 :                     L186:
    1468/    5D37 :                     ;						putc((unsigned int) *this++);		//print as char
    1469/    5D37 : (MACRO)             	ldaD R12,7; reg:acon
    1470/    5D3D : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1471/    5D49 : (MACRO)             	cpy2 R10,R11
    1472/    5D4D : (MACRO)             	incm R10,2
    1473/    5D4F : (MACRO)             	st2 R10,'O',sp,(14+1); ASGNP2(addr,reg)
    1474/    5D5C : (MACRO)             	ldn2s R11,R11	;opt9xs
    1475/    5D63 : (MACRO)             	cpy2 R13,R11 ;LOADU2*(reg)
    1476/    5D67 : (MACRO)             	Ccall _out; CALLI2(ar)
    1477/    5D6B :                     ;					}
    1478/    5D6B :                     L187:
    1479/    5D6B :                     ;					argslot+=1; //next argument slot
    1480/    5D6B : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1481/    5D77 : (MACRO)             	incm R11,1
    1482/    5D78 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNI2(addr,reg)
    1483/    5D85 :                     ;					break;
    1484/    5D85 : C0 5F A0            	lbr L181
    1485/    5D88 :                     L188:
    1486/    5D88 :                     ;					putx(((unsigned int) *this)>>8);
    1487/    5D88 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1488/    5D94 : (MACRO)             	ldn2s R11,R11	;opt9xs
    1489/    5D9B : 9B                  	ghi	R11	;opt2
    1490/    5D9C : AB                  	plo	R11
    1491/    5D9D : F8 00               	ldi	0
    1492/    5D9F : BB                  	phi	R11	
    1493/    5DA0 : (MACRO)             	cpy1 R12,R11
    1494/    5DA2 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1495/    5DA5 : (MACRO)             	Ccall _putx
    1496/    5DA9 :                     ;					putx(((unsigned int) *this++)&255);
    1497/    5DA9 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1498/    5DB5 : (MACRO)             	cpy2 R10,R11
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 26 - 10/28/2020 10:49:19


    1499/    5DB9 : (MACRO)             	incm R10,2
    1500/    5DBB : (MACRO)             	st2 R10,'O',sp,(14+1); ASGNP2(addr,reg)
    1501/    5DC8 : (MACRO)             	ldn2s R11,R11	;opt9xs
    1502/    5DCF : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1503/    5DD7 : (MACRO)             	cpy1 R12,R11
    1504/    5DD9 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1505/    5DDC : (MACRO)             	Ccall _putx
    1506/    5DE0 :                     ;					argslot+=1; //next argument slot
    1507/    5DE0 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1508/    5DEC : (MACRO)             	incm R11,1
    1509/    5DED : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNI2(addr,reg)
    1510/    5DFA :                     ;					break;
    1511/    5DFA : C0 5F A0            	lbr L181
    1512/    5DFD :                     L189:
    1513/    5DFD :                     ;					if (*ptr){ //as long as there's something there
    1514/    5DFD : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1515/    5DFF : (MACRO)             	jzU1 R11,L190; EQ 0 - nopromo 20-05-12
    1516/    5E03 :                     ;						xord=*ptr++;
    1517/    5E03 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) ;opt1.1
    1518/    5E07 : (MACRO)             	incm R7,1
    1519/    5E08 : (MACRO)             	ldA2 R10,'O',sp,(11+1); reg:addr
    1520/    5E10 : 0B                  	ldn R11
    1521/    5E11 : 5A                  	str R10; ASGNU1(indaddr,INDIRU1(indaddr))J2020-1
    1522/    5E12 :                     ;						if (argslot&1) {
    1523/    5E12 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1524/    5E1E : (MACRO)             	alu2I R11,R11,1,ani,ani
    1525/    5E26 :                     	;removed ?	cpy2 R11,R11
    1526/    5E26 : (MACRO)             	jzU2 R11,L192; EQ I 0
    1527/    5E2E :                     ;							this++;
    1528/    5E2E : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1529/    5E3A : (MACRO)             	incm R11,2
    1530/    5E3C : (MACRO)             	st2 R11,'O',sp,(14+1); ASGNP2(addr,reg)
    1531/    5E49 :                     ;							argslot++;
    1532/    5E49 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1533/    5E55 : (MACRO)             	incm R11,1
    1534/    5E56 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNI2(addr,reg)
    1535/    5E63 :                     ;						}
    1536/    5E63 :                     L192:
    1537/    5E63 :                     ;						if(xord=='d'){
    1538/    5E63 : (MACRO)             	ld1 R11,'O',sp,(11+1)
    1539/    5E6D : (MACRO)             	jneU1I R11,100,L194	; DH 4
    1540/    5E73 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    1541/    5E73 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1542/    5E7F : (MACRO)             	ld4 Rp1p2,'O',R11,0;reg:  INDIRI4(addr)
    1543/    5E8F : (MACRO)             	Ccall _printlint
    1544/    5E93 :                     ;							this+=2;				// and advances it 4 bytes
    1545/    5E93 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1546/    5E9F : (MACRO)             	incm R11,4
    1547/    5EA3 : (MACRO)             	st2 R11,'O',sp,(14+1); ASGNP2(addr,reg)
    1548/    5EB0 :                     ;						} else{
    1549/    5EB0 : C0 5F 63            	lbr L195
    1550/    5EB3 :                     L194:
    1551/    5EB3 :                     ;							putx(((unsigned int) *this)>>8);
    1552/    5EB3 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1553/    5EBF : (MACRO)             	ldn2s R11,R11	;opt9xs
    1554/    5EC6 : 9B                  	ghi	R11	;opt2
    1555/    5EC7 : AB                  	plo	R11
    1556/    5EC8 : F8 00               	ldi	0
    1557/    5ECA : BB                  	phi	R11	
    1558/    5ECB : (MACRO)             	cpy1 R12,R11
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 27 - 10/28/2020 10:49:19


    1559/    5ECD : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1560/    5ED0 : (MACRO)             	Ccall _putx
    1561/    5ED4 :                     ;							putx(((unsigned int) *this++)&255);
    1562/    5ED4 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1563/    5EE0 : (MACRO)             	cpy2 R10,R11
    1564/    5EE4 : (MACRO)             	incm R10,2
    1565/    5EE6 : (MACRO)             	st2 R10,'O',sp,(14+1); ASGNP2(addr,reg)
    1566/    5EF3 : (MACRO)             	ldn2s R11,R11	;opt9xs
    1567/    5EFA : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1568/    5F02 : (MACRO)             	cpy1 R12,R11
    1569/    5F04 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1570/    5F07 : (MACRO)             	Ccall _putx
    1571/    5F0B :                     ;							putx(((unsigned int) *this)>>8);
    1572/    5F0B : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1573/    5F17 : (MACRO)             	ldn2s R11,R11	;opt9xs
    1574/    5F1E : 9B                  	ghi	R11	;opt2
    1575/    5F1F : AB                  	plo	R11
    1576/    5F20 : F8 00               	ldi	0
    1577/    5F22 : BB                  	phi	R11	
    1578/    5F23 : (MACRO)             	cpy1 R12,R11
    1579/    5F25 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1580/    5F28 : (MACRO)             	Ccall _putx
    1581/    5F2C :                     ;							putx(((unsigned int) *this++)&255);
    1582/    5F2C : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRP2(addr)
    1583/    5F38 : (MACRO)             	cpy2 R10,R11
    1584/    5F3C : (MACRO)             	incm R10,2
    1585/    5F3E : (MACRO)             	st2 R10,'O',sp,(14+1); ASGNP2(addr,reg)
    1586/    5F4B : (MACRO)             	ldn2s R11,R11	;opt9xs
    1587/    5F52 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1588/    5F5A : (MACRO)             	cpy1 R12,R11
    1589/    5F5C : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1590/    5F5F : (MACRO)             	Ccall _putx
    1591/    5F63 :                     ;						}
    1592/    5F63 :                     L195:
    1593/    5F63 :                     ;						argslot+=2;
    1594/    5F63 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRI2(addr)
    1595/    5F6F : (MACRO)             	incm R11,2
    1596/    5F71 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNI2(addr,reg)
    1597/    5F7E :                     ;						break;
    1598/    5F7E : C0 5F A0            	lbr L181
    1599/    5F81 :                     L190:
    1600/    5F81 :                     L180:
    1601/    5F81 :                     ;					putc('%');putc(c);
    1602/    5F81 : (MACRO)             	ldaD R12,7; reg:acon
    1603/    5F87 : (MACRO)             	ldaD R13,37; reg:acon
    1604/    5F8D : (MACRO)             	Ccall _out; CALLI2(ar)
    1605/    5F91 : (MACRO)             	ldaD R12,7; reg:acon
    1606/    5F97 : (MACRO)             	cpy1 R13,R6
    1607/    5F99 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1608/    5F9C : (MACRO)             	Ccall _out; CALLI2(ar)
    1609/    5FA0 :                     ;			} //switch
    1610/    5FA0 :                     L181:
    1611/    5FA0 :                     ;		} //%
    1612/    5FA0 :                     L178:
    1613/    5FA0 :                     ;	} //while
    1614/    5FA0 :                     L175:
    1615/    5FA0 :                     ;    while(*ptr) {
    1616/    5FA0 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1617/    5FA2 : (MACRO)             	jnzU1 R11,L174; NEI2(CVUI2(reg),con0)
    1618/    5FA6 :                     ;} //prtf
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 28 - 10/28/2020 10:49:19


    1619/    5FA6 :                     L173:
    1620/    5FA6 : (MACRO)             	release 4; release room for outgoing arguments
    1621/    5FAA : (MACRO)             	popr R7
    1622/    5FAF : (MACRO)             	popr R6
    1623/    5FB4 : (MACRO)             	release 8; release room for local variables 
    1624/    5FBC : (MACRO)             	Cretn
    1625/    5FBE :                     
    1626/    5FBE :                     ;;function_end$$ _printf
    1627/    5FBE :                     ;;function_start _exit void function(int)
    1628/    5FBE :                     _exit:		;framesize=6
    1629/    5FBE : (MACRO)             	reserve 4
    1630/    5FC2 : (MACRO)             	st2 R12,'O',sp,(6+1); flag1 
    1631/    5FCF :                     ;void exit(int code){
    1632/    5FCF :                     ;	printf("exit %d\n",code);
    1633/    5FCF : (MACRO)             	ldaD R12,L201; reg:acon
    1634/    5FD5 : (MACRO)             	ld2 R13,'O',sp,(6+1) ;reg:INDIRI2(addr)
    1635/    5FE1 : (MACRO)             	Ccall _printf
    1636/    5FE5 :                     L202:
    1637/    5FE5 :                     ;	while(1);
    1638/    5FE5 :                     L203:
    1639/    5FE5 : C0 5F E5            	lbr L202
    1640/    5FE8 :                     ;}
    1641/    5FE8 :                     L200:
    1642/    5FE8 : (MACRO)             	release 4
    1643/    5FEC : (MACRO)             	Cretn
    1644/    5FEE :                     
    1645/    5FEE :                     ;;function_end$$ _exit
    1646/    5FEE :                     ;;function_start _memcmp int function(pointer to const void,pointer to const void,unsigned int)
    1647/    5FEE :                     _memcmp:		;framesize=10
    1648/    5FEE : (MACRO)             	reserve 4; save room for local variables
    1649/    5FF2 : (MACRO)             	pushr R6
    1650/    5FF6 : (MACRO)             	pushr R7
    1651/    5FFA : (MACRO)             	ld2 R7,'O',sp,(14+1) ;reg:INDIRU2(addr)
    1652/    6006 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1653/    6006 :                     ;    int v = 0;
    1654/    6006 : (MACRO)             	ld2z R6; reg:con0
    1655/    600A :                     ;    p1 = (unsigned char *)Ptr1;
    1656/    600A : (MACRO)             	st2 R12,'O',sp,(6+1); ASGNP2(addr,reg)
    1657/    6017 :                     ;    p2 = (unsigned char *)Ptr2;
    1658/    6017 : (MACRO)             	st2 R13,'O',sp,(4+1); ASGNP2(addr,reg)
    1659/    6024 : C0 60 77            	lbr L207
    1660/    6027 :                     L206:
    1661/    6027 :                     ;    while(Count-- > 0 && v == 0) {
    1662/    6027 :                     ;        v = *(p1++) - *(p2++);
    1663/    6027 : (MACRO)             	ld2 R11,'O',sp,(6+1) ;reg:INDIRP2(addr)
    1664/    6033 : (MACRO)             	cpy2 R10,R11
    1665/    6037 : (MACRO)             	incm R10,1
    1666/    6038 : (MACRO)             	st2 R10,'O',sp,(6+1); ASGNP2(addr,reg)
    1667/    6045 : (MACRO)             	ld2 R10,'O',sp,(4+1) ;reg:INDIRP2(addr)
    1668/    6051 : (MACRO)             	cpy2 R9,R10
    1669/    6055 : (MACRO)             	incm R9,1
    1670/    6056 : (MACRO)             	st2 R9,'O',sp,(4+1); ASGNP2(addr,reg)
    1671/    6063 : (MACRO)             	ldn1 R11,R11	;opt14*
    1672/    6065 : (MACRO)             	zExt R11 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1673/    6068 : (MACRO)             	ldn1 R10,R10	;opt14*
    1674/    606A : (MACRO)             	zExt R10 ;CVUI2(INDIRU1(addr)): *widen unsigned char to signed int (zero extend)J2020-2
    1675/    606D : (MACRO)             	alu2 R6,R11,R10,sm,smb
    1676/    6077 :                     ;    }
    1677/    6077 :                     L207:
    1678/    6077 :                     ;    while(Count-- > 0 && v == 0) {
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 29 - 10/28/2020 10:49:19


    1679/    6077 : (MACRO)             	cpy2 R11,R7 ;LOADU2*(reg)
    1680/    607B : (MACRO)             	cpy2 R7,R11	;SUBU2(reg,consm)
    1681/    607F : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
    1682/    6080 : (MACRO)             	jzU2 R11,L209; EQ U 0
    1683/    6088 : (MACRO)             	jzU2 R6,L206; EQ I 0
    1684/    6090 :                     L209:
    1685/    6090 :                     ;    return v;
    1686/    6090 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)
    1687/    6094 :                     L205:
    1688/    6094 : (MACRO)             	popr R7
    1689/    6099 : (MACRO)             	popr R6
    1690/    609E : (MACRO)             	release 4; release room for local variables 
    1691/    60A2 : (MACRO)             	Cretn
    1692/    60A4 :                     
    1693/    60A4 :                     ;;function_end$$ _memcmp
    1694/    60A4 :                     ;;function_start _memcpy pointer to void function(pointer to void,pointer to const void,unsigned int)
    1695/    60A4 :                     _memcpy:		;framesize=8
    1696/    60A4 : (MACRO)             	reserve 2; save room for local variables
    1697/    60A6 : (MACRO)             	pushr R6
    1698/    60AA : (MACRO)             	pushr R7
    1699/    60AE : (MACRO)             	ld2 R7,'O',sp,(12+1) ;reg:INDIRU2(addr)
    1700/    60BA :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1701/    60BA :                     ;        char* dst8 = (char*)dest;
    1702/    60BA : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    1703/    60BE :                     ;        char* src8 = (char*)src;
    1704/    60BE : (MACRO)             	st2 R13,'O',sp,(4+1); ASGNP2(addr,reg)
    1705/    60CB : C0 60 F3            	lbr L212
    1706/    60CE :                     L211:
    1707/    60CE :                     ;        while (count--) {
    1708/    60CE :                     ;            *dst8++ = *src8++;
    1709/    60CE : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1.1
    1710/    60D2 : (MACRO)             	incm R6,1
    1711/    60D3 : (MACRO)             	ld2 R10,'O',sp,(4+1) ;reg:INDIRP2(addr)
    1712/    60DF : (MACRO)             	cpy2 R9,R10
    1713/    60E3 : (MACRO)             	incm R9,1
    1714/    60E4 : (MACRO)             	st2 R9,'O',sp,(4+1); ASGNP2(addr,reg)
    1715/    60F1 : 0A                  	ldn R10
    1716/    60F2 : 5B                  	str R11; ASGNU1(indaddr,INDIRU1(indaddr))J2020-1
    1717/    60F3 :                     ;        }
    1718/    60F3 :                     L212:
    1719/    60F3 :                     ;        while (count--) {
    1720/    60F3 : (MACRO)             	cpy2 R11,R7 ;LOADU2*(reg)
    1721/    60F7 : (MACRO)             	cpy2 R7,R11	;SUBU2(reg,consm)
    1722/    60FB : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
    1723/    60FC : (MACRO)             	jnzU2 R11,L211; NE 0 
    1724/    6104 :                     ;        return dest;
    1725/    6104 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1726/    6108 :                     L210:
    1727/    6108 : (MACRO)             	popr R7
    1728/    610D : (MACRO)             	popr R6
    1729/    6112 : (MACRO)             	release 2; release room for local variables 
    1730/    6114 : (MACRO)             	Cretn
    1731/    6116 :                     
    1732/    6116 :                     ;;function_end$$ _memcpy
    1733/    6116 :                     ;;function_start _memset pointer to void function(pointer to void,int,unsigned int)
    1734/    6116 :                     _memset:		;framesize=6
    1735/    6116 : (MACRO)             	pushr R6
    1736/    611A : (MACRO)             	pushr R7
    1737/    611E : (MACRO)             	ld2 R7,'O',sp,(10+1) ;reg:INDIRU2(addr)
    1738/    612A :                     ;{
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 30 - 10/28/2020 10:49:19


    1739/    612A :                     ;    unsigned char* p=s;
    1740/    612A : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    1741/    612E : C0 61 35            	lbr L216
    1742/    6131 :                     L215:
    1743/    6131 :                     ;    while(n){
    1744/    6131 :                     ;        *p = (unsigned char)c;
    1745/    6131 : (MACRO)             	str1 R13,R6; ASGNU1(indaddr,LOADU1(LOADU2(reg))) 18-03-21
    1746/    6133 :                     ;        p++;
    1747/    6133 : (MACRO)             	incm R6,1
    1748/    6134 :                     ;        n--;
    1749/    6134 : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
    1750/    6135 :                     ;	}
    1751/    6135 :                     L216:
    1752/    6135 :                     ;    while(n){
    1753/    6135 : (MACRO)             	jnzU2 R7,L215; NE 0 
    1754/    613D :                     ;    return s;
    1755/    613D : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1756/    6141 :                     L214:
    1757/    6141 : (MACRO)             	popr R7
    1758/    6146 : (MACRO)             	popr R6
    1759/    614B : (MACRO)             	Cretn
    1760/    614D :                     
    1761/    614D :                     ;;function_end$$ _memset
    1762/    614D :                     ;;function_start _nstdlibincluder void function(void)
    1763/    614D :                     _nstdlibincluder:		;framesize=2
    1764/    614D :                     ;void nstdlibincluder(){
    1765/    614D :                     ;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
    1766/    614D :                     	include nstdlib.inc
(1)    1/    614D :                     ;nstdlib.inc includes assembly versions of nstdlib routines strcpy, strcmp
(1)    2/    614D :                     ;Oct 1 first test seems ok
(1)    3/    614D :                     ;20-08-01 moved in dubdabx
(1)    4/    614D : =>UNDEFINED          IFNDEF _DUBDABX		;avoid double define
(1)    5/    614D : =>UNDEFINED           IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)    6/    614D :                        align 256			;wjr 20-05-23
(1)    7/    6200 :                     _dubdabx:	
(1)    8/    6200 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)    9/    6200 :                     ;thanks to Charles Richmond for the suggestion and code
(1)   10/    6200 :                     ;long interger is passed in rp1p2
(1)   11/    6200 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)   12/    6200 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)   13/    6200 :                     ;r8-11 are used as temps
(1)   14/    6200 :                     ;r8 is the working pointer
(1)   15/    6200 :                     ;r15.0 is bit count(32) and the return value register
(1)   16/    6200 :                     ;r9.0 is digit count
(1)   17/    6200 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)   18/    6200 : (MACRO)             	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)   19/    620C : (MACRO)             	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)   20/    6218 : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)   21/    621C : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)   22/    621E : A9                  	plo r9
(1)   23/    621F :                     $$clrlp:	;clear the passed buffer
(1)   24/    621F : F8 00               	ldi 0	
(1)   25/    6221 : 58                  	str r8	;clear a byte
(1)   26/    6222 : 18                  	inc r8
(1)   27/    6223 : 29                  	dec r9
(1)   28/    6224 : 89                  	glo r9	;check the count
(1)   29/    6225 : 3A 1F               	bnz $$clrlp ;back for more
(1)   30/    6227 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)   31/    622B :                     
(1)   32/    622B : F8 20               	ldi 32	;bit count
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(nstdlib.inc) - Page 31 - 10/28/2020 10:49:19


(1)   33/    622D : AF                  	plo r15
(1)   34/    622E :                     ;now i'm going to spin off any leading 0's in the binary number
(1)   35/    622E :                     $$cktop:
(1)   36/    622E : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)   37/    622F : FE                  	shl		;check for a 1
(1)   38/    6230 : 33 43               	bdf $$bitloop	;move on if we have one
(1)   39/    6232 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)   40/    623E : 2F                  	dec r15		;reduce the number of times to shift
(1)   41/    623F : 8F                  	glo r15
(1)   42/    6240 : 3A 2E               	bnz $$cktop	;
(1)   43/    6242 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)   44/    6243 :                     $$bitloop:
(1)   45/    6243 : F8 0A               	ldi 10	;digit count
(1)   46/    6245 : A9                  	plo r9
(1)   47/    6246 :                     $$dcklp:
(1)   48/    6246 : 08                  	ldn r8 	;pick up a digit
(1)   49/    6247 : FF 05               	smi 5	;see if it's greater than 4
(1)   50/    6249 : 3B 4E               	bnf $$dnoadd ;if not, bypass add
(1)   51/    624B : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)   52/    624D : 58                  	str r8	;put it back
(1)   53/    624E :                     $$dnoadd:
(1)   54/    624E : 18                  	inc r8
(1)   55/    624F : 29                  	dec r9	;decrement digit count
(1)   56/    6250 : 89                  	glo r9
(1)   57/    6251 : 3A 46               	bnz $$dcklp ;and back for next digit
(1)   58/    6253 :                     	
(1)   59/    6253 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)   60/    625F :                     	
(1)   61/    625F : F8 0A               	ldi 10	;load the digit count again
(1)   62/    6261 : A9                  	plo r9
(1)   63/    6262 :                     ;r8 is now just past the units location and ready to walk back
(1)   64/    6262 :                     $$dshlp:
(1)   65/    6262 : 28                  	dec r8	;walk back from 0's position
(1)   66/    6263 : 08                  	ldn r8	;get the digit back
(1)   67/    6264 : 7E                  	shlc	;continue the shift
(1)   68/    6265 : BF                  	phi r15 ;save it for the carry test
(1)   69/    6266 : FA 0F               	ani 0x0f ;clear the 10 bit
(1)   70/    6268 : 58                  	str r8	;put the digit back
(1)   71/    6269 : 9F                  	ghi r15	;now test for carry
(1)   72/    626A : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)   73/    626C : 29                  	dec r9	;decrement the digit count
(1)   74/    626D : 89                  	glo r9
(1)   75/    626E : 3A 62               	bnz $$dshlp ;back for more if needed
(1)   76/    6270 :                     	
(1)   77/    6270 : 2F                  	dec r15
(1)   78/    6271 : 8F                  	glo r15
(1)   79/    6272 : 3A 43               	bnz $$bitloop
(1)   80/    6274 :                     	
(1)   81/    6274 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)   82/    6278 : F8 0A               	ldi 10		;digit count again
(1)   83/    627A : A9                  	plo r9
(1)   84/    627B :                     $$upnxt:
(1)   85/    627B : 08                  	ldn r8		;get digit
(1)   86/    627C : F9 30               	ori 0x30	;make ascii
(1)   87/    627E : 58                  	str r8		;put it back
(1)   88/    627F : 18                  	inc r8		;next digit
(1)   89/    6280 : 29                  	dec r9		;counter
(1)   90/    6281 : 89                  	glo r9
(1)   91/    6282 : 3A 7B               	bnz $$upnxt	;upgrade all 10 spots
(1)   92/    6284 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(nstdlib.inc) - Page 32 - 10/28/2020 10:49:19


(1)   93/    628C : EE                  	sex memaddr	;set up
(1)   94/    628D : F8 0A               	ldi 10		;max number of 0's to skip
(1)   95/    628F : F7                  	sm		;desired number of digits to skip
(1)   96/    6290 : E2                  	sex sp		;reset index register
(1)   97/    6291 : A9                  	plo r9		;number of leading 0's to skip
(1)   98/    6292 :                     $$cknext:
(1)   99/    6292 : 0F                  	ldn r15		;check digit
(1)  100/    6293 : FF 30               	smi 0x30	;for '0'
(1)  101/    6295 : 3A 9C               	bnz $$done
(1)  102/    6297 : 1F                  	inc r15		;next digit
(1)  103/    6298 : 29                  	dec r9		;reduce count
(1)  104/    6299 : 89                  	glo r9
(1)  105/    629A : 3A 92               	bnz $$cknext
(1)  106/    629C :                     $$done:
(1)  107/    629C : (MACRO)             	cretn
(1)  108/    629E : [5]                   ENDIF	
(1)  109/    629E : [4]                  ENDIF
(1)  110/    629E :                     
(1)  111/    629E :                     ;char * strcpy(char * to, const char *from)
(1)  112/    629E :                     	align 64
(1)  113/    62C0 :                     _strcpy:
(1)  114/    62C0 :                     ;char *save = to; (to is R12, from is R13)
(1)  115/    62C0 : 8C                  	glo R12	
(1)  116/    62C1 : AF                  	plo R15
(1)  117/    62C2 : 9C                  	ghi R12
(1)  118/    62C3 : BF                  	phi R15
(1)  119/    62C4 :                     ;for (; (*to = *from) != 0; ++from, ++to);
(1)  120/    62C4 : 4D                  __strcpy: lda R13
(1)  121/    62C5 : 5C                  	str R12
(1)  122/    62C6 : 1C                  	inc R12
(1)  123/    62C7 : 3A C4               	bnz __strcpy
(1)  124/    62C9 :                     ;return(save);
(1)  125/    62C9 : (MACRO)             	cretn
(1)  126/    62CB :                     ;}
(1)  127/    62CB :                     
(1)  128/    62CB :                     
(1)  129/    62CB :                     ;int strcmp(const char *s1, const char *s2){  s1 will be R12, s2 R13
(1)  130/    62CB :                     _strcmp:	;entry point from C program
(1)  131/    62CB :                     ;  int ret = 0;
(1)  132/    62CB : (MACRO)             	ld2z	R15	;ret is R15
(1)  133/    62CF :                     ;  while (!(ret = *(unsigned char *) s1 - *(unsigned char *) s2) && *s2) ++s1, ++s2;
(1)  134/    62CF : 22                  	dec	sp	;make a work area
(1)  135/    62D0 :                     __strcmplp:
(1)  136/    62D0 : 4D                  	lda	R13	;get string 2 character
(1)  137/    62D1 : 52                  	str	sp	;prep for compare
(1)  138/    62D2 : 4C                  	lda	R12	;get string 1 character
(1)  139/    62D3 : F7                  	sm		;subtract string 2 char from string 1
(1)  140/    62D4 : 3A DC               	bnz	__strcmpne ;strings not equal quit
(1)  141/    62D6 :                     	
(1)  142/    62D6 : 02                  	ldn	sp	;check string 2 character
(1)  143/    62D7 : 3A D0               	bnz	__strcmplp ;back for more if not done
(1)  144/    62D9 : 12                  	inc	sp	;release the work area
(1)  145/    62DA : (MACRO)             	cretn		;back to caler with 0 in R15
(1)  146/    62DC :                     	
(1)  147/    62DC :                     __strcmpne:	;here I know they're not equal
(1)  148/    62DC : 12                  	inc	sp		;release the work area
(1)  149/    62DD : 33 E2               	bdf	__strcmpgt	;string1>string2
(1)  150/    62DF : 2F                  	dec	R15		;string 1<string 2, return -1
(1)  151/    62E0 : (MACRO)             	cretn
(1)  152/    62E2 :                     __strcmpgt:
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(nstdlib.inc) - Page 33 - 10/28/2020 10:49:19


(1)  153/    62E2 : 1F                  	inc	R15		;string1>string2, return 1
(1)  154/    62E3 : (MACRO)             	cretn
(1)  155/    62E5 :                     
    1767/    62E5 :                     ;}
    1768/    62E5 :                     L218:
    1769/    62E5 : (MACRO)             	Cretn
    1770/    62E7 :                     
    1771/    62E7 :                     ;;function_end$$ _nstdlibincluder
    1772/    62E7 : (MACRO)             	orgd
    1773/    62E7 :                     _Arr_2_Glob:
    1774/    62E7 : (MACRO)             	globss 1000; define global BSS
    1775/    66CF : (MACRO)             	globss 1000; define global BSS
    1776/    6AB7 : (MACRO)             	globss 1000; define global BSS
    1777/    6E9F : (MACRO)             	globss 1000; define global BSS
    1778/    7287 : (MACRO)             	globss 1000; define global BSS
    1779/    766F :                     _Arr_1_Glob:
    1780/    766F : (MACRO)             	globss 100; define global BSS
    1781/    76D3 :                     _Ch_2_Glob:
    1782/    76D3 : (MACRO)             	globss 1; define global BSS
    1783/    76D4 :                     _Ch_1_Glob:
    1784/    76D4 : (MACRO)             	globss 1; define global BSS
    1785/    76D5 :                     _Bool_Glob:
    1786/    76D5 : (MACRO)             	globss 2; define global BSS
    1787/    76D7 :                     _Int_Glob:
    1788/    76D7 : (MACRO)             	globss 2; define global BSS
    1789/    76D9 :                     _Next_Ptr_Glob:
    1790/    76D9 : (MACRO)             	globss 2; define global BSS
    1791/    76DB :                     _Ptr_Glob:
    1792/    76DB : (MACRO)             	globss 2; define global BSS
    1793/    76DD : (MACRO)             	orgc
    1794/    76DD :                     L201:
    1795/    76DD : 65                  	db 101
    1796/    76DE : 78                  	db 120
    1797/    76DF : 69                  	db 105
    1798/    76E0 : 74                  	db 116
    1799/    76E1 : 20                  	db 32
    1800/    76E2 : 25                  	db 37
    1801/    76E3 : 64                  	db 100
    1802/    76E4 : 0A                  	db 10
    1803/    76E5 : 00                  	db 0
    1804/    76E6 :                     L111:
    1805/    76E6 : 64                  	db 100
    1806/    76E7 : 6F                  	db 111
    1807/    76E8 : 6E                  	db 110
    1808/    76E9 : 65                  	db 101
    1809/    76EA : 0A                  	db 10
    1810/    76EB : 00                  	db 0
    1811/    76EC :                     L110:
    1812/    76EC : 20                  	db 32
    1813/    76ED : 20                  	db 32
    1814/    76EE : 20                  	db 32
    1815/    76EF : 20                  	db 32
    1816/    76F0 : 20                  	db 32
    1817/    76F1 : 20                  	db 32
    1818/    76F2 : 20                  	db 32
    1819/    76F3 : 20                  	db 32
    1820/    76F4 : 73                  	db 115
    1821/    76F5 : 68                  	db 104
    1822/    76F6 : 6F                  	db 111
    1823/    76F7 : 75                  	db 117
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 34 - 10/28/2020 10:49:19


    1824/    76F8 : 6C                  	db 108
    1825/    76F9 : 64                  	db 100
    1826/    76FA : 20                  	db 32
    1827/    76FB : 62                  	db 98
    1828/    76FC : 65                  	db 101
    1829/    76FD : 3A                  	db 58
    1830/    76FE : 20                  	db 32
    1831/    76FF : 20                  	db 32
    1832/    7700 : 20                  	db 32
    1833/    7701 : 44                  	db 68
    1834/    7702 : 48                  	db 72
    1835/    7703 : 52                  	db 82
    1836/    7704 : 59                  	db 89
    1837/    7705 : 53                  	db 83
    1838/    7706 : 54                  	db 84
    1839/    7707 : 4F                  	db 79
    1840/    7708 : 4E                  	db 78
    1841/    7709 : 45                  	db 69
    1842/    770A : 20                  	db 32
    1843/    770B : 50                  	db 80
    1844/    770C : 52                  	db 82
    1845/    770D : 4F                  	db 79
    1846/    770E : 47                  	db 71
    1847/    770F : 52                  	db 82
    1848/    7710 : 41                  	db 65
    1849/    7711 : 4D                  	db 77
    1850/    7712 : 2C                  	db 44
    1851/    7713 : 20                  	db 32
    1852/    7714 : 32                  	db 50
    1853/    7715 : 27                  	db 39
    1854/    7716 : 4E                  	db 78
    1855/    7717 : 44                  	db 68
    1856/    7718 : 20                  	db 32
    1857/    7719 : 53                  	db 83
    1858/    771A : 54                  	db 84
    1859/    771B : 52                  	db 82
    1860/    771C : 49                  	db 73
    1861/    771D : 4E                  	db 78
    1862/    771E : 47                  	db 71
    1863/    771F : 0A                  	db 10
    1864/    7720 : 00                  	db 0
    1865/    7721 :                     L109:
    1866/    7721 : 53                  	db 83
    1867/    7722 : 74                  	db 116
    1868/    7723 : 72                  	db 114
    1869/    7724 : 5F                  	db 95
    1870/    7725 : 32                  	db 50
    1871/    7726 : 5F                  	db 95
    1872/    7727 : 4C                  	db 76
    1873/    7728 : 6F                  	db 111
    1874/    7729 : 63                  	db 99
    1875/    772A : 3A                  	db 58
    1876/    772B : 20                  	db 32
    1877/    772C : 20                  	db 32
    1878/    772D : 20                  	db 32
    1879/    772E : 20                  	db 32
    1880/    772F : 20                  	db 32
    1881/    7730 : 20                  	db 32
    1882/    7731 : 20                  	db 32
    1883/    7732 : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 35 - 10/28/2020 10:49:19


    1884/    7733 : 20                  	db 32
    1885/    7734 : 20                  	db 32
    1886/    7735 : 20                  	db 32
    1887/    7736 : 25                  	db 37
    1888/    7737 : 73                  	db 115
    1889/    7738 : 0A                  	db 10
    1890/    7739 : 00                  	db 0
    1891/    773A :                     L108:
    1892/    773A : 20                  	db 32
    1893/    773B : 20                  	db 32
    1894/    773C : 20                  	db 32
    1895/    773D : 20                  	db 32
    1896/    773E : 20                  	db 32
    1897/    773F : 20                  	db 32
    1898/    7740 : 20                  	db 32
    1899/    7741 : 20                  	db 32
    1900/    7742 : 73                  	db 115
    1901/    7743 : 68                  	db 104
    1902/    7744 : 6F                  	db 111
    1903/    7745 : 75                  	db 117
    1904/    7746 : 6C                  	db 108
    1905/    7747 : 64                  	db 100
    1906/    7748 : 20                  	db 32
    1907/    7749 : 62                  	db 98
    1908/    774A : 65                  	db 101
    1909/    774B : 3A                  	db 58
    1910/    774C : 20                  	db 32
    1911/    774D : 20                  	db 32
    1912/    774E : 20                  	db 32
    1913/    774F : 44                  	db 68
    1914/    7750 : 48                  	db 72
    1915/    7751 : 52                  	db 82
    1916/    7752 : 59                  	db 89
    1917/    7753 : 53                  	db 83
    1918/    7754 : 54                  	db 84
    1919/    7755 : 4F                  	db 79
    1920/    7756 : 4E                  	db 78
    1921/    7757 : 45                  	db 69
    1922/    7758 : 20                  	db 32
    1923/    7759 : 50                  	db 80
    1924/    775A : 52                  	db 82
    1925/    775B : 4F                  	db 79
    1926/    775C : 47                  	db 71
    1927/    775D : 52                  	db 82
    1928/    775E : 41                  	db 65
    1929/    775F : 4D                  	db 77
    1930/    7760 : 2C                  	db 44
    1931/    7761 : 20                  	db 32
    1932/    7762 : 31                  	db 49
    1933/    7763 : 27                  	db 39
    1934/    7764 : 53                  	db 83
    1935/    7765 : 54                  	db 84
    1936/    7766 : 20                  	db 32
    1937/    7767 : 53                  	db 83
    1938/    7768 : 54                  	db 84
    1939/    7769 : 52                  	db 82
    1940/    776A : 49                  	db 73
    1941/    776B : 4E                  	db 78
    1942/    776C : 47                  	db 71
    1943/    776D : 0A                  	db 10
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 36 - 10/28/2020 10:49:19


    1944/    776E : 00                  	db 0
    1945/    776F :                     L107:
    1946/    776F : 53                  	db 83
    1947/    7770 : 74                  	db 116
    1948/    7771 : 72                  	db 114
    1949/    7772 : 5F                  	db 95
    1950/    7773 : 31                  	db 49
    1951/    7774 : 5F                  	db 95
    1952/    7775 : 4C                  	db 76
    1953/    7776 : 6F                  	db 111
    1954/    7777 : 63                  	db 99
    1955/    7778 : 3A                  	db 58
    1956/    7779 : 20                  	db 32
    1957/    777A : 20                  	db 32
    1958/    777B : 20                  	db 32
    1959/    777C : 20                  	db 32
    1960/    777D : 20                  	db 32
    1961/    777E : 20                  	db 32
    1962/    777F : 20                  	db 32
    1963/    7780 : 20                  	db 32
    1964/    7781 : 20                  	db 32
    1965/    7782 : 20                  	db 32
    1966/    7783 : 20                  	db 32
    1967/    7784 : 25                  	db 37
    1968/    7785 : 73                  	db 115
    1969/    7786 : 0A                  	db 10
    1970/    7787 : 00                  	db 0
    1971/    7788 :                     L106:
    1972/    7788 : 45                  	db 69
    1973/    7789 : 6E                  	db 110
    1974/    778A : 75                  	db 117
    1975/    778B : 6D                  	db 109
    1976/    778C : 5F                  	db 95
    1977/    778D : 4C                  	db 76
    1978/    778E : 6F                  	db 111
    1979/    778F : 63                  	db 99
    1980/    7790 : 3A                  	db 58
    1981/    7791 : 20                  	db 32
    1982/    7792 : 20                  	db 32
    1983/    7793 : 20                  	db 32
    1984/    7794 : 20                  	db 32
    1985/    7795 : 20                  	db 32
    1986/    7796 : 20                  	db 32
    1987/    7797 : 20                  	db 32
    1988/    7798 : 20                  	db 32
    1989/    7799 : 20                  	db 32
    1990/    779A : 20                  	db 32
    1991/    779B : 20                  	db 32
    1992/    779C : 20                  	db 32
    1993/    779D : 25                  	db 37
    1994/    779E : 64                  	db 100
    1995/    779F : 0A                  	db 10
    1996/    77A0 : 00                  	db 0
    1997/    77A1 :                     L105:
    1998/    77A1 : 49                  	db 73
    1999/    77A2 : 6E                  	db 110
    2000/    77A3 : 74                  	db 116
    2001/    77A4 : 5F                  	db 95
    2002/    77A5 : 33                  	db 51
    2003/    77A6 : 5F                  	db 95
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 37 - 10/28/2020 10:49:19


    2004/    77A7 : 4C                  	db 76
    2005/    77A8 : 6F                  	db 111
    2006/    77A9 : 63                  	db 99
    2007/    77AA : 3A                  	db 58
    2008/    77AB : 20                  	db 32
    2009/    77AC : 20                  	db 32
    2010/    77AD : 20                  	db 32
    2011/    77AE : 20                  	db 32
    2012/    77AF : 20                  	db 32
    2013/    77B0 : 20                  	db 32
    2014/    77B1 : 20                  	db 32
    2015/    77B2 : 20                  	db 32
    2016/    77B3 : 20                  	db 32
    2017/    77B4 : 20                  	db 32
    2018/    77B5 : 20                  	db 32
    2019/    77B6 : 25                  	db 37
    2020/    77B7 : 64                  	db 100
    2021/    77B8 : 0A                  	db 10
    2022/    77B9 : 00                  	db 0
    2023/    77BA :                     L104:
    2024/    77BA : 49                  	db 73
    2025/    77BB : 6E                  	db 110
    2026/    77BC : 74                  	db 116
    2027/    77BD : 5F                  	db 95
    2028/    77BE : 32                  	db 50
    2029/    77BF : 5F                  	db 95
    2030/    77C0 : 4C                  	db 76
    2031/    77C1 : 6F                  	db 111
    2032/    77C2 : 63                  	db 99
    2033/    77C3 : 3A                  	db 58
    2034/    77C4 : 20                  	db 32
    2035/    77C5 : 20                  	db 32
    2036/    77C6 : 20                  	db 32
    2037/    77C7 : 20                  	db 32
    2038/    77C8 : 20                  	db 32
    2039/    77C9 : 20                  	db 32
    2040/    77CA : 20                  	db 32
    2041/    77CB : 20                  	db 32
    2042/    77CC : 20                  	db 32
    2043/    77CD : 20                  	db 32
    2044/    77CE : 20                  	db 32
    2045/    77CF : 25                  	db 37
    2046/    77D0 : 64                  	db 100
    2047/    77D1 : 0A                  	db 10
    2048/    77D2 : 00                  	db 0
    2049/    77D3 :                     L103:
    2050/    77D3 : 49                  	db 73
    2051/    77D4 : 6E                  	db 110
    2052/    77D5 : 74                  	db 116
    2053/    77D6 : 5F                  	db 95
    2054/    77D7 : 31                  	db 49
    2055/    77D8 : 5F                  	db 95
    2056/    77D9 : 4C                  	db 76
    2057/    77DA : 6F                  	db 111
    2058/    77DB : 63                  	db 99
    2059/    77DC : 3A                  	db 58
    2060/    77DD : 20                  	db 32
    2061/    77DE : 20                  	db 32
    2062/    77DF : 20                  	db 32
    2063/    77E0 : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 38 - 10/28/2020 10:49:19


    2064/    77E1 : 20                  	db 32
    2065/    77E2 : 20                  	db 32
    2066/    77E3 : 20                  	db 32
    2067/    77E4 : 20                  	db 32
    2068/    77E5 : 20                  	db 32
    2069/    77E6 : 20                  	db 32
    2070/    77E7 : 20                  	db 32
    2071/    77E8 : 25                  	db 37
    2072/    77E9 : 64                  	db 100
    2073/    77EA : 0A                  	db 10
    2074/    77EB : 00                  	db 0
    2075/    77EC :                     L102:
    2076/    77EC : 20                  	db 32
    2077/    77ED : 20                  	db 32
    2078/    77EE : 20                  	db 32
    2079/    77EF : 20                  	db 32
    2080/    77F0 : 20                  	db 32
    2081/    77F1 : 20                  	db 32
    2082/    77F2 : 20                  	db 32
    2083/    77F3 : 20                  	db 32
    2084/    77F4 : 73                  	db 115
    2085/    77F5 : 68                  	db 104
    2086/    77F6 : 6F                  	db 111
    2087/    77F7 : 75                  	db 117
    2088/    77F8 : 6C                  	db 108
    2089/    77F9 : 64                  	db 100
    2090/    77FA : 20                  	db 32
    2091/    77FB : 62                  	db 98
    2092/    77FC : 65                  	db 101
    2093/    77FD : 3A                  	db 58
    2094/    77FE : 20                  	db 32
    2095/    77FF : 20                  	db 32
    2096/    7800 : 20                  	db 32
    2097/    7801 : 28                  	db 40
    2098/    7802 : 69                  	db 105
    2099/    7803 : 6D                  	db 109
    2100/    7804 : 70                  	db 112
    2101/    7805 : 6C                  	db 108
    2102/    7806 : 65                  	db 101
    2103/    7807 : 6D                  	db 109
    2104/    7808 : 65                  	db 101
    2105/    7809 : 6E                  	db 110
    2106/    780A : 74                  	db 116
    2107/    780B : 61                  	db 97
    2108/    780C : 74                  	db 116
    2109/    780D : 69                  	db 105
    2110/    780E : 6F                  	db 111
    2111/    780F : 6E                  	db 110
    2112/    7810 : 2D                  	db 45
    2113/    7811 : 64                  	db 100
    2114/    7812 : 65                  	db 101
    2115/    7813 : 70                  	db 112
    2116/    7814 : 65                  	db 101
    2117/    7815 : 6E                  	db 110
    2118/    7816 : 64                  	db 100
    2119/    7817 : 65                  	db 101
    2120/    7818 : 6E                  	db 110
    2121/    7819 : 74                  	db 116
    2122/    781A : 29                  	db 41
    2123/    781B : 2C                  	db 44
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 39 - 10/28/2020 10:49:19


    2124/    781C : 20                  	db 32
    2125/    781D : 73                  	db 115
    2126/    781E : 61                  	db 97
    2127/    781F : 6D                  	db 109
    2128/    7820 : 65                  	db 101
    2129/    7821 : 20                  	db 32
    2130/    7822 : 61                  	db 97
    2131/    7823 : 73                  	db 115
    2132/    7824 : 20                  	db 32
    2133/    7825 : 61                  	db 97
    2134/    7826 : 62                  	db 98
    2135/    7827 : 6F                  	db 111
    2136/    7828 : 76                  	db 118
    2137/    7829 : 65                  	db 101
    2138/    782A : 0A                  	db 10
    2139/    782B : 00                  	db 0
    2140/    782C :                     L101:
    2141/    782C : 4E                  	db 78
    2142/    782D : 65                  	db 101
    2143/    782E : 78                  	db 120
    2144/    782F : 74                  	db 116
    2145/    7830 : 5F                  	db 95
    2146/    7831 : 50                  	db 80
    2147/    7832 : 74                  	db 116
    2148/    7833 : 72                  	db 114
    2149/    7834 : 5F                  	db 95
    2150/    7835 : 47                  	db 71
    2151/    7836 : 6C                  	db 108
    2152/    7837 : 6F                  	db 111
    2153/    7838 : 62                  	db 98
    2154/    7839 : 2D                  	db 45
    2155/    783A : 3E                  	db 62
    2156/    783B : 0A                  	db 10
    2157/    783C : 00                  	db 0
    2158/    783D :                     L100:
    2159/    783D : 20                  	db 32
    2160/    783E : 20                  	db 32
    2161/    783F : 20                  	db 32
    2162/    7840 : 20                  	db 32
    2163/    7841 : 20                  	db 32
    2164/    7842 : 20                  	db 32
    2165/    7843 : 20                  	db 32
    2166/    7844 : 20                  	db 32
    2167/    7845 : 73                  	db 115
    2168/    7846 : 68                  	db 104
    2169/    7847 : 6F                  	db 111
    2170/    7848 : 75                  	db 117
    2171/    7849 : 6C                  	db 108
    2172/    784A : 64                  	db 100
    2173/    784B : 20                  	db 32
    2174/    784C : 62                  	db 98
    2175/    784D : 65                  	db 101
    2176/    784E : 3A                  	db 58
    2177/    784F : 20                  	db 32
    2178/    7850 : 20                  	db 32
    2179/    7851 : 20                  	db 32
    2180/    7852 : 44                  	db 68
    2181/    7853 : 48                  	db 72
    2182/    7854 : 52                  	db 82
    2183/    7855 : 59                  	db 89
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 40 - 10/28/2020 10:49:19


    2184/    7856 : 53                  	db 83
    2185/    7857 : 54                  	db 84
    2186/    7858 : 4F                  	db 79
    2187/    7859 : 4E                  	db 78
    2188/    785A : 45                  	db 69
    2189/    785B : 20                  	db 32
    2190/    785C : 50                  	db 80
    2191/    785D : 52                  	db 82
    2192/    785E : 4F                  	db 79
    2193/    785F : 47                  	db 71
    2194/    7860 : 52                  	db 82
    2195/    7861 : 41                  	db 65
    2196/    7862 : 4D                  	db 77
    2197/    7863 : 2C                  	db 44
    2198/    7864 : 20                  	db 32
    2199/    7865 : 53                  	db 83
    2200/    7866 : 4F                  	db 79
    2201/    7867 : 4D                  	db 77
    2202/    7868 : 45                  	db 69
    2203/    7869 : 20                  	db 32
    2204/    786A : 53                  	db 83
    2205/    786B : 54                  	db 84
    2206/    786C : 52                  	db 82
    2207/    786D : 49                  	db 73
    2208/    786E : 4E                  	db 78
    2209/    786F : 47                  	db 71
    2210/    7870 : 0A                  	db 10
    2211/    7871 : 00                  	db 0
    2212/    7872 :                     L99:
    2213/    7872 : 20                  	db 32
    2214/    7873 : 20                  	db 32
    2215/    7874 : 53                  	db 83
    2216/    7875 : 74                  	db 116
    2217/    7876 : 72                  	db 114
    2218/    7877 : 5F                  	db 95
    2219/    7878 : 43                  	db 67
    2220/    7879 : 6F                  	db 111
    2221/    787A : 6D                  	db 109
    2222/    787B : 70                  	db 112
    2223/    787C : 3A                  	db 58
    2224/    787D : 20                  	db 32
    2225/    787E : 20                  	db 32
    2226/    787F : 20                  	db 32
    2227/    7880 : 20                  	db 32
    2228/    7881 : 20                  	db 32
    2229/    7882 : 20                  	db 32
    2230/    7883 : 20                  	db 32
    2231/    7884 : 20                  	db 32
    2232/    7885 : 20                  	db 32
    2233/    7886 : 20                  	db 32
    2234/    7887 : 25                  	db 37
    2235/    7888 : 73                  	db 115
    2236/    7889 : 0A                  	db 10
    2237/    788A : 00                  	db 0
    2238/    788B :                     L98:
    2239/    788B : 20                  	db 32
    2240/    788C : 20                  	db 32
    2241/    788D : 49                  	db 73
    2242/    788E : 6E                  	db 110
    2243/    788F : 74                  	db 116
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 41 - 10/28/2020 10:49:19


    2244/    7890 : 5F                  	db 95
    2245/    7891 : 43                  	db 67
    2246/    7892 : 6F                  	db 111
    2247/    7893 : 6D                  	db 109
    2248/    7894 : 70                  	db 112
    2249/    7895 : 3A                  	db 58
    2250/    7896 : 20                  	db 32
    2251/    7897 : 20                  	db 32
    2252/    7898 : 20                  	db 32
    2253/    7899 : 20                  	db 32
    2254/    789A : 20                  	db 32
    2255/    789B : 20                  	db 32
    2256/    789C : 20                  	db 32
    2257/    789D : 20                  	db 32
    2258/    789E : 20                  	db 32
    2259/    789F : 20                  	db 32
    2260/    78A0 : 25                  	db 37
    2261/    78A1 : 64                  	db 100
    2262/    78A2 : 0A                  	db 10
    2263/    78A3 : 00                  	db 0
    2264/    78A4 :                     L97:
    2265/    78A4 : 20                  	db 32
    2266/    78A5 : 20                  	db 32
    2267/    78A6 : 45                  	db 69
    2268/    78A7 : 6E                  	db 110
    2269/    78A8 : 75                  	db 117
    2270/    78A9 : 6D                  	db 109
    2271/    78AA : 5F                  	db 95
    2272/    78AB : 43                  	db 67
    2273/    78AC : 6F                  	db 111
    2274/    78AD : 6D                  	db 109
    2275/    78AE : 70                  	db 112
    2276/    78AF : 3A                  	db 58
    2277/    78B0 : 20                  	db 32
    2278/    78B1 : 20                  	db 32
    2279/    78B2 : 20                  	db 32
    2280/    78B3 : 20                  	db 32
    2281/    78B4 : 20                  	db 32
    2282/    78B5 : 20                  	db 32
    2283/    78B6 : 20                  	db 32
    2284/    78B7 : 20                  	db 32
    2285/    78B8 : 20                  	db 32
    2286/    78B9 : 25                  	db 37
    2287/    78BA : 64                  	db 100
    2288/    78BB : 0A                  	db 10
    2289/    78BC : 00                  	db 0
    2290/    78BD :                     L96:
    2291/    78BD : 20                  	db 32
    2292/    78BE : 20                  	db 32
    2293/    78BF : 44                  	db 68
    2294/    78C0 : 69                  	db 105
    2295/    78C1 : 73                  	db 115
    2296/    78C2 : 63                  	db 99
    2297/    78C3 : 72                  	db 114
    2298/    78C4 : 3A                  	db 58
    2299/    78C5 : 20                  	db 32
    2300/    78C6 : 20                  	db 32
    2301/    78C7 : 20                  	db 32
    2302/    78C8 : 20                  	db 32
    2303/    78C9 : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 42 - 10/28/2020 10:49:19


    2304/    78CA : 20                  	db 32
    2305/    78CB : 20                  	db 32
    2306/    78CC : 20                  	db 32
    2307/    78CD : 20                  	db 32
    2308/    78CE : 20                  	db 32
    2309/    78CF : 20                  	db 32
    2310/    78D0 : 20                  	db 32
    2311/    78D1 : 20                  	db 32
    2312/    78D2 : 25                  	db 37
    2313/    78D3 : 64                  	db 100
    2314/    78D4 : 0A                  	db 10
    2315/    78D5 : 00                  	db 0
    2316/    78D6 :                     L95:
    2317/    78D6 : 20                  	db 32
    2318/    78D7 : 20                  	db 32
    2319/    78D8 : 20                  	db 32
    2320/    78D9 : 20                  	db 32
    2321/    78DA : 20                  	db 32
    2322/    78DB : 20                  	db 32
    2323/    78DC : 20                  	db 32
    2324/    78DD : 20                  	db 32
    2325/    78DE : 73                  	db 115
    2326/    78DF : 68                  	db 104
    2327/    78E0 : 6F                  	db 111
    2328/    78E1 : 75                  	db 117
    2329/    78E2 : 6C                  	db 108
    2330/    78E3 : 64                  	db 100
    2331/    78E4 : 20                  	db 32
    2332/    78E5 : 62                  	db 98
    2333/    78E6 : 65                  	db 101
    2334/    78E7 : 3A                  	db 58
    2335/    78E8 : 20                  	db 32
    2336/    78E9 : 20                  	db 32
    2337/    78EA : 20                  	db 32
    2338/    78EB : 28                  	db 40
    2339/    78EC : 69                  	db 105
    2340/    78ED : 6D                  	db 109
    2341/    78EE : 70                  	db 112
    2342/    78EF : 6C                  	db 108
    2343/    78F0 : 65                  	db 101
    2344/    78F1 : 6D                  	db 109
    2345/    78F2 : 65                  	db 101
    2346/    78F3 : 6E                  	db 110
    2347/    78F4 : 74                  	db 116
    2348/    78F5 : 61                  	db 97
    2349/    78F6 : 74                  	db 116
    2350/    78F7 : 69                  	db 105
    2351/    78F8 : 6F                  	db 111
    2352/    78F9 : 6E                  	db 110
    2353/    78FA : 2D                  	db 45
    2354/    78FB : 64                  	db 100
    2355/    78FC : 65                  	db 101
    2356/    78FD : 70                  	db 112
    2357/    78FE : 65                  	db 101
    2358/    78FF : 6E                  	db 110
    2359/    7900 : 64                  	db 100
    2360/    7901 : 65                  	db 101
    2361/    7902 : 6E                  	db 110
    2362/    7903 : 74                  	db 116
    2363/    7904 : 29                  	db 41
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 43 - 10/28/2020 10:49:19


    2364/    7905 : 0A                  	db 10
    2365/    7906 : 00                  	db 0
    2366/    7907 :                     L94:
    2367/    7907 : 20                  	db 32
    2368/    7908 : 20                  	db 32
    2369/    7909 : 50                  	db 80
    2370/    790A : 74                  	db 116
    2371/    790B : 72                  	db 114
    2372/    790C : 5F                  	db 95
    2373/    790D : 43                  	db 67
    2374/    790E : 6F                  	db 111
    2375/    790F : 6D                  	db 109
    2376/    7910 : 70                  	db 112
    2377/    7911 : 3A                  	db 58
    2378/    7912 : 20                  	db 32
    2379/    7913 : 20                  	db 32
    2380/    7914 : 20                  	db 32
    2381/    7915 : 20                  	db 32
    2382/    7916 : 20                  	db 32
    2383/    7917 : 20                  	db 32
    2384/    7918 : 20                  	db 32
    2385/    7919 : 20                  	db 32
    2386/    791A : 20                  	db 32
    2387/    791B : 20                  	db 32
    2388/    791C : 25                  	db 37
    2389/    791D : 64                  	db 100
    2390/    791E : 0A                  	db 10
    2391/    791F : 00                  	db 0
    2392/    7920 :                     L93:
    2393/    7920 : 50                  	db 80
    2394/    7921 : 74                  	db 116
    2395/    7922 : 72                  	db 114
    2396/    7923 : 5F                  	db 95
    2397/    7924 : 47                  	db 71
    2398/    7925 : 6C                  	db 108
    2399/    7926 : 6F                  	db 111
    2400/    7927 : 62                  	db 98
    2401/    7928 : 2D                  	db 45
    2402/    7929 : 3E                  	db 62
    2403/    792A : 0A                  	db 10
    2404/    792B : 00                  	db 0
    2405/    792C :                     L92:
    2406/    792C : 20                  	db 32
    2407/    792D : 20                  	db 32
    2408/    792E : 20                  	db 32
    2409/    792F : 20                  	db 32
    2410/    7930 : 20                  	db 32
    2411/    7931 : 20                  	db 32
    2412/    7932 : 20                  	db 32
    2413/    7933 : 20                  	db 32
    2414/    7934 : 73                  	db 115
    2415/    7935 : 68                  	db 104
    2416/    7936 : 6F                  	db 111
    2417/    7937 : 75                  	db 117
    2418/    7938 : 6C                  	db 108
    2419/    7939 : 64                  	db 100
    2420/    793A : 20                  	db 32
    2421/    793B : 62                  	db 98
    2422/    793C : 65                  	db 101
    2423/    793D : 3A                  	db 58
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 44 - 10/28/2020 10:49:19


    2424/    793E : 20                  	db 32
    2425/    793F : 20                  	db 32
    2426/    7940 : 20                  	db 32
    2427/    7941 : 4E                  	db 78
    2428/    7942 : 75                  	db 117
    2429/    7943 : 6D                  	db 109
    2430/    7944 : 62                  	db 98
    2431/    7945 : 65                  	db 101
    2432/    7946 : 72                  	db 114
    2433/    7947 : 5F                  	db 95
    2434/    7948 : 4F                  	db 79
    2435/    7949 : 66                  	db 102
    2436/    794A : 5F                  	db 95
    2437/    794B : 52                  	db 82
    2438/    794C : 75                  	db 117
    2439/    794D : 6E                  	db 110
    2440/    794E : 73                  	db 115
    2441/    794F : 20                  	db 32
    2442/    7950 : 2B                  	db 43
    2443/    7951 : 20                  	db 32
    2444/    7952 : 31                  	db 49
    2445/    7953 : 30                  	db 48
    2446/    7954 : 0A                  	db 10
    2447/    7955 : 00                  	db 0
    2448/    7956 :                     L89:
    2449/    7956 : 41                  	db 65
    2450/    7957 : 72                  	db 114
    2451/    7958 : 72                  	db 114
    2452/    7959 : 5F                  	db 95
    2453/    795A : 32                  	db 50
    2454/    795B : 5F                  	db 95
    2455/    795C : 47                  	db 71
    2456/    795D : 6C                  	db 108
    2457/    795E : 6F                  	db 111
    2458/    795F : 62                  	db 98
    2459/    7960 : 5B                  	db 91
    2460/    7961 : 38                  	db 56
    2461/    7962 : 5D                  	db 93
    2462/    7963 : 5B                  	db 91
    2463/    7964 : 37                  	db 55
    2464/    7965 : 5D                  	db 93
    2465/    7966 : 3A                  	db 58
    2466/    7967 : 20                  	db 32
    2467/    7968 : 20                  	db 32
    2468/    7969 : 20                  	db 32
    2469/    796A : 20                  	db 32
    2470/    796B : 25                  	db 37
    2471/    796C : 64                  	db 100
    2472/    796D : 0A                  	db 10
    2473/    796E : 00                  	db 0
    2474/    796F :                     L87:
    2475/    796F : 41                  	db 65
    2476/    7970 : 72                  	db 114
    2477/    7971 : 72                  	db 114
    2478/    7972 : 5F                  	db 95
    2479/    7973 : 31                  	db 49
    2480/    7974 : 5F                  	db 95
    2481/    7975 : 47                  	db 71
    2482/    7976 : 6C                  	db 108
    2483/    7977 : 6F                  	db 111
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 45 - 10/28/2020 10:49:19


    2484/    7978 : 62                  	db 98
    2485/    7979 : 5B                  	db 91
    2486/    797A : 38                  	db 56
    2487/    797B : 5D                  	db 93
    2488/    797C : 3A                  	db 58
    2489/    797D : 20                  	db 32
    2490/    797E : 20                  	db 32
    2491/    797F : 20                  	db 32
    2492/    7980 : 20                  	db 32
    2493/    7981 : 20                  	db 32
    2494/    7982 : 20                  	db 32
    2495/    7983 : 20                  	db 32
    2496/    7984 : 25                  	db 37
    2497/    7985 : 64                  	db 100
    2498/    7986 : 0A                  	db 10
    2499/    7987 : 00                  	db 0
    2500/    7988 :                     L86:
    2501/    7988 : 43                  	db 67
    2502/    7989 : 68                  	db 104
    2503/    798A : 5F                  	db 95
    2504/    798B : 32                  	db 50
    2505/    798C : 5F                  	db 95
    2506/    798D : 47                  	db 71
    2507/    798E : 6C                  	db 108
    2508/    798F : 6F                  	db 111
    2509/    7990 : 62                  	db 98
    2510/    7991 : 3A                  	db 58
    2511/    7992 : 20                  	db 32
    2512/    7993 : 20                  	db 32
    2513/    7994 : 20                  	db 32
    2514/    7995 : 20                  	db 32
    2515/    7996 : 20                  	db 32
    2516/    7997 : 20                  	db 32
    2517/    7998 : 20                  	db 32
    2518/    7999 : 20                  	db 32
    2519/    799A : 20                  	db 32
    2520/    799B : 20                  	db 32
    2521/    799C : 20                  	db 32
    2522/    799D : 25                  	db 37
    2523/    799E : 63                  	db 99
    2524/    799F : 0A                  	db 10
    2525/    79A0 : 00                  	db 0
    2526/    79A1 :                     L85:
    2527/    79A1 : 20                  	db 32
    2528/    79A2 : 20                  	db 32
    2529/    79A3 : 20                  	db 32
    2530/    79A4 : 20                  	db 32
    2531/    79A5 : 20                  	db 32
    2532/    79A6 : 20                  	db 32
    2533/    79A7 : 20                  	db 32
    2534/    79A8 : 20                  	db 32
    2535/    79A9 : 73                  	db 115
    2536/    79AA : 68                  	db 104
    2537/    79AB : 6F                  	db 111
    2538/    79AC : 75                  	db 117
    2539/    79AD : 6C                  	db 108
    2540/    79AE : 64                  	db 100
    2541/    79AF : 20                  	db 32
    2542/    79B0 : 62                  	db 98
    2543/    79B1 : 65                  	db 101
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 46 - 10/28/2020 10:49:19


    2544/    79B2 : 3A                  	db 58
    2545/    79B3 : 20                  	db 32
    2546/    79B4 : 20                  	db 32
    2547/    79B5 : 20                  	db 32
    2548/    79B6 : 25                  	db 37
    2549/    79B7 : 63                  	db 99
    2550/    79B8 : 0A                  	db 10
    2551/    79B9 : 00                  	db 0
    2552/    79BA :                     L84:
    2553/    79BA : 43                  	db 67
    2554/    79BB : 68                  	db 104
    2555/    79BC : 5F                  	db 95
    2556/    79BD : 31                  	db 49
    2557/    79BE : 5F                  	db 95
    2558/    79BF : 47                  	db 71
    2559/    79C0 : 6C                  	db 108
    2560/    79C1 : 6F                  	db 111
    2561/    79C2 : 62                  	db 98
    2562/    79C3 : 3A                  	db 58
    2563/    79C4 : 20                  	db 32
    2564/    79C5 : 20                  	db 32
    2565/    79C6 : 20                  	db 32
    2566/    79C7 : 20                  	db 32
    2567/    79C8 : 20                  	db 32
    2568/    79C9 : 20                  	db 32
    2569/    79CA : 20                  	db 32
    2570/    79CB : 20                  	db 32
    2571/    79CC : 20                  	db 32
    2572/    79CD : 20                  	db 32
    2573/    79CE : 20                  	db 32
    2574/    79CF : 25                  	db 37
    2575/    79D0 : 63                  	db 99
    2576/    79D1 : 0A                  	db 10
    2577/    79D2 : 00                  	db 0
    2578/    79D3 :                     L83:
    2579/    79D3 : 42                  	db 66
    2580/    79D4 : 6F                  	db 111
    2581/    79D5 : 6F                  	db 111
    2582/    79D6 : 6C                  	db 108
    2583/    79D7 : 5F                  	db 95
    2584/    79D8 : 47                  	db 71
    2585/    79D9 : 6C                  	db 108
    2586/    79DA : 6F                  	db 111
    2587/    79DB : 62                  	db 98
    2588/    79DC : 3A                  	db 58
    2589/    79DD : 20                  	db 32
    2590/    79DE : 20                  	db 32
    2591/    79DF : 20                  	db 32
    2592/    79E0 : 20                  	db 32
    2593/    79E1 : 20                  	db 32
    2594/    79E2 : 20                  	db 32
    2595/    79E3 : 20                  	db 32
    2596/    79E4 : 20                  	db 32
    2597/    79E5 : 20                  	db 32
    2598/    79E6 : 20                  	db 32
    2599/    79E7 : 20                  	db 32
    2600/    79E8 : 25                  	db 37
    2601/    79E9 : 64                  	db 100
    2602/    79EA : 0A                  	db 10
    2603/    79EB : 00                  	db 0
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 47 - 10/28/2020 10:49:19


    2604/    79EC :                     L82:
    2605/    79EC : 20                  	db 32
    2606/    79ED : 20                  	db 32
    2607/    79EE : 20                  	db 32
    2608/    79EF : 20                  	db 32
    2609/    79F0 : 20                  	db 32
    2610/    79F1 : 20                  	db 32
    2611/    79F2 : 20                  	db 32
    2612/    79F3 : 20                  	db 32
    2613/    79F4 : 73                  	db 115
    2614/    79F5 : 68                  	db 104
    2615/    79F6 : 6F                  	db 111
    2616/    79F7 : 75                  	db 117
    2617/    79F8 : 6C                  	db 108
    2618/    79F9 : 64                  	db 100
    2619/    79FA : 20                  	db 32
    2620/    79FB : 62                  	db 98
    2621/    79FC : 65                  	db 101
    2622/    79FD : 3A                  	db 58
    2623/    79FE : 20                  	db 32
    2624/    79FF : 20                  	db 32
    2625/    7A00 : 20                  	db 32
    2626/    7A01 : 25                  	db 37
    2627/    7A02 : 64                  	db 100
    2628/    7A03 : 0A                  	db 10
    2629/    7A04 : 00                  	db 0
    2630/    7A05 :                     L81:
    2631/    7A05 : 49                  	db 73
    2632/    7A06 : 6E                  	db 110
    2633/    7A07 : 74                  	db 116
    2634/    7A08 : 5F                  	db 95
    2635/    7A09 : 47                  	db 71
    2636/    7A0A : 6C                  	db 108
    2637/    7A0B : 6F                  	db 111
    2638/    7A0C : 62                  	db 98
    2639/    7A0D : 3A                  	db 58
    2640/    7A0E : 20                  	db 32
    2641/    7A0F : 20                  	db 32
    2642/    7A10 : 20                  	db 32
    2643/    7A11 : 20                  	db 32
    2644/    7A12 : 20                  	db 32
    2645/    7A13 : 20                  	db 32
    2646/    7A14 : 20                  	db 32
    2647/    7A15 : 20                  	db 32
    2648/    7A16 : 20                  	db 32
    2649/    7A17 : 20                  	db 32
    2650/    7A18 : 20                  	db 32
    2651/    7A19 : 20                  	db 32
    2652/    7A1A : 25                  	db 37
    2653/    7A1B : 64                  	db 100
    2654/    7A1C : 0A                  	db 10
    2655/    7A1D : 00                  	db 0
    2656/    7A1E :                     L80:
    2657/    7A1E : 46                  	db 70
    2658/    7A1F : 69                  	db 105
    2659/    7A20 : 6E                  	db 110
    2660/    7A21 : 61                  	db 97
    2661/    7A22 : 6C                  	db 108
    2662/    7A23 : 20                  	db 32
    2663/    7A24 : 76                  	db 118
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 48 - 10/28/2020 10:49:19


    2664/    7A25 : 61                  	db 97
    2665/    7A26 : 6C                  	db 108
    2666/    7A27 : 75                  	db 117
    2667/    7A28 : 65                  	db 101
    2668/    7A29 : 73                  	db 115
    2669/    7A2A : 20                  	db 32
    2670/    7A2B : 6F                  	db 111
    2671/    7A2C : 66                  	db 102
    2672/    7A2D : 20                  	db 32
    2673/    7A2E : 74                  	db 116
    2674/    7A2F : 68                  	db 104
    2675/    7A30 : 65                  	db 101
    2676/    7A31 : 20                  	db 32
    2677/    7A32 : 76                  	db 118
    2678/    7A33 : 61                  	db 97
    2679/    7A34 : 72                  	db 114
    2680/    7A35 : 69                  	db 105
    2681/    7A36 : 61                  	db 97
    2682/    7A37 : 62                  	db 98
    2683/    7A38 : 6C                  	db 108
    2684/    7A39 : 65                  	db 101
    2685/    7A3A : 73                  	db 115
    2686/    7A3B : 20                  	db 32
    2687/    7A3C : 75                  	db 117
    2688/    7A3D : 73                  	db 115
    2689/    7A3E : 65                  	db 101
    2690/    7A3F : 64                  	db 100
    2691/    7A40 : 20                  	db 32
    2692/    7A41 : 69                  	db 105
    2693/    7A42 : 6E                  	db 110
    2694/    7A43 : 20                  	db 32
    2695/    7A44 : 74                  	db 116
    2696/    7A45 : 68                  	db 104
    2697/    7A46 : 65                  	db 101
    2698/    7A47 : 20                  	db 32
    2699/    7A48 : 62                  	db 98
    2700/    7A49 : 65                  	db 101
    2701/    7A4A : 6E                  	db 110
    2702/    7A4B : 63                  	db 99
    2703/    7A4C : 68                  	db 104
    2704/    7A4D : 6D                  	db 109
    2705/    7A4E : 61                  	db 97
    2706/    7A4F : 72                  	db 114
    2707/    7A50 : 6B                  	db 107
    2708/    7A51 : 3A                  	db 58
    2709/    7A52 : 0A                  	db 10
    2710/    7A53 : 00                  	db 0
    2711/    7A54 :                     L79:
    2712/    7A54 : 45                  	db 69
    2713/    7A55 : 78                  	db 120
    2714/    7A56 : 65                  	db 101
    2715/    7A57 : 63                  	db 99
    2716/    7A58 : 75                  	db 117
    2717/    7A59 : 74                  	db 116
    2718/    7A5A : 69                  	db 105
    2719/    7A5B : 6F                  	db 111
    2720/    7A5C : 6E                  	db 110
    2721/    7A5D : 20                  	db 32
    2722/    7A5E : 65                  	db 101
    2723/    7A5F : 6E                  	db 110
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 49 - 10/28/2020 10:49:19


    2724/    7A60 : 64                  	db 100
    2725/    7A61 : 73                  	db 115
    2726/    7A62 : 21                  	db 33
    2727/    7A63 : 40                  	db 64
    2728/    7A64 : 23                  	db 35
    2729/    7A65 : 0A                  	db 10
    2730/    7A66 : 00                  	db 0
    2731/    7A67 :                     L78:
    2732/    7A67 : 44                  	db 68
    2733/    7A68 : 48                  	db 72
    2734/    7A69 : 52                  	db 82
    2735/    7A6A : 59                  	db 89
    2736/    7A6B : 53                  	db 83
    2737/    7A6C : 54                  	db 84
    2738/    7A6D : 4F                  	db 79
    2739/    7A6E : 4E                  	db 78
    2740/    7A6F : 45                  	db 69
    2741/    7A70 : 20                  	db 32
    2742/    7A71 : 50                  	db 80
    2743/    7A72 : 52                  	db 82
    2744/    7A73 : 4F                  	db 79
    2745/    7A74 : 47                  	db 71
    2746/    7A75 : 52                  	db 82
    2747/    7A76 : 41                  	db 65
    2748/    7A77 : 4D                  	db 77
    2749/    7A78 : 2C                  	db 44
    2750/    7A79 : 20                  	db 32
    2751/    7A7A : 33                  	db 51
    2752/    7A7B : 27                  	db 39
    2753/    7A7C : 52                  	db 82
    2754/    7A7D : 44                  	db 68
    2755/    7A7E : 20                  	db 32
    2756/    7A7F : 53                  	db 83
    2757/    7A80 : 54                  	db 84
    2758/    7A81 : 52                  	db 82
    2759/    7A82 : 49                  	db 73
    2760/    7A83 : 4E                  	db 78
    2761/    7A84 : 47                  	db 71
    2762/    7A85 : 00                  	db 0
    2763/    7A86 :                     L65:
    2764/    7A86 : 44                  	db 68
    2765/    7A87 : 48                  	db 72
    2766/    7A88 : 52                  	db 82
    2767/    7A89 : 59                  	db 89
    2768/    7A8A : 53                  	db 83
    2769/    7A8B : 54                  	db 84
    2770/    7A8C : 4F                  	db 79
    2771/    7A8D : 4E                  	db 78
    2772/    7A8E : 45                  	db 69
    2773/    7A8F : 20                  	db 32
    2774/    7A90 : 50                  	db 80
    2775/    7A91 : 52                  	db 82
    2776/    7A92 : 4F                  	db 79
    2777/    7A93 : 47                  	db 71
    2778/    7A94 : 52                  	db 82
    2779/    7A95 : 41                  	db 65
    2780/    7A96 : 4D                  	db 77
    2781/    7A97 : 2C                  	db 44
    2782/    7A98 : 20                  	db 32
    2783/    7A99 : 32                  	db 50
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 50 - 10/28/2020 10:49:19


    2784/    7A9A : 27                  	db 39
    2785/    7A9B : 4E                  	db 78
    2786/    7A9C : 44                  	db 68
    2787/    7A9D : 20                  	db 32
    2788/    7A9E : 53                  	db 83
    2789/    7A9F : 54                  	db 84
    2790/    7AA0 : 52                  	db 82
    2791/    7AA1 : 49                  	db 73
    2792/    7AA2 : 4E                  	db 78
    2793/    7AA3 : 47                  	db 71
    2794/    7AA4 : 00                  	db 0
    2795/    7AA5 :                     L60:
    2796/    7AA5 : 45                  	db 69
    2797/    7AA6 : 78                  	db 120
    2798/    7AA7 : 65                  	db 101
    2799/    7AA8 : 63                  	db 99
    2800/    7AA9 : 75                  	db 117
    2801/    7AAA : 74                  	db 116
    2802/    7AAB : 69                  	db 105
    2803/    7AAC : 6F                  	db 111
    2804/    7AAD : 6E                  	db 110
    2805/    7AAE : 20                  	db 32
    2806/    7AAF : 73                  	db 115
    2807/    7AB0 : 74                  	db 116
    2808/    7AB1 : 61                  	db 97
    2809/    7AB2 : 72                  	db 114
    2810/    7AB3 : 74                  	db 116
    2811/    7AB4 : 73                  	db 115
    2812/    7AB5 : 2C                  	db 44
    2813/    7AB6 : 20                  	db 32
    2814/    7AB7 : 25                  	db 37
    2815/    7AB8 : 64                  	db 100
    2816/    7AB9 : 20                  	db 32
    2817/    7ABA : 72                  	db 114
    2818/    7ABB : 75                  	db 117
    2819/    7ABC : 6E                  	db 110
    2820/    7ABD : 73                  	db 115
    2821/    7ABE : 20                  	db 32
    2822/    7ABF : 74                  	db 116
    2823/    7AC0 : 68                  	db 104
    2824/    7AC1 : 72                  	db 114
    2825/    7AC2 : 6F                  	db 111
    2826/    7AC3 : 75                  	db 117
    2827/    7AC4 : 67                  	db 103
    2828/    7AC5 : 68                  	db 104
    2829/    7AC6 : 20                  	db 32
    2830/    7AC7 : 44                  	db 68
    2831/    7AC8 : 68                  	db 104
    2832/    7AC9 : 72                  	db 114
    2833/    7ACA : 79                  	db 121
    2834/    7ACB : 73                  	db 115
    2835/    7ACC : 74                  	db 116
    2836/    7ACD : 6F                  	db 111
    2837/    7ACE : 6E                  	db 110
    2838/    7ACF : 65                  	db 101
    2839/    7AD0 : 20                  	db 32
    2840/    7AD1 : 21                  	db 33
    2841/    7AD2 : 40                  	db 64
    2842/    7AD3 : 23                  	db 35
    2843/    7AD4 : 0A                  	db 10
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 51 - 10/28/2020 10:49:19


    2844/    7AD5 : 00                  	db 0
    2845/    7AD6 :                     L59:
    2846/    7AD6 : 50                  	db 80
    2847/    7AD7 : 6C                  	db 108
    2848/    7AD8 : 65                  	db 101
    2849/    7AD9 : 61                  	db 97
    2850/    7ADA : 73                  	db 115
    2851/    7ADB : 65                  	db 101
    2852/    7ADC : 20                  	db 32
    2853/    7ADD : 67                  	db 103
    2854/    7ADE : 69                  	db 105
    2855/    7ADF : 76                  	db 118
    2856/    7AE0 : 65                  	db 101
    2857/    7AE1 : 20                  	db 32
    2858/    7AE2 : 74                  	db 116
    2859/    7AE3 : 68                  	db 104
    2860/    7AE4 : 65                  	db 101
    2861/    7AE5 : 20                  	db 32
    2862/    7AE6 : 6E                  	db 110
    2863/    7AE7 : 75                  	db 117
    2864/    7AE8 : 6D                  	db 109
    2865/    7AE9 : 62                  	db 98
    2866/    7AEA : 65                  	db 101
    2867/    7AEB : 72                  	db 114
    2868/    7AEC : 20                  	db 32
    2869/    7AED : 6F                  	db 111
    2870/    7AEE : 66                  	db 102
    2871/    7AEF : 20                  	db 32
    2872/    7AF0 : 72                  	db 114
    2873/    7AF1 : 75                  	db 117
    2874/    7AF2 : 6E                  	db 110
    2875/    7AF3 : 73                  	db 115
    2876/    7AF4 : 20                  	db 32
    2877/    7AF5 : 74                  	db 116
    2878/    7AF6 : 68                  	db 104
    2879/    7AF7 : 72                  	db 114
    2880/    7AF8 : 6F                  	db 111
    2881/    7AF9 : 75                  	db 117
    2882/    7AFA : 67                  	db 103
    2883/    7AFB : 68                  	db 104
    2884/    7AFC : 20                  	db 32
    2885/    7AFD : 74                  	db 116
    2886/    7AFE : 68                  	db 104
    2887/    7AFF : 65                  	db 101
    2888/    7B00 : 20                  	db 32
    2889/    7B01 : 62                  	db 98
    2890/    7B02 : 65                  	db 101
    2891/    7B03 : 6E                  	db 110
    2892/    7B04 : 63                  	db 99
    2893/    7B05 : 68                  	db 104
    2894/    7B06 : 6D                  	db 109
    2895/    7B07 : 61                  	db 97
    2896/    7B08 : 72                  	db 114
    2897/    7B09 : 6B                  	db 107
    2898/    7B0A : 3A                  	db 58
    2899/    7B0B : 20                  	db 32
    2900/    7B0C : 00                  	db 0
    2901/    7B0D :                     L58:
    2902/    7B0D : 50                  	db 80
    2903/    7B0E : 72                  	db 114
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 52 - 10/28/2020 10:49:19


    2904/    7B0F : 6F                  	db 111
    2905/    7B10 : 67                  	db 103
    2906/    7B11 : 72                  	db 114
    2907/    7B12 : 61                  	db 97
    2908/    7B13 : 6D                  	db 109
    2909/    7B14 : 20                  	db 32
    2910/    7B15 : 63                  	db 99
    2911/    7B16 : 6F                  	db 111
    2912/    7B17 : 6D                  	db 109
    2913/    7B18 : 70                  	db 112
    2914/    7B19 : 69                  	db 105
    2915/    7B1A : 6C                  	db 108
    2916/    7B1B : 65                  	db 101
    2917/    7B1C : 64                  	db 100
    2918/    7B1D : 20                  	db 32
    2919/    7B1E : 77                  	db 119
    2920/    7B1F : 69                  	db 105
    2921/    7B20 : 74                  	db 116
    2922/    7B21 : 68                  	db 104
    2923/    7B22 : 6F                  	db 111
    2924/    7B23 : 75                  	db 117
    2925/    7B24 : 74                  	db 116
    2926/    7B25 : 20                  	db 32
    2927/    7B26 : 27                  	db 39
    2928/    7B27 : 72                  	db 114
    2929/    7B28 : 65                  	db 101
    2930/    7B29 : 67                  	db 103
    2931/    7B2A : 69                  	db 105
    2932/    7B2B : 73                  	db 115
    2933/    7B2C : 74                  	db 116
    2934/    7B2D : 65                  	db 101
    2935/    7B2E : 72                  	db 114
    2936/    7B2F : 27                  	db 39
    2937/    7B30 : 20                  	db 32
    2938/    7B31 : 61                  	db 97
    2939/    7B32 : 74                  	db 116
    2940/    7B33 : 74                  	db 116
    2941/    7B34 : 72                  	db 114
    2942/    7B35 : 69                  	db 105
    2943/    7B36 : 62                  	db 98
    2944/    7B37 : 75                  	db 117
    2945/    7B38 : 74                  	db 116
    2946/    7B39 : 65                  	db 101
    2947/    7B3A : 0A                  	db 10
    2948/    7B3B : 00                  	db 0
    2949/    7B3C :                     L57:
    2950/    7B3C : 50                  	db 80
    2951/    7B3D : 72                  	db 114
    2952/    7B3E : 6F                  	db 111
    2953/    7B3F : 67                  	db 103
    2954/    7B40 : 72                  	db 114
    2955/    7B41 : 61                  	db 97
    2956/    7B42 : 6D                  	db 109
    2957/    7B43 : 20                  	db 32
    2958/    7B44 : 63                  	db 99
    2959/    7B45 : 6F                  	db 111
    2960/    7B46 : 6D                  	db 109
    2961/    7B47 : 70                  	db 112
    2962/    7B48 : 69                  	db 105
    2963/    7B49 : 6C                  	db 108
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 53 - 10/28/2020 10:49:19


    2964/    7B4A : 65                  	db 101
    2965/    7B4B : 64                  	db 100
    2966/    7B4C : 20                  	db 32
    2967/    7B4D : 77                  	db 119
    2968/    7B4E : 69                  	db 105
    2969/    7B4F : 74                  	db 116
    2970/    7B50 : 68                  	db 104
    2971/    7B51 : 20                  	db 32
    2972/    7B52 : 27                  	db 39
    2973/    7B53 : 72                  	db 114
    2974/    7B54 : 65                  	db 101
    2975/    7B55 : 67                  	db 103
    2976/    7B56 : 69                  	db 105
    2977/    7B57 : 73                  	db 115
    2978/    7B58 : 74                  	db 116
    2979/    7B59 : 65                  	db 101
    2980/    7B5A : 72                  	db 114
    2981/    7B5B : 27                  	db 39
    2982/    7B5C : 20                  	db 32
    2983/    7B5D : 61                  	db 97
    2984/    7B5E : 74                  	db 116
    2985/    7B5F : 74                  	db 116
    2986/    7B60 : 72                  	db 114
    2987/    7B61 : 69                  	db 105
    2988/    7B62 : 62                  	db 98
    2989/    7B63 : 75                  	db 117
    2990/    7B64 : 74                  	db 116
    2991/    7B65 : 65                  	db 101
    2992/    7B66 : 0A                  	db 10
    2993/    7B67 : 00                  	db 0
    2994/    7B68 :                     L54:
    2995/    7B68 : 44                  	db 68
    2996/    7B69 : 68                  	db 104
    2997/    7B6A : 72                  	db 114
    2998/    7B6B : 79                  	db 121
    2999/    7B6C : 73                  	db 115
    3000/    7B6D : 74                  	db 116
    3001/    7B6E : 6F                  	db 111
    3002/    7B6F : 6E                  	db 110
    3003/    7B70 : 65                  	db 101
    3004/    7B71 : 20                  	db 32
    3005/    7B72 : 42                  	db 66
    3006/    7B73 : 65                  	db 101
    3007/    7B74 : 6E                  	db 110
    3008/    7B75 : 63                  	db 99
    3009/    7B76 : 68                  	db 104
    3010/    7B77 : 6D                  	db 109
    3011/    7B78 : 61                  	db 97
    3012/    7B79 : 72                  	db 114
    3013/    7B7A : 6B                  	db 107
    3014/    7B7B : 2C                  	db 44
    3015/    7B7C : 20                  	db 32
    3016/    7B7D : 56                  	db 86
    3017/    7B7E : 65                  	db 101
    3018/    7B7F : 72                  	db 114
    3019/    7B80 : 73                  	db 115
    3020/    7B81 : 69                  	db 105
    3021/    7B82 : 6F                  	db 111
    3022/    7B83 : 6E                  	db 110
    3023/    7B84 : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 54 - 10/28/2020 10:49:19


    3024/    7B85 : 32                  	db 50
    3025/    7B86 : 2E                  	db 46
    3026/    7B87 : 31                  	db 49
    3027/    7B88 : 20                  	db 32
    3028/    7B89 : 28                  	db 40
    3029/    7B8A : 4C                  	db 76
    3030/    7B8B : 61                  	db 97
    3031/    7B8C : 6E                  	db 110
    3032/    7B8D : 67                  	db 103
    3033/    7B8E : 75                  	db 117
    3034/    7B8F : 61                  	db 97
    3035/    7B90 : 67                  	db 103
    3036/    7B91 : 65                  	db 101
    3037/    7B92 : 3A                  	db 58
    3038/    7B93 : 20                  	db 32
    3039/    7B94 : 43                  	db 67
    3040/    7B95 : 29                  	db 41
    3041/    7B96 : 0A                  	db 10
    3042/    7B97 : 00                  	db 0
    3043/    7B98 :                     L53:
    3044/    7B98 : 0A                  	db 10
    3045/    7B99 : 00                  	db 0
    3046/    7B9A :                     L50:
    3047/    7B9A : 41                  	db 65
    3048/    7B9B : 72                  	db 114
    3049/    7B9C : 72                  	db 114
    3050/    7B9D : 5F                  	db 95
    3051/    7B9E : 32                  	db 50
    3052/    7B9F : 5F                  	db 95
    3053/    7BA0 : 47                  	db 71
    3054/    7BA1 : 6C                  	db 108
    3055/    7BA2 : 6F                  	db 111
    3056/    7BA3 : 62                  	db 98
    3057/    7BA4 : 5B                  	db 91
    3058/    7BA5 : 38                  	db 56
    3059/    7BA6 : 5D                  	db 93
    3060/    7BA7 : 5B                  	db 91
    3061/    7BA8 : 37                  	db 55
    3062/    7BA9 : 5D                  	db 93
    3063/    7BAA : 3A                  	db 58
    3064/    7BAB : 25                  	db 37
    3065/    7BAC : 78                  	db 120
    3066/    7BAD : 3D                  	db 61
    3067/    7BAE : 25                  	db 37
    3068/    7BAF : 64                  	db 100
    3069/    7BB0 : 0A                  	db 10
    3070/    7BB1 : 00                  	db 0
    3071/    7BB2 :                     L47:
    3072/    7BB2 : 44                  	db 68
    3073/    7BB3 : 48                  	db 72
    3074/    7BB4 : 52                  	db 82
    3075/    7BB5 : 59                  	db 89
    3076/    7BB6 : 53                  	db 83
    3077/    7BB7 : 54                  	db 84
    3078/    7BB8 : 4F                  	db 79
    3079/    7BB9 : 4E                  	db 78
    3080/    7BBA : 45                  	db 69
    3081/    7BBB : 20                  	db 32
    3082/    7BBC : 50                  	db 80
    3083/    7BBD : 52                  	db 82
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 55 - 10/28/2020 10:49:19


    3084/    7BBE : 4F                  	db 79
    3085/    7BBF : 47                  	db 71
    3086/    7BC0 : 52                  	db 82
    3087/    7BC1 : 41                  	db 65
    3088/    7BC2 : 4D                  	db 77
    3089/    7BC3 : 2C                  	db 44
    3090/    7BC4 : 20                  	db 32
    3091/    7BC5 : 31                  	db 49
    3092/    7BC6 : 27                  	db 39
    3093/    7BC7 : 53                  	db 83
    3094/    7BC8 : 54                  	db 84
    3095/    7BC9 : 20                  	db 32
    3096/    7BCA : 53                  	db 83
    3097/    7BCB : 54                  	db 84
    3098/    7BCC : 52                  	db 82
    3099/    7BCD : 49                  	db 73
    3100/    7BCE : 4E                  	db 78
    3101/    7BCF : 47                  	db 71
    3102/    7BD0 : 00                  	db 0
    3103/    7BD1 :                     L46:
    3104/    7BD1 : 44                  	db 68
    3105/    7BD2 : 48                  	db 72
    3106/    7BD3 : 52                  	db 82
    3107/    7BD4 : 59                  	db 89
    3108/    7BD5 : 53                  	db 83
    3109/    7BD6 : 54                  	db 84
    3110/    7BD7 : 4F                  	db 79
    3111/    7BD8 : 4E                  	db 78
    3112/    7BD9 : 45                  	db 69
    3113/    7BDA : 20                  	db 32
    3114/    7BDB : 50                  	db 80
    3115/    7BDC : 52                  	db 82
    3116/    7BDD : 4F                  	db 79
    3117/    7BDE : 47                  	db 71
    3118/    7BDF : 52                  	db 82
    3119/    7BE0 : 41                  	db 65
    3120/    7BE1 : 4D                  	db 77
    3121/    7BE2 : 2C                  	db 44
    3122/    7BE3 : 20                  	db 32
    3123/    7BE4 : 53                  	db 83
    3124/    7BE5 : 4F                  	db 79
    3125/    7BE6 : 4D                  	db 77
    3126/    7BE7 : 45                  	db 69
    3127/    7BE8 : 20                  	db 32
    3128/    7BE9 : 53                  	db 83
    3129/    7BEA : 54                  	db 84
    3130/    7BEB : 52                  	db 82
    3131/    7BEC : 49                  	db 73
    3132/    7BED : 4E                  	db 78
    3133/    7BEE : 47                  	db 71
    3134/    7BEF : 00                  	db 0
    3135/    7BF0 :                     	include lcc1802epiloCX.inc
(1)    1/    7BF0 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    7BF0 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    7BF0 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    7BF0 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    7BF0 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    7BF0 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    7BF0 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    7BF0 :                     ;Jan 28 archived before beginning work on Birthday Compiler
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 56 - 10/28/2020 10:49:19


(1)    9/    7BF0 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    7BF0 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    7BF0 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    7BF0 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    7BF0 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    7BF0 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    7BF0 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/    7BF0 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/    7BF0 :                     ;16-09-20 allow stack relocation 
(1)   18/    7BF0 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/    7BF0 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/    7BF0 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/    7BF0 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/    7BF0 :                     ;17-04-09 don't include call/return for 1806
(1)   23/    7BF0 :                     ;17-10-17 SCRT routines changed to clean stack model i.e. push is stxd stxd, pop is inc lda inc ldn
(1)   24/    7BF0 :                     ;17-10-19 using CPUSPEED instead of LCC1802CPUSPEED, also STACKLOC instead of LCCSTACKLOC
(1)   25/    7BF0 :                     ;17-10-23 extending work area protection from 10-13 above for 1802 as well as 1805
(1)   26/    7BF0 : =0EH                rwork:	equ	memAddr	;work register
(1)   27/    7BF0 :                     ;17-11-25 conditional include for register saves
(1)   28/    7BF0 :                     ;18-01-28 changed onems() to always use 4 instruction loop, accommodate slower CPU speed
(1)   29/    7BF0 :                     ;20-04-28 specific version for COMX-35/Crosslib
(1)   30/    7BF0 :                     ;20-04-29 saving registers for COMX basic
(1)   31/    7BF0 :                     ;20-04-30 changing init for COMX - saving R4&5, using my own SCRT routines.
(1)   32/    7BF0 :                     ;20-05-01 saving D around Call/return
(1)   33/    7BF0 :                     ;20-05-18 added sex r2 in SCRT return routine
(1)   34/    7BF0 :                     ;20-05-23 align for dubdabx - really should move to nstdlib.inc
(1)   35/    7BF0 :                     ;20-06-19 changed lbr die to br on return from main
(1)   36/    7BF0 :                     ;20-07-10 (Marcel) added orgc at start to solve issue with branches to data area (suggested by Bill)
(1)   37/    7BF0 :                     ;20-08-01 dubdabx moved to nstdlib.inc
(1)   38/    7BF0 : (MACRO)              orgc
(1)   39/    7BF0 :                     ;;function_start lcc1802init.inc void function(void)
(1)   40/    7BF0 :                     lcc1802init:
(1)   41/    7BF0 : =>UNDEFINED           IFDEF SAVEREGS
(1)   42/    7BF0 :                         include "saveregs.inc"
(1)   43/    7BF0 : [41]                  ENDIF
(1)   44/    7BF0 : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX - don't set stack or PC, return to BASIC at end
(1)   45/    7BF0 : (MACRO)               	pushr 4
(1)   46/    7BF4 : (MACRO)               	pushr 5
(1)   47/    7BF8 : (MACRO)               	pushr 7			;wjr 20-04-29 save/restore BASIC registers
(1)   48/    7BFC : (MACRO)               	pushr 9	
(1)   49/    7C00 : (MACRO)               	pushr 11
(1)   50/    7C04 : (MACRO)               	pushr 15
(1)   51/    7C08 : (MACRO)             	ldiReg	RCALL,_call
(1)   52/    7C0E : (MACRO)             	ldiReg	RRET,_return
(1)   53/    7C14 : (MACRO)               	Ccall _main		;wjr 20-04-28 start the C program
(1)   54/    7C18 : (MACRO)               	popr  15		;wjr 20-04-29 save/restore BASIC registers
(1)   55/    7C1D : (MACRO)               	popr  11
(1)   56/    7C22 : (MACRO)               	popr  9
(1)   57/    7C27 : (MACRO)               	popr  7
(1)   58/    7C2C : (MACRO)               	popr 5
(1)   59/    7C31 : (MACRO)               	popr 4
(1)   60/    7C36 : (MACRO)               	Cretn			;wjr 20-04-28 hopefully back to COMX Basic
(1)   61/    7C38 : =>FALSE               ELSE
(1)   62/    7C38 :                       IF    MOMCPU<>$1805		;for 1806 use SCAL 
(1)   63/    7C38 :                     	ldiReg	RCALL,_call
(1)   64/    7C38 :                     	ldiReg	RRET,_return
(1)   65/    7C38 :                       ELSE
(1)   66/    7C38 :                     	ldiReg	RCALL,$$_die; _call
(1)   67/    7C38 :                     	ldiReg	RRET,$$_die; _return
(1)   68/    7C38 : [62]                  ENDIF
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 57 - 10/28/2020 10:49:19


(1)   69/    7C38 :                     	  IFNDEF  STACKLOC		;wjr 16-09-20 allow stack relocation
(1)   70/    7C38 :                     		ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   71/    7C38 :                     	  ELSEIF				;wjr 16-09-20
(1)   72/    7C38 :                     		ldiReg	SP,STACKLOC	;wjr 16-09-20 start stack as specified
(1)   73/    7C38 : [69]                	  ENDIF				;wjr 16-09-20
(1)   74/    7C38 :                     		sex	SP
(1)   75/    7C38 :                     		ldiReg	RPC,$$_00000
(1)   76/    7C38 :                     		sep	RPC
(1)   77/    7C38 :                     	$$_00000:
(1)   78/    7C38 :                     		Ccall _main	;call the main routine
(1)   79/    7C38 :                     	$$_die:	br	$$_die		;loop here when main returns
(1)   80/    7C38 :                     		db	0xde,0xad
(1)   81/    7C38 : [44]                  ENDIF
(1)   82/    7C38 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   83/    7C38 :                     _setqOn:
(1)   84/    7C38 : 7B                  	seq
(1)   85/    7C39 : (MACRO)             	Cretn
(1)   86/    7C3B :                     _setqOff:
(1)   87/    7C3B : 7A                  	req
(1)   88/    7C3C : (MACRO)             	Cretn
(1)   89/    7C3E : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   90/    7C3E :                     _modU2:	;16 bit unsigned remainder
(1)   91/    7C3E :                     	; just calls the 16 bit division then puts remainder into return value
(1)   92/    7C3E : (MACRO)                 Ccall _divU2
(1)   93/    7C42 : 8C                      glo regArg1
(1)   94/    7C43 : AF                      plo retVal
(1)   95/    7C44 : 9C                      ghi regArg1
(1)   96/    7C45 : BF                      phi retVal
(1)   97/    7C46 : (MACRO)                 Cretn
(1)   98/    7C48 :                         
(1)   99/    7C48 :                     _modI2:	;16 bit signed remainder
(1)  100/    7C48 :                     	; just calls the 16 bit division then puts remainder into return value
(1)  101/    7C48 : (MACRO)                 Ccall _divI2
(1)  102/    7C4C : 8C                      glo regArg1
(1)  103/    7C4D : AF                      plo retVal
(1)  104/    7C4E : 9C                      ghi regArg1
(1)  105/    7C4F : BF                      phi retVal
(1)  106/    7C50 : (MACRO)                 Cretn
(1)  107/    7C52 : [89]                 ENDIF
(1)  108/    7C52 :                     _out4:	
(1)  109/    7C52 : 8C                  	glo	regArg1
(1)  110/    7C53 : 22                  	dec	sp
(1)  111/    7C54 : 52                  	str	sp
(1)  112/    7C55 : 64                  	out	4
(1)  113/    7C56 : (MACRO)             	Cretn
(1)  114/    7C58 :                     
(1)  115/    7C58 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)  116/    7C58 : =>TRUE                if MOMCPU<>$1805		;for 1806 use SCAL
(1)  117/    7C58 :                     	align 32
(1)  118/    7C60 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)  119/    7C60 : D3                  	sep     R3 ;go to subroutine
(1)  120/    7C61 : E2                  _call:	sex	SP ;make sure X=SP
(1)  121/    7C62 : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  122/    7C62 : BF                  	phi	r15	;save D #wjr 20-05-01
(1)  123/    7C63 : [121]                 ENDIF
(1)  124/    7C63 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)  125/    7C64 : 73                  	stxd
(1)  126/    7C65 : 96                  	ghi	retAddr
(1)  127/    7C66 : 73                  	stxd	
(1)  128/    7C67 : 83                  	glo	RPC ;copy old PC to retAddr
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 58 - 10/28/2020 10:49:19


(1)  129/    7C68 : A6                  	plo	retAddr
(1)  130/    7C69 : 93                  	ghi	RPC
(1)  131/    7C6A : B6                  	phi	retAddr
(1)  132/    7C6B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)  133/    7C6C : B3                  	phi	RPC
(1)  134/    7C6D : 46                  	lda	retAddr
(1)  135/    7C6E : A3                  	plo	RPC
(1)  136/    7C6F : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  137/    7C6F : 9F                  	ghi	r15	;save D #wjr 20-05-01
(1)  138/    7C70 : [136]                 ENDIF
(1)  139/    7C70 : 30 60               	br	_call-1
(1)  140/    7C72 :                     
(1)  141/    7C72 :                     ;Standard subroutine return 
(1)  142/    7C72 : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  143/    7C72 :                     	align 16
(1)  144/    7C80 : [142]                 ENDIF
(1)  145/    7C80 : D3                  	sep	RPC	;return to the original program
(1)  146/    7C81 :                     _return: 
(1)  147/    7C81 : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  148/    7C81 : BF                  	phi	r15	;save D #wjr 20-05-01
(1)  149/    7C82 : E2                          sex r2		;fix x register per marcel
(1)  150/    7C83 : [147]                 ENDIF
(1)  151/    7C83 : 86                  	glo	retAddr	;transfer the current return address to RPC
(1)  152/    7C84 : A3                  	plo	RPC
(1)  153/    7C85 : 96                  	ghi	retAddr
(1)  154/    7C86 : B3                  	phi	RPC
(1)  155/    7C87 : 12                  	inc 	SP
(1)  156/    7C88 : 42                  	lda	SP	;pick up old return address
(1)  157/    7C89 : B6                  	phi	retAddr
(1)  158/    7C8A : 02                  	ldn	SP
(1)  159/    7C8B : A6                  	plo	retAddr
(1)  160/    7C8C : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  161/    7C8C : 9F                  	ghi	r15	;save D #wjr 20-05-01
(1)  162/    7C8D : [160]                 ENDIF
(1)  163/    7C8D : 30 80               	br	_return-1
(1)  164/    7C8F : [116]                ENDIF
(1)  165/    7C8F :                     	align 8
(1)  166/    7C90 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  167/    7C90 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  168/    7C90 :                     ;each loop is 2 instruction times
(1)  169/    7C90 :                     ;so the number of loops needed is 
(1)  170/    7C90 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  171/    7C90 : =>UNDEFINED         	IFNDEF	CPUSPEED
(1)  172/    7C90 : =186A00H            CPUSPEED EQU 1600000	;1.6MHZ default
(1)  173/    7C90 : [171]               	ENDIF
(1)  174/    7C90 : =>FALSE              if MOMCPU=$1805		;for 1806 SCAL
(1)  175/    7C90 :                     SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  176/    7C90 : =>TRUE               else
(1)  177/    7C90 : =1BH                SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  178/    7C90 : [174]                endif 
(1)  179/    7C90 : =>TRUE                    IF (CPUSPEED/16000)>=(SUBOVHD+4);fast enough to need more than subroutine overhead
(1)  180/    7C90 : F8 12               	ldi	(CPUSPEED/1000/16-SUBOVHD)/4
(1)  181/    7C92 : FF 01               $$mslf:	smi	1
(1)  182/    7C94 : E2                  	sex	2
(1)  183/    7C95 : E2                  	sex	2
(1)  184/    7C96 : 3A 92               	bnz	$$mslf
(1)  185/    7C98 : [179]                 ENDIF
(1)  186/    7C98 : (MACRO)             	Cretn
(1)  187/    7C9A :                     
(1)  188/    7C9A :                     
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 59 - 10/28/2020 10:49:19


(1)  189/    7C9A : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  190/    7C9A :                     	align 256
(1)  191/    7D00 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  192/    7D00 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  193/    7D00 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  194/    7D00 : (MACRO)             	ld2z retval
(1)  195/    7D04 :                     $$mulrlp:
(1)  196/    7D04 : (MACRO)             	shru2 regarg2
(1)  197/    7D0A : 3B 16               	bnf $$mulrnoadd
(1)  198/    7D0C :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  199/    7D0C : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  200/    7D16 :                     $$mulrnoadd:
(1)  201/    7D16 : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  202/    7D17 : 3A 1C               	bnz $$mulrshft	;nope, continue
(1)  203/    7D19 : 8D                  	glo regarg2	;check bottom byte
(1)  204/    7D1A : 32 24               	bz $$mulrdone
(1)  205/    7D1C :                     $$mulrshft:
(1)  206/    7D1C : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  207/    7D22 : 30 04               	br $$mulrlp
(1)  208/    7D24 :                     $$mulrdone:		;here the product is in retval
(1)  209/    7D24 : (MACRO)             	cretn
(1)  210/    7D26 :                     
(1)  211/    7D26 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  212/    7D26 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  213/    7D26 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  214/    7D26 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  215/    7D26 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  216/    7D26 :                     	;regarg1 to hold develop remainder, 
(1)  217/    7D26 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  218/    7D26 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  219/    7D26 :                     				;result in D, rwork.hi, DF
(1)  220/    7D26 :                     	glo reg2
(1)  221/    7D26 :                     	str sp
(1)  222/    7D26 :                     	glo reg1
(1)  223/    7D26 :                     	sm
(1)  224/    7D26 :                     	plo R11
(1)  225/    7D26 :                     	ghi reg2
(1)  226/    7D26 :                     	str sp
(1)  227/    7D26 :                     	ghi reg1
(1)  228/    7D26 :                     	smb
(1)  229/    7D26 :                     	endm
(1)  230/    7D26 :                     	
(1)  231/    7D26 :                     ;	pushf R10	;save R10 & leave stack down 1
(1)  232/    7D26 : (MACRO)             	pushr R10	;default push leaves stack clean
(1)  233/    7D2A : 8B                  	glo R11		;and bottom
(1)  234/    7D2B : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  235/    7D2C : (MACRO)             	cpy2 R10,regarg1
(1)  236/    7D30 : (MACRO)             	ld2z retval	;quotient
(1)  237/    7D34 : (MACRO)             	cpy2 rwork,regarg2
(1)  238/    7D38 :                     	
(1)  239/    7D38 : (MACRO)             	testsub R10,regarg2
(1)  240/    7D41 : 3B 5C               	bnf $$computequot	;DF=0 means it didn't fit
(1)  241/    7D43 : BA                  	phi R10	;R10=R10-regarg2
(1)  242/    7D44 : 8B                  	glo R11
(1)  243/    7D45 : AA                  	plo R10
(1)  244/    7D46 :                     	
(1)  245/    7D46 :                     $$again:	;this is the divisor doubling phase
(1)  246/    7D46 : (MACRO)              	testsub R10,regarg2
(1)  247/    7D4F : 3B 5C                	bnf $$computequot	;df=0 means it didn't fit
(1)  248/    7D51 : BA                  	phi R10	;R10=R10-regarg2
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 60 - 10/28/2020 10:49:19


(1)  249/    7D52 : 8B                  	glo R11
(1)  250/    7D53 : AA                  	plo R10 	
(1)  251/    7D54 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  252/    7D5A : 30 46                	br $$again
(1)  253/    7D5C :                      	
(1)  254/    7D5C :                      $$computequot:	;here we're computing the quotient
(1)  255/    7D5C : (MACRO)              	testsub regarg1,regarg2
(1)  256/    7D65 : 3B 6B                	bnf $$testexit
(1)  257/    7D67 : BC                   	phi regarg1		;complete the subtraction
(1)  258/    7D68 : 8B                   	glo R11
(1)  259/    7D69 : AC                   	plo regarg1
(1)  260/    7D6A : 1F                   	inc retval
(1)  261/    7D6B :                      $$testexit:
(1)  262/    7D6B : 9E                   	ghi rwork
(1)  263/    7D6C : F7                   	sm	;top of regarg2 is still on stack
(1)  264/    7D6D : 3A 75                	bnz $$ney0y
(1)  265/    7D6F : 8D                   	glo regarg2
(1)  266/    7D70 : 52                   	str sp
(1)  267/    7D71 : 8E                   	glo rwork
(1)  268/    7D72 : F7                   	sm	;test low order bytes
(1)  269/    7D73 : 32 83                	bz	$$out	;if = we're done
(1)  270/    7D75 :                      $$ney0y:
(1)  271/    7D75 : (MACRO)              	shl2 retval	;double quotient
(1)  272/    7D7B : (MACRO)              	shrU2 regarg2	;halve divisor
(1)  273/    7D81 : 30 5C                	br $$computequot	;continue
(1)  274/    7D83 :                      $$out:
(1)  275/    7D83 :                      ;here the quotient is in retval, remainder in regarg1
(1)  276/    7D83 : 12                    	inc sp	;release work area
(1)  277/    7D84 : 02                  	ldn sp	;recover
(1)  278/    7D85 : AB                  	plo R11	;bottom byte of R11
(1)  279/    7D86 : (MACRO)             	popr R10 ;and all of R10
(1)  280/    7D8B : (MACRO)             	cretn	;and we're done
(1)  281/    7D8D :                     
(1)  282/    7D8D :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  283/    7D8D :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  284/    7D8D :                     _divI2:
(1)  285/    7D8D : 22                      dec	sp	;leave a work area available
(1)  286/    7D8E : 9C                      ghi regArg1
(1)  287/    7D8F : 52                      str sp	;save the sign of the 1st arg
(1)  288/    7D90 : FE                      shl
(1)  289/    7D91 : 3B 9C                   bnf $$pos1	;if the 1st arg is -v
(1)  290/    7D93 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  291/    7D9C :                     $$pos1: ;1st is now +v, check 2nd
(1)  292/    7D9C : 9D                      ghi regArg2
(1)  293/    7D9D : F3                      xor	
(1)  294/    7D9E : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  295/    7D9F : 9D                      ghi regArg2
(1)  296/    7DA0 : FE                      shl
(1)  297/    7DA1 : 3B AC                   bnf $$pos2	;if the 2nd arg is -v
(1)  298/    7DA3 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  299/    7DAC :                     $$pos2: ; both args now +v
(1)  300/    7DAC : 22                      dec sp	;protect workarea on the 1802
(1)  301/    7DAD : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  302/    7DB1 : 12                      inc sp	;recover work area
(1)  303/    7DB2 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  304/    7DB2 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  305/    7DB3 : FE                      shl
(1)  306/    7DB4 : 3B BF                   bnf $$done ;if the signs were different
(1)  307/    7DB6 : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  308/    7DBF :                     $$done:
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 61 - 10/28/2020 10:49:19


(1)  309/    7DBF : (MACRO)                 Cretn ;and we're done - I hope!
(1)  310/    7DC1 : [189]                ENDIF
(1)  311/    7DC1 : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  312/    7DC1 :                     	align 256    ;32 bit operations follow
(1)  313/    7E00 :                     _divu4:
(1)  314/    7E00 :                     ;This is an unsigned 32 bit restoring division
(1)  315/    7E00 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  316/    7E00 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  317/    7E00 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  318/    7E00 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  319/    7E00 :                     
(1)  320/    7E00 : F8 20               	ldi 32		;set loop count
(1)  321/    7E02 : AE                  	plo memaddr	;in temp register
(1)  322/    7E03 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  323/    7E0F :                     $$loop:
(1)  324/    7E0F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  325/    7E1B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  326/    7E27 :                     
(1)  327/    7E27 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  328/    7E3D :                     
(1)  329/    7E3D : FA 80               	ani 0x80	;check the top bit
(1)  330/    7E3F : 32 5D               	bz $$norestore	;if it's 0
(1)  331/    7E41 : 89                  		glo RL8
(1)  332/    7E42 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  333/    7E44 : A9                  		plo RL8
(1)  334/    7E45 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  335/    7E5B : 30 61               	br $$endlp 	;else
(1)  336/    7E5D :                     $$norestore:
(1)  337/    7E5D : 89                  		glo RL8
(1)  338/    7E5E : F9 01               		ori 1	;turn on the bottom bit
(1)  339/    7E60 : A9                  		plo RL8
(1)  340/    7E61 :                     	;end if
(1)  341/    7E61 :                     $$endlp:
(1)  342/    7E61 : 2E                  	dec memaddr	;check the cycle count
(1)  343/    7E62 : 8E                  	glo memaddr
(1)  344/    7E63 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  345/    7E65 :                     	
(1)  346/    7E65 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  347/    7E67 :                     		
(1)  348/    7E67 :                     
(1)  349/    7E67 :                     _mulu4:
(1)  350/    7E67 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  351/    7E67 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  352/    7E67 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  353/    7E67 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  354/    7E67 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  355/    7E67 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  356/    7E67 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  357/    7E67 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  358/    7E67 :                     	;for 10 we subtract and shift
(1)  359/    7E67 :                     	;for 00 and 11 we just shift
(1)  360/    7E67 :                     
(1)  361/    7E67 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  362/    7E73 : F8 20                   ldi 32
(1)  363/    7E75 : AE                      plo memaddr		;cycle count
(1)  364/    7E76 : FC 00                   adi 0		;clear df
(1)  365/    7E78 :                     $$mloop:
(1)  366/    7E78 : 89                      glo RL8
(1)  367/    7E79 : FA 01                   ani 1		;isolate bottom bit of result
(1)  368/    7E7B : 3B 97                   bnf	$$check_sub	;
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 62 - 10/28/2020 10:49:19


(1)  369/    7E7D : 3A AF                   bnz	$$shift		;that would be the 11 case
(1)  370/    7E7F :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  371/    7E7F : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  372/    7E95 : 30 AF                   br $$shift
(1)  373/    7E97 :                     $$check_sub:
(1)  374/    7E97 : 32 AF                   bz $$shift	;that would be the 00 case
(1)  375/    7E99 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  376/    7E99 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  377/    7EAF :                     $$shift:
(1)  378/    7EAF : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  379/    7EBD : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  380/    7EC9 :                     
(1)  381/    7EC9 : 2E                      dec memaddr		;cycle count
(1)  382/    7ECA : 8E                      glo memaddr
(1)  383/    7ECB : 3A 78                   bnz $$mloop		;repeat cycle once for each bit position
(1)  384/    7ECD :                         
(1)  385/    7ECD : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  386/    7ECF :                     
(1)  387/    7ECF :                     	align 256
(1)  388/    7F00 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  389/    7F00 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  390/    7F00 :                     _divI4:
(1)  391/    7F00 : 22                      dec	sp	;leave a work area available
(1)  392/    7F01 : 98                      ghi RL8-1	;get the top of the dividend
(1)  393/    7F02 : 52                      str sp	;save the sign of the 1st arg
(1)  394/    7F03 : FE                      shl
(1)  395/    7F04 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  396/    7F06 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  397/    7F26 :                     $$pos1: ;1st is now +v, check 2nd
(1)  398/    7F26 : 9A                      ghi RL10-1
(1)  399/    7F27 : F3                      xor	
(1)  400/    7F28 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  401/    7F29 : 9A                      ghi RL10-1
(1)  402/    7F2A : FE                      shl
(1)  403/    7F2B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  404/    7F2D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  405/    7F4D :                     $$pos2: ; both args now +v
(1)  406/    7F4D : 22                      dec sp	;protect workarea on the 1802
(1)  407/    7F4E : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  408/    7F52 : 12                      inc sp	;recover work area
(1)  409/    7F53 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  410/    7F53 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  411/    7F54 : FE                      shl
(1)  412/    7F55 : 3B 77                   bnf $$done ;if the signs were different
(1)  413/    7F57 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  414/    7F77 :                     $$done:
(1)  415/    7F77 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  416/    7F79 : [311]                ENDIF
(1)  417/    7F79 : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  418/    7F79 :                     _modU4:	;32 bit unsigned remainder
(1)  419/    7F79 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  420/    7F79 : (MACRO)                 Ccall _divU4
(1)  421/    7F7D : (MACRO)                 cpy4 RL8,Rp1p2
(1)  422/    7F85 : (MACRO)                 Cretn
(1)  423/    7F87 :                         
(1)  424/    7F87 :                     _modI4:	;32 bit signed remainder
(1)  425/    7F87 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  426/    7F87 : (MACRO)                 Ccall _divI4
(1)  427/    7F8B : (MACRO)                 cpy4 RL8,Rp1p2
(1)  428/    7F93 : (MACRO)                 Cretn
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(lcc1802epiloCX.inc) - Page 63 - 10/28/2020 10:49:19


(1)  429/    7F95 : [417]                ENDIF	
(1)  430/    7F95 :                     ;;function_end lcc1802init.inc
(1)  431/    7F95 :                     
    3136/    7F95 :                     	include IO1802.inc
(1)    1/    7F95 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    7F95 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    7F95 :                     ;18-02-23 changed label + to $$no0 in _inp: to eliminate this style of temporary
(1)    4/    7F95 :                     	align 64
(1)    5/    7FC0 :                     ;;function_start IO1802.inc void function(void)
(1)    6/    7FC0 :                     _putc:
(1)    7/    7FC0 :                     _out5:	
(1)    8/    7FC0 : 8C                  	glo	regArg1
(1)    9/    7FC1 : 22                  	dec	sp
(1)   10/    7FC2 : 52                  	str	sp
(1)   11/    7FC3 : 65                  	out	5
(1)   12/    7FC4 : (MACRO)             	Cretn
(1)   13/    7FC6 :                     _inp:		;raw port input
(1)   14/    7FC6 :                     		;stores a small tailored program on the stack and executes it
(1)   15/    7FC6 : 22                  	dec	sp	;work backwards
(1)   16/    7FC7 : F8 D3               	ldi	0xD3	;return instruction
(1)   17/    7FC9 : 73                  	stxd		
(1)   18/    7FCA : 8C                  	glo	regarg1	;get the port number
(1)   19/    7FCB : FA 07               	ani	0x07	;clean it
(1)   20/    7FCD : 32 DD               	bz	$$no0	; inp(0) isn't valid
(1)   21/    7FCF : F9 68               	ori	0x68	;make it an input instruction
(1)   22/    7FD1 : 73                  	stxd		;store it for execution
(1)   23/    7FD2 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   24/    7FD6 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   25/    7FD7 : D8                  	sep	rt1	;execute it
(1)   26/    7FD8 :                     ;we will come back to here with the input byte in D
(1)   27/    7FD8 : 12                  	inc	sp	;step over the work area
(1)   28/    7FD9 : AF                  	plo	retVal	;save it to return
(1)   29/    7FDA : F8 00               	ldi	0
(1)   30/    7FDC : BF                  	phi	retval	;clear top byte
(1)   31/    7FDD : 12                  $$no0	inc	sp	;need to get rid of the 6x instruction
(1)   32/    7FDE : 12                  	inc	sp	;and the D3
(1)   33/    7FDF : (MACRO)             	Cretn		;and we're done
(1)   34/    7FE1 :                     	
(1)   35/    7FE1 :                     _out:		;raw port output
(1)   36/    7FE1 :                     		;stores a small tailored program on the stack and executes it
(1)   37/    7FE1 :                     		;this could be bolder:
(1)   38/    7FE1 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   39/    7FE1 :                     		;then SEP sp
(1)   40/    7FE1 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   41/    7FE1 :                     		;saves 6 instructions but it's a bit tricky.
(1)   42/    7FE1 : 22                  	dec	sp	;work backwards
(1)   43/    7FE2 : F8 D3               	ldi	0xD3	;return instruction
(1)   44/    7FE4 : 73                  	stxd		
(1)   45/    7FE5 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   46/    7FE9 : 8C                  	glo	regarg1	;get the port number
(1)   47/    7FEA : FA 07               	ani	0x07	;clean it
(1)   48/    7FEC : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   49/    7FEE : 73                  	stxd		;store it for execution
(1)   50/    7FEF : 8D                  	glo	regarg2	;get the byte to be written
(1)   51/    7FF0 : 52                  	str	sp	;store it where sp points
(1)   52/    7FF1 : D8                  	sep	rt1	;execute it
(1)   53/    7FF2 :                     ;we will come back to here with sp stepped up by one
(1)   54/    7FF2 : 12                  	inc	sp	;need to get rid of the 6x instruction
(1)   55/    7FF3 : 12                  	inc	sp	;and the D3
(1)   56/    7FF4 : (MACRO)             	Cretn		;and we're done
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(IO1802.inc) - Page 64 - 10/28/2020 10:49:19


(1)   57/    7FF6 :                     ;;function_end IO1802.inc
(1)   58/    7FF6 :                     
(1)   59/    7FF6 :                     	
(1)   60/    7FF6 :                     	
(1)   61/    7FF6 :                     
    3137/    7FF6 :                     	include LCC1802finale.inc
(1)    1/    7FF6 :                     ;LCC1802finale.inc is the last code processed by the assembler
(1)    2/    7FF6 :                     ;20-05-23 finale used to include comx/comx_final.inc with  comx load feature
(1)    3/    7FF6 :                     ;20-06-11 renamed to basic_final to reflect this is a final addition to add BASIC routine
(1)    4/    7FF6 :                     
(1)    5/    7FF6 : =>DEFINED             IFDEF LCCCX
(1)    6/    7FF6 :                         include devkit/system/basic_final.inc
(2)    1/    7FF6 :                     ;comx_final.inc contains BASIC CALL routine as well as settings for BASIC SYSTEM paramters
(2)    2/    7FF6 :                     ;
(2)    3/    7FF6 :                     ; *******************************************************************
(2)    4/    7FF6 :                     ; *** This software is copyright 2020 by Marcel van Tongeren      ***
(2)    5/    7FF6 :                     ; *** with support from Bill Rowe and Fabrizio Caruso.            ***
(2)    6/    7FF6 :                     ; ***                                                             ***
(2)    7/    7FF6 :                     ; *** You have permission to use, modify, copy, and distribute    ***
(2)    8/    7FF6 :                     ; *** this software so long as this copyright notice is retained. ***
(2)    9/    7FF6 :                     ; *** This software may not be used in commercial applications    ***
(2)   10/    7FF6 :                     ; *** without express written permission from the author.         ***
(2)   11/    7FF6 :                     ; *******************************************************************
(2)   12/    7FF6 :                     ; 
(2)   13/    7FF6 :                     ;20-05-23 First version
(2)   14/    7FF6 :                     ;;function_start basic_final.inc void function(void)    
(2)   15/    7FF6 : =>DEFINED             IFDEF LCCCX
(2)   16/    7FF6 :                         align 256
(2)   17/    8000 :                     $$defus:
(2)   18/    8000 : 00 00                   dw 0
(2)   19/    8002 : 00 00                   dw 0
(2)   20/    8004 : 00 00                   dw 0
(2)   21/    8006 : 00 00                   dw 0
(2)   22/    8008 : 00 00                   dw 0
(2)   23/    800A : 00 00                   dw 0
(2)   24/    800C :                     $$sop
(2)   25/    800C : 00 0A                   dw 0x000a
(2)   26/    800E : 0A A8                   dw 0x0aa8
(2)   27/    8010 : D6 D0                   dw 0xd6d0
(2)   28/    8012 :                     
(2)   29/    8012 : =>UNDEFINED           IFDEF COMX
(2)   30/    8012 :                         dw 0x3434
(2)   31/    8012 :                         dw 0x3031
(2)   32/    8012 :                         dw 0xc40d
(2)   33/    8012 :                         dw 0xffff
(2)   34/    8012 :                         dw 0x0384
(2)   35/    8012 :                         db 0x0d
(2)   36/    8012 :                     $$eop:
(2)   37/    8012 :                     ;;function_end basic_final.inc
(2)   38/    8012 :                         org 0x4281
(2)   39/    8012 :                         dw $$sop
(2)   40/    8012 :                         dw $$eop
(2)   41/    8012 :                     
(2)   42/    8012 :                         org 0x4292
(2)   43/    8012 :                         dw $$defus+0x26
(2)   44/    8012 :                         dw $$defus+0x26
(2)   45/    8012 :                     
(2)   46/    8012 :                         org 0x4400
(2)   47/    8012 :                         db ($$defus >> 8) - 0x44
(2)   48/    8012 :                     
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm(devkit/system/basic_final.inc) - Page 65 - 10/28/2020 10:49:19


(2)   49/    8012 :                         org 0x4299    
(2)   50/    8012 : [29]                  ENDIF
(2)   51/    8012 :                       
(2)   52/    8012 : =>UNDEFINED           IFDEF TMC600
(2)   53/    8012 :                         dw 0x3633
(2)   54/    8012 :                         dw 0x3030
(2)   55/    8012 :                         dw 0xc40d
(2)   56/    8012 :                         dw 0xffff
(2)   57/    8012 :                         dw 0x0384
(2)   58/    8012 :                         db 0x0d
(2)   59/    8012 :                     $$eop:
(2)   60/    8012 :                     
(2)   61/    8012 :                         org 0x6181
(2)   62/    8012 :                         dw $$sop
(2)   63/    8012 :                         dw $$eop
(2)   64/    8012 :                     
(2)   65/    8012 :                         org 0x6192
(2)   66/    8012 :                         dw $$defus+0x26
(2)   67/    8012 :                         dw $$defus+0x26
(2)   68/    8012 :                     
(2)   69/    8012 :                         org 0x6199
(2)   70/    8012 : [52]                  ENDIF
(2)   71/    8012 :                       
(2)   72/    8012 : =>UNDEFINED           IFDEF PECOM
(2)   73/    8012 :                         dw 0x3032
(2)   74/    8012 :                         dw 0x3031
(2)   75/    8012 :                         dw 0xc40d
(2)   76/    8012 :                         dw 0xffff
(2)   77/    8012 :                         dw 0x0384
(2)   78/    8012 :                         db 0x0d
(2)   79/    8012 :                     $$eop:
(2)   80/    8012 :                     
(2)   81/    8012 :                         org 0x81
(2)   82/    8012 :                         dw $$sop
(2)   83/    8012 :                         dw $$eop
(2)   84/    8012 :                     
(2)   85/    8012 :                         org 0x92
(2)   86/    8012 :                         dw $$defus+0x26
(2)   87/    8012 :                         dw $$defus+0x26
(2)   88/    8012 :                         
(2)   89/    8012 :                         org 0x200
(2)   90/    8012 :                         db ($$defus >> 8) - 2
(2)   91/    8012 :                         
(2)   92/    8012 :                         org 0x99
(2)   93/    8012 : [72]                  ENDIF
(2)   94/    8012 : 80 26                   dw $$defus+0x26
(2)   95/    8014 : [15]                  ENDIF
(1)    7/    8014 : [5]                   ENDIF
    3138/    8014 :                     
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 66 - 10/28/2020 10:49:19


  Symbol Table (* = unused):
  --------------------------

 AGAIN276 :                    7D46 C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
*BIGENDIAN :                      0 - |  BITLOOP205 :                  6243 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECK_SUB279 :                7E97 C |  CKNEXT205 :                   6292 C |
 CKTOP205 :                    622E C |  CLRLP205 :                    621F C |
 CODELOC :                     4401 - |  COMPUTEQUOT276 :              7D5C C |
*CONSTPI :        3.141592653589793 - |  CPUSPEED :                  186A00 - |
*CSEG :                           1 - | *DATE :                "10/28/2020" - |
 DCKLP205 :                    6246 C |  DEFUS286 :                    8000 C |
 DNOADD205 :                   624E C |  DONE205 :                     629C C |
 DONE277 :                     7DBF C |  DONE280 :                     7F77 C |
 DSHLP205 :                    6262 C |  ENDLP278 :                    7E61 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          0 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  L10 :                         4584 C |
 L100 :                        783D C |  L101 :                        782C C |
 L102 :                        77EC C |  L103 :                        77D3 C |
 L104 :                        77BA C |  L105 :                        77A1 C |
 L106 :                        7788 C |  L107 :                        776F C |
 L108 :                        773A C |  L109 :                        7721 C |
 L11 :                         4584 C |  L110 :                        76EC C |
 L111 :                        76E6 C | *L112 :                        5416 C |
 L113 :                        53F8 C |  L114 :                        5412 C |
*L115 :                        5476 C |  L116 :                        543D C |
*L117 :                        546A C |  L119 :                        546A C |
*L121 :                        54FB C |  L122 :                        54C4 C |
*L124 :                        5569 C |  L126 :                        5520 C |
 L127 :                        5524 C | *L128 :                        558C C |
 L129 :                        560B C |  L13 :                         44F9 C |
 L130 :                        55A5 C | *L131 :                        55FC C |
 L133 :                        55FF C |  L134 :                        55EF C |
 L137 :                        55E2 C |  L138 :                        55E8 C |
 L139 :                        55FC C |  L14 :                         4510 C |
*L141 :                        562E C |  L142 :                        5622 C |
 L143 :                        5624 C | *L145 :                        565E C |
 L146 :                        5644 C |  L147 :                        5658 C |
 L15 :                         4542 C | *L150 :                        5831 C |
 L151 :                        571B C |  L152 :                        572B C |
 L153 :                        5734 C |  L154 :                        580E C |
 L156 :                        5748 C | *L157 :                        5748 C |
 L159 :                        576C C |  L160 :                        57FC C |
 L163 :                        57AD C | *L164 :                        593F C |
 L165 :                        58E3 C | *L167 :                        5990 C |
*L168 :                        59ED C | *L169 :                        5A5E C |
 L17 :                         4559 C |  L170 :                        5A37 C |
 L171 :                        5A5E C | *L172 :                        5AC6 C |
*L173 :                        5FA6 C |  L174 :                        5B5C C |
 L175 :                        5FA0 C |  L177 :                        5B77 C |
 L178 :                        5FA0 C |  L180 :                        5F81 C |
 L181 :                        5FA0 C |  L183 :                        5C64 C |
 L184 :                        5CA9 C |  L185 :                        5CF4 C |
 L186 :                        5D37 C |  L187 :                        5D6B C |
 L188 :                        5D88 C |  L189 :                        5DFD C |
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 67 - 10/28/2020 10:49:19


 L19 :                         4570 C |  L190 :                        5F81 C |
 L192 :                        5E63 C |  L194 :                        5EB3 C |
 L195 :                        5F63 C | *L196 :                        5BBE C |
 L197 :                        5C17 C | *L198 :                        5BF0 C |
*L199 :                        5C49 C |  L20 :                         44EF C |
*L200 :                        5FE8 C |  L201 :                        76DD C |
 L202 :                        5FE5 C | *L203 :                        5FE5 C |
*L205 :                        6094 C |  L206 :                        6027 C |
 L207 :                        6077 C |  L209 :                        6090 C |
*L21 :                         45D4 C | *L210 :                        6108 C |
 L211 :                        60CE C |  L212 :                        60F3 C |
*L214 :                        6141 C |  L215 :                        6131 C |
 L216 :                        6135 C | *L218 :                        62E5 C |
*L22 :                         4893 C |  L23 :                         46B4 C |
*L24 :                         4736 C |  L26 :                         4750 C |
 L27 :                         4902 C |  L28 :                         48EC C |
 L30 :                         4A62 C |  L31 :                         4930 C |
 L32 :                         498C C |  L34 :                         498C C |
 L36 :                         49E7 C |  L38 :                         4A00 C |
 L40 :                         4A5E C |  L42 :                         4AAA C |
 L43 :                         4AA6 C | *L45 :                         52F7 C |
 L46 :                         7BD1 C |  L47 :                         7BB2 C |
 L50 :                         7B9A C |  L53 :                         7B98 C |
 L54 :                         7B68 C |  L55 :                         4C00 C |
 L56 :                         4C14 C |  L57 :                         7B3C C |
 L58 :                         7B0D C |  L59 :                         7AD6 C |
*L6 :                          4445 C |  L60 :                         7AA5 C |
 L61 :                         4C78 C | *L62 :                         4F13 C |
 L64 :                         4F2D C |  L65 :                         7A86 C |
 L67 :                         4CE8 C |  L68 :                         4CF7 C |
 L69 :                         4D0D C | *L7 :                          4588 C |
 L70 :                         4D8D C |  L72 :                         4DFC C |
*L73 :                         4E6E C |  L75 :                         4E6F C |
 L76 :                         4E6E C |  L78 :                         7A67 C |
 L79 :                         7A54 C |  L8 :                          44AD C |
 L80 :                         7A1E C |  L81 :                         7A05 C |
 L82 :                         79EC C |  L83 :                         79D3 C |
 L84 :                         79BA C |  L85 :                         79A1 C |
 L86 :                         7988 C |  L87 :                         796F C |
 L89 :                         7956 C |  L92 :                         792C C |
 L93 :                         7920 C |  L94 :                         7907 C |
 L95 :                         78D6 C |  L96 :                         78BD C |
 L97 :                         78A4 C |  L98 :                         788B C |
 L99 :                         7872 C |  LCC1802INIT :                 7BF0 C |
*LCCCX :                          1 - | *LISTON :                         1 - |
 LOOP278 :                     7E0F C | *MACEXP :                         7 - |
 MEMADDR :                       0E - |  MLOOP279 :                    7E78 C |
 MOMCPU :                      1802 - | *MOMCPUNAME :                "1802" - |
 MSLF274 :                     7C92 C |  MULRDONE275 :                 7D24 C |
 MULRLP275 :                   7D04 C |  MULRNOADD275 :                7D16 C |
 MULRSHFT275 :                 7D1C C | *NESTMAX :                      100 - |
 NEY0Y276 :                    7D75 C |  NO0285 :                      7FDD C |
 NORESTORE278 :                7E5D C |  OUT276 :                      7D83 C |
*PACKING :                        0 - | *PADDING :                        1 - |
 POS1277 :                     7D9C C |  POS1280 :                     7F26 C |
 POS2277 :                     7DAC C |  POS2280 :                     7F4D C |
*R0 :                             0 - | *R1 :                             1 - |
 R10 :                           0A - |  R11 :                           0B - |
 R12 :                           0C - |  R13 :                           0D - |
*R14 :                           0E - |  R15 :                           0F - |
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 68 - 10/28/2020 10:49:19


 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                       0C - |
 REGARG2 :                       0D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                        0F - |
*RL0 :                            1 - |  RL10 :                          0B - |
 RL12 :                          0D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                         0D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                         0E - |  SHIFT279 :                    7EAF C |
*SOP286 :                      800C C |  SP :                             2 - |
 SUBOVHD :                       1B - |  TESTEXIT276 :                 7D6B C |
*TIME :                  "10:49:19" - | *TRUE :                           1 - |
 UPNXT205 :                    627B C |  VERSION :                     142F - |
*Z80SYNTAX :                      0 - |  _ARR_1_GLOB :                 766F C |
 _ARR_2_GLOB :                 62E7 C |  _BOOL_GLOB :                  76D5 C |
 _CALL :                       7C61 C |  _CH_1_GLOB :                  76D4 C |
 _CH_2_GLOB :                  76D3 C |  _DIVI2 :                      7D8D C |
 _DIVI4 :                      7F00 C |  _DIVU2 :                      7D26 C |
 _DIVU4 :                      7E00 C |  _DUBDABX :                    6200 C |
*_EXIT :                       5FBE C |  _FUNC_1 :                     48A7 C |
 _FUNC_2 :                     4906 C |  _FUNC_3 :                     4A76 C |
*_INP :                        7FC6 C |  _INT_GLOB :                   76D7 C |
 _ITOA :                       5669 C |  _LTOA :                       5847 C |
 _MAIN :                       4AAE C |  _MALLOC :                     4406 C |
 _MALLOC_PTR :                 4404 C | *_MEMCMP :                     5FEE C |
*_MEMCPY :                     60A4 C | *_MEMSET :                     6116 C |
*_MODI2 :                      7C48 C | *_MODI4 :                      7F87 C |
*_MODU2 :                      7C3E C | *_MODU4 :                      7F79 C |
 _MULU2 :                      7D00 C | *_MULU4 :                      7E67 C |
 _NEXT_PTR_GLOB :              76D9 C | *_NSTDLIBINCLUDER :            614D C |
*_ONEMS :                      7C90 C |  _OUT :                        7FE1 C |
*_OUT4 :                       7C52 C | *_OUT5 :                       7FC0 C |
 _PRINTF :                     5ACC C |  _PRINTINT :                   5955 C |
 _PRINTLINT :                  599A C |  _PRINTSTR :                   5635 C |
 _PROC_1 :                     5313 C |  _PROC_2 :                     5428 C |
 _PROC_3 :                     5482 C |  _PROC_4 :                     5503 C |
 _PROC_5 :                     5572 C |  _PROC_6 :                     444B C |
 _PROC_7 :                     4598 C |  _PROC_8 :                     45D8 C |
 _PTR_GLOB :                   76DB C | *_PUTC :                       7FC0 C |
 _PUTX :                       5A64 C |  _PUTXN :                      59F7 C |
 _REG :                        4449 C |  _RETURN :                     7C81 C |
*_SETQOFF :                    7C3B C | *_SETQON :                     7C38 C |
 _STRCMP :                     62CB C |  _STRCPY :                     62C0 C |
*_STRLEN :                     5617 C | *_STRNCMP :                    558E C |
 __STRCMPGT :                  62E2 C |  __STRCMPLP :                  62D0 C |
 __STRCMPNE :                  62DC C |  __STRCPY :                    62C4 C |

    332 symbols
     90 unused symbols

 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 69 - 10/28/2020 10:49:19


  Defined Macros:
  ---------------

ALU1                                  | ALU2                                 
ALU2I                                 | ALU2RRS                              
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CCALLD                                | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | GLOBSS                               
INC4                                  | INCM                                 
JCF4                                  | JCI1I                                
JCI2                                  | JCI2I                                
JCI4                                  | JCU1                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI1                                
JEQI2                                 | JEQI4                                
JEQU1I                                | JEQU2I                               
JNEU1                                 | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | ORGC                                 
ORGD                                  | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
TESTSUB                               | ZEXT                                 
 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 70 - 10/28/2020 10:49:19


ZEXT4                                 |

    115 macros

 AS V1.42 Beta [Bld 172] - Source File wjrdhry_1.oasm - Page 71 - 10/28/2020 10:49:19


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.16 seconds assembly time

   5049 lines source file
  18195 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
