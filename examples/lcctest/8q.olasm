; generated by lcc-xr18CX $Version: 5.2 - XR18CX $ on Thu Oct 29 11:41:46 2020

SP:	equ	2 
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802proloCX.inc
	listing on
	orgc
;;function_start _main int function(void)
_main: 
	pushr R7
	reserve 4
;{
;	printf("generates 92 solutions. \n15863724 is first\n\n");
	ldaD R12,L2
	Ccall _printf
;	for (i = 0; i < 15; i++)
	ld2z R7
L3:
;		up[i] = down[i] = 1;
	shlR2R	R11,R7	
	st2I 1,'O',R11,(_down)
	st2I 1,'O',R11,(_up)
L4:
;	for (i = 0; i < 15; i++)
	incm R7,1
	jcI2I R7,15,lbnf,L3  
;	for (i = 0; i < 8; i++)
	ld2z R7
L7:
;		rows[i] = 1;
	shlR2R	R11,R7	
	st2I 1,'O',R11,(_rows)
L8:
;	for (i = 0; i < 8; i++)
	incm R7,1
	jcI2I R7,8,lbnf,L7  
;	queens(0);
	ld2z R12
	Ccall _queens
;	printf("...and...\n84136275 is last\nTook about 25 sec on 1.6mhz elf with Christmas compiler\n");
	ldaD R12,L11
	Ccall _printf
;	printf("Took about 22 sec on 1.6mhz elf with Birthday compiler\n");
	ldaD R12,L12
	Ccall _printf
;	printf("Took about 17 sec on 1.6mhz elf with St Judy's compiler(from run1802 to 92nd solution)\n");
	ldaD R12,L13
	Ccall _printf
;	printf("Took about 6 sec on 4mhz MC with Mother's Day compiler(from run1802 to 92nd solution)\n");
	ldaD R12,L14
	Ccall _printf
;	return 0;
	ld2z R15
L1:
	release 4
	popr R7
	Cretn

;;function_end$$ _main
;;function_start _queens int function(int)
_queens:		
	pushr R6
	pushr R7
	reserve 4
	cpy2 R7,R12
;{
;	for (r = 0; r < 8; r++){
	ld2z R6
L16:
;		if (rows[r] && up[r-c+7] && down[r+c]) {
	shlR2R	R11,R6	
	ld2 R11,'O',R11,(_rows) 
	jzU2 R11,L20
;D*E*A*D  R11
	alu2 R11,R6,R7,sm,smb
	shl2I R11,1
	ld2 R11,'O',R11,(_up+14) 
	jzU2 R11,L20
;D*E*A*D  R11
	alu2 R11,R6,R7,add,adc
	shl2I R11,1
	ld2 R11,'O',R11,(_down) 
	jzU2 R11,L20
;D*E*A*D  R11
;			rows[r] = up[r-c+7] = down[r+c] = 0;
	alu2 R11,R6,R7,add,adc
	shl2I R11,1
;D*E*A*D  R11
	st2I 0,'O',R11,(_down)
	alu2 R11,R6,R7,sm,smb
	shl2I R11,1
;D*E*A*D  R11
	st2I 0,'O',R11,(_up+14)
	shlR2R	R11,R6	
	st2I 0,'O',R11,(_rows)
;			x[c] = r;
	shlR2R	R11,R7	
	st2 R6,'O',R11,(_x)
;			if (c == 7)
	jneU2I R7,7,L24
;				print();
	Ccall _print
	lbr L25
L24:
;				queens(c + 1);
	cpy2 R12,R7 
	incm R12,1
	Ccall _queens
L25:
;			rows[r] = up[r-c+7] = down[r+c] = 1;
	alu2 R11,R6,R7,add,adc
	shl2I R11,1
;D*E*A*D  R11
	st2I 1,'O',R11,(_down)
	alu2 R11,R6,R7,sm,smb
	shl2I R11,1
;D*E*A*D  R11
	st2I 1,'O',R11,(_up+14)
	shlR2R	R11,R6	
	st2I 1,'O',R11,(_rows)
;		}
L20:
;	}
L17:
;	for (r = 0; r < 8; r++){
	incm R6,1
	jcI2I R6,8,lbnf,L16  
	ld2z R15
;}
L15:
	release 4
	popr R7
	popr R6
	Cretn

;;function_end$$ _queens
;;function_start _print int function(void)
_print:		
	pushr R7
	reserve 4
;{
;	for (k = 0; k < 8; k++)
	ld2z R7
L28:
;		printf("%c", x[k]+'1');
	ldaD R12,L32
	shlR2R	R11,R7	
	ld2 R11,'O',R11,(_x) 
	ldA2 R13,'O',R11,(49)
;D*E*A*D  R11
	Ccall _printf
L29:
;	for (k = 0; k < 8; k++)
	incm R7,1
	jcI2I R7,8,lbnf,L28  
;	printf("\n");
	ldaD R12,L33
	Ccall _printf
	ld2z R15
;}
L27:
	release 4
	popr R7
	Cretn

;;function_end$$ _print
;;function_start _strncmp int function(pointer to const char,pointer to const char,unsigned int)
_strncmp:		
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(10+1) 
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L38
L35:
;	if (*s1 != *s2)
	ldn1 R11,R12	
	zExt R11 
	ldn1 R10,R13	
	zExt R10 
	jeqI2 R11,R10,L39
;D*E*A*D  R11
;D*E*A*D  R10
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ldn1 R11,R12	
	zExt R11 
	ldn1 R10,R13	
	zExt R10 
	jcI2 R11,R10,lbdf,L42
;D*E*A*D  R11
;D*E*A*D  R10
	ldaD R6,-1
	lbr L43
L42:
	ldaD R6,1
L43:
	cpy2 R15,R6 
;D*E*A*D  R6
	lbr L34
L39:
;	else if (*s1 == '\0')
	ldn    R12
	lbnz   L44
;D*E*A*D  R11 - but not in vain I
;	    return 0;
	ld2z R15
	lbr L34
L44:
L36:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1	
L38:
	jnzU2 R7,L35
;    return 0;
	ld2z R15
L34:
	popr R7
	popr R6
	Cretn

;;function_end$$ _strncmp
;;function_start _strlen unsigned int function(pointer to char)
_strlen:		
	pushr R7
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L48
L47:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L48:
;	while (*str != 0) {
	ldn    R12
	lbnz   L47
;D*E*A*D  R11 - but not in vain I
;   return slen;
	cpy2 R15,R7 
;D*E*A*D  R7
L46:
	popr R7
	Cretn

;;function_end$$ _strlen
;;function_start _printstr void function(pointer to char)
_printstr:		
	pushr R7
	reserve 4
	cpy2 R7,R12
;void printstr(char *ptr){
	lbr L52
L51:
;    while(*ptr){
;		putc(*ptr++); //jan 29
	ldaD R12,7
	cpy2 R11,R7 
	incm R7,1
	ldn1 R13,R11	
;D*E*A*D  R11
	zExt R13 
	Ccall _out
;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
 nop1806
 nop1806
 nop1806
;	}
L52:
;    while(*ptr){
	ldn    R7
	lbnz   L51
;D*E*A*D  R11 - but not in vain I
;}
L50:
	release 4
	popr R7
	Cretn

;;function_end$$ _printstr
	orgc
	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
	orgc
;;function_start _ftoa pointer to char function(float,pointer to char,unsigned int)
_ftoa:		
	reserve 62
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 8
	cpy4 RL6,RL12
	ld2 R1,'O',sp,(86+1) 
;{
;   char *output = outbfr ;
	ld2 R0,'O',sp,(84+1) 
;   if (flt < 0.0) {
	ld4 RL10,'D',(L58),0
	jcF4 RL6,RL10,lbdf,L56
;      *output++ = '-' ;
	cpy2 R11,R0 
	incm R0,1
	str1I 45,R11
;D*E*A*D  R11
;      flt *= -1.0 ;
	ld4 RL8,'D',(L59),0
	cpy4 RL10,RL6
;D*E*A*D  RL6
	Ccall fp_mul 
	cpy4 RL6,RL8
;D*E*A*D  RL8
;   } else {
	lbr L57
L56:
;      if (use_leading_plus) {
	lbr L60
;         *output++ = '+' ;
	cpy2 R11,R0 
	incm R0,1
	str1I 43,R11
;D*E*A*D  R11
;      }
L60:
;   }
L57:
;   if (dec_digits < 8) {
	jcI2I R1,8,lbdf,L62
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL6
;D*E*A*D  RL6
	shlR2R	R11,R1	
	shl2I 	R11,1	
	ld4 RL10,'O',R11,(_round_nums)
;D*E*A*D  R11
	Ccall fp_add 
	cpy4 RL6,RL8
;D*E*A*D  RL8
;   }
L62:
;	mult=mult_nums[dec_digits];
	shlR2R	R11,R1	
	shl2I 	R11,1	
	ld4 RL10,'O',R11,(_mult_nums)
;D*E*A*D  R11
	st4 RL10,'O',sp,(68+1)
;   wholeNum = flt;
	cpy4 RL8,RL6
	ccall cvfi4
	st4 RL8,'O',sp,(72+1)
;   decimalNum = ((flt - wholeNum) * mult);
	cpy4 RL8,RL6
;D*E*A*D  RL6
	st4 RL8,'O',sp,(16+1)
	ld4 RL8,'O',sp,(72+1)
	Ccall cvif4
	cpy4 RL10,RL8
;D*E*A*D  RL8
	ld4 RL8,'O',sp,(16+1)
	Ccall fp_sub 
	ld4 RL10,'O',sp,(68+1)
	Ccall fp_mul 
	ccall cvfi4
	st4 RL8,'O',sp,(64+1)
;   strcpy(output,dubdabx(wholeNum,output,1));
	ld4 Rp1p2,'O',sp,(72+1)
	st2 R0,'O',sp,(4+1)
	st2i 1,'O',sp,(6+1)
;D*E*A*D  R11 - but not in vain A
	Ccall _dubdabx
	cpy2 R11,R15 
	cpy2 R12,R0 
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _strcpy
;   output+=strlen(output);
	cpy2 R12,R0 
	Ccall _strlen
	alu2 R0,R15,R0,add,adc	
;   if (dec_digits > 0) {
	jzU2 R1,L64
;		*output++ = '.' ;
	cpy2 R11,R0 
	incm R0,1
	str1I 46,R11
;D*E*A*D  R11
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
	ld4 Rp1p2,'O',sp,(64+1)
	st2 R0,'O',sp,(4+1)
	cpy2 R11,R1 
;D*E*A*D  R1
	st2 R11,'O',sp,(6+1)
;D*E*A*D  R11
	Ccall _dubdabx
	cpy2 R11,R15 
	cpy2 R12,R0 
;D*E*A*D  R0
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _strcpy
;	}
L64:
;   return outbfr;
	ld2 R15,'O',sp,(84+1) 
L55:
	release 8
	popr R7
	popr R6
	popr R1
	popr R0
	release 62
	Cretn

;;function_end$$ _ftoa
;;function_start _itoa pointer to char function(int,pointer to char)
_itoa:		
	reserve 2
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 4
	st2 R12,'O',sp,(16+1)
	inc memaddr				
	str2 R13,memaddr
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R0
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(18+1) 
	st2 R11,'O',sp,(12+1)
;D*E*A*D  R11
;	if (s<0){
	ld2 R11,'O',sp,(16+1) 
	jcI2I R11,0,lbdf,L67
;D*E*A*D  R11
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(12+1) 
	str1I 45,R11
;D*E*A*D  R11
	ld2 R11,'O',sp,(12+1) 
	incm R11,1
	st2 R11,'O',sp,(12+1)
;D*E*A*D  R11
;		n=-s;
	ld2 R11,'O',sp,(16+1) 
	negI2 R11,R11 
	cpy2 R6,R11 
;D*E*A*D  R11
;	} else{
	lbr L68
L67:
;		n=s;
	ld2 R11,'O',sp,(16+1) 
	cpy2 R6,R11 
;D*E*A*D  R11
;	}
L68:
;	k=10000;
	ldaD R7,10000
	lbr L70
L69:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R1
	lbr L75
L72:
L73:
	incm R1,1
	alu2 R6,R6,R7,sm,smb
L75:
	jcU2 R6,R7,lbdf,L72 
;		if (flag || r>0||k==1){
	jnzU2 R0,L79
	jnzU2 R1,L79
	jneU2I R7,1,L76
L79:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(12+1) 
	ldA2 R10,'O',R1,(48)
;D*E*A*D  R1
	str1 R10,R11
;D*E*A*D  R10
;D*E*A*D  R11
	ld2 R11,'O',sp,(12+1) 
	incm R11,1
	st2 R11,'O',sp,(12+1)
;D*E*A*D  R11
;			flag='y';
	ldaD R0,121
;		}
L76:
;		k=k/10;
	cpy2 R12,R7 
;D*E*A*D  R7
	ldaD R13,10
	Ccall _divu2
	cpy2 R7,R15 
;	}
L70:
;	while(k>0){
	jnzU2 R7,L69
;	*bptr='\0';
	ld2 R11,'O',sp,(12+1) 
	str1I 0,R11
;D*E*A*D  R11
;	return buffer;
	ld2 R15,'O',sp,(18+1) 
L66:
	release 4
	popr R7
	popr R6
	popr R1
	popr R0
	release 2
	Cretn

;;function_end$$ _itoa
;;function_start _ltoa pointer to char function(long int,pointer to char)
_ltoa:		
	pushr R1
	pushr R6
	pushr R7
	reserve 8
	cpy4 RL6,RL12
;D*E*A*D  RL12
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R1,'O',sp,(20+1) 
;	if (s<0){
	ldI4 RL10,0 
	jcI4 RL6,RL10,lbdf,L81
;D*E*A*D  RL10
;		*bptr++='-';
	cpy2 R11,R1 
	incm R1,1
	str1I 45,R11
;D*E*A*D  R11
;		s=-s;
	negI4 RL6,RL6 
;	}
L81:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6
;D*E*A*D  RL6
	st2 R1,'O',sp,(4+1)
	st2i 1,'O',sp,(6+1)
;D*E*A*D  R11 - but not in vain A
	Ccall _dubdabx
	cpy2 R11,R15 
	cpy2 R12,R1 
;D*E*A*D  R1
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(20+1) 
L80:
	release 8
	popr R7
	popr R6
	popr R1
	Cretn

;;function_end$$ _ltoa
;;function_start _printint void function(int)
_printint:		
	reserve 12
	st2 R12,'O',sp,(14+1)
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(14+1) 
	ldA2 R13,'O',sp,(4+1)
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(4+1)
	Ccall _printstr
;}
L83:
	release 12
	Cretn

;;function_end$$ _printint
;;function_start _printlint void function(long int)
_printlint:		
	reserve 18
	st2 R12,'O',sp,(20+1)
	inc memaddr				
	str2 R13,memaddr
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(20+1)
	ldA2 R11,'O',sp,(6+1)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _ltoa
	cpy2 R12,R15 
;D*E*A*D  R11 - but not in vain 5
	Ccall _printstr
;}
L84:
	release 18
	Cretn

;;function_end$$ _printlint
;;function_start _printflt void function(float)
_printflt:		
	reserve 28
	st2 R12,'O',sp,(30+1)
	inc memaddr				
	str2 R13,memaddr
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,3));
	ld4 Rp1p2,'O',sp,(30+1)
	ldA2 R11,'O',sp,(8+1)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	st2i 3,'O',sp,(6+1)
;D*E*A*D  R11 - but not in vain A
	Ccall _ftoa
	cpy2 R12,R15 
;D*E*A*D  R11 - but not in vain 5
	Ccall _printstr
;}
L85:
	release 28
	Cretn

;;function_end$$ _printflt
;;function_start _putxn void function(unsigned char)
_putxn:		
	reserve 4
	st1 R12,'O',sp,(6+1)
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(6+1)
	jcI1I R11,10,lbdf,L87
;D*E*A*D  R11
;		putc(x+'0');
	ldaD R12,7
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	ldA2 R13,'O',R11,(48)
;D*E*A*D  R11
	Ccall _out
;	} else {
	lbr L88
L87:
;		putc(x+'A'-10);
	ldaD R12,7
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	ldA2 R11,'O',R11,(65)
	alu2I R13,R11,10,smi,smbi
;D*E*A*D  R11
	Ccall _out
;	}
L88:
;}
L86:
	release 4
	Cretn

;;function_end$$ _putxn
;;function_start _putx void function(unsigned char)
_putx:		
	reserve 4
	st1 R12,'O',sp,(6+1)
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	shrI2I R11,4
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	alu2I R11,R11,15,ani,ani
	
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putxn
;}
L89:
	release 4
	Cretn

;;function_end$$ _putx
;;function_start _printf void function(pointer to char,...)
_printf:		
	reserve 4
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	reserve 4
	st2 R12,'O',sp,(18+1)
	inc memaddr				
	str2 R13,memaddr
;D*E*A*D  memaddr
;void printf(char *pptr,...){ //limited implementation of printf
;	register char* ptr=pptr; //try to save on loads/spills
	ld2 R7,'O',sp,(18+1) 
;	int argslot=0;	//used to align longs
	ld2z R0
;	int * this=(int *)&pptr;
	ldA2 R1,'O',sp,(18+1)
;	this++; argslot++; //advance argument pointer and slot #
	incm R1,2
	incm R0,1
	lbr L92
L91:
;    while(*ptr) {
;		c=*ptr; ptr++;
	ldn1 R6,R7
	incm R7,1
;		if (c!='%'){
	jeqU1I R6,37,L94
;			putc(c);
	ldaD R12,7
	cpy1 R13,R6
;D*E*A*D  R6
	zExt R13 
	Ccall _out
;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
 nop1806
 nop1806
 nop1806
;		} else{
	lbr L95
L94:
;			c=*ptr;ptr++;
	ldn1 R6,R7
	incm R7,1
;			switch (c){
	cpy1 R11,R6
	zExt R11 
	st2 R11,'O',sp,(13+1)
	jcI2I R11,99,lbnf,L118  
	jnI2I R11,108,lbnf,L119
	shl2I R11,1
	ld2 R11,'O',R11,(L120-198) 
;D*E*A*D  R11
	jumpv R11
	orgc
L120:
	dw L102
	dw L100
	dw L97
	dw L113
	dw L97
	dw L97
	dw L100
	dw L97
	dw L97
	dw L106
	orgc
L118:
	ld2 R11,'O',sp,(13+1) 
	jeqU2I R11,88,L105
;D*E*A*D  R11
	lbr L97
L119:
	ld2 R11,'O',sp,(13+1) 
	ldaD R10,115
	jeqI2 R11,R10,L101
	jcI2 R11,R10,lbnf,L97
;D*E*A*D  R11
;D*E*A*D  R10
L122:
	ld2 R11,'O',sp,(13+1) 
	jeqU2I R11,120,L105
;D*E*A*D  R11
	lbr L97
L100:
;					printint(*this++);
	cpy2 R11,R1 
	incm R1,2
	ldn2 R12,R11	
;D*E*A*D  R11
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L98
L101:
;					printstr((char*) *this++);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	cpy2 R12,R11 
;D*E*A*D  R11
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L98
L102:
;					if (*ptr=='x'){ //if there's an x
	ldn1 R11,R7
	jneU1I R11,120,L103	
;D*E*A*D  R11
;						ptr++; //skip over the x
	incm R7,1
;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					} else{
	lbr L104
L103:
;						putc((unsigned int) *this++);		//print as char
	ldaD R12,7
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _out
;					}
L104:
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L98
L105:
;					putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	
	ghi	R11	
;D*E*A*D  R11
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L98
L106:
;					if (*ptr){ //as long as there's something there
	ldn   R7
	lbz   L107
;D*E*A*D  R11 - but not in vain H
;						xord=*ptr++;
	cpy2 R11,R7 
	incm R7,1
	ldA2 R10,'O',sp,(15+1)
	ldn R11
	str R10
;D*E*A*D  R10
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	
	jzU2 R11,L109
;D*E*A*D  R11
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L109:
;						if(xord=='d'){
	ld1 R11,'O',sp,(15+1)
	jneU1I R11,100,L111	
;D*E*A*D  R11
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R1,4
;						} else{
	lbr L112
L111:
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	
	ghi	R11	
;D*E*A*D  R11
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	
	ghi	R11	
;D*E*A*D  R11
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 
	incm R1,2
	ldn2s R11,R11	
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;						}
L112:
;						argslot+=2;
	incm R0,2
;						break;
	lbr L98
L107:
L113:
;					if (*ptr){ //as long as there's something there
	ldn   R7
	lbz   L114
;D*E*A*D  R11 - but not in vain H
;						if (argslot&1) { //adjust alignment
	alu2I R11,R0,1,ani,ani
	
	jzU2 R11,L116
;D*E*A*D  R11
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L116:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld4 Rp1p2,'O',R1,0
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	incm R1,4
;						argslot+=2;
	incm R0,2
;						break;
	lbr L98
L114:
L97:
;					putc('%');putc(c);
	ldaD R12,7
	ldaD R13,37
	Ccall _out
	ldaD R12,7
	cpy1 R13,R6
;D*E*A*D  R6
	zExt R13 
	Ccall _out
;			} //switch
L98:
;		} //%
L95:
;	} //while
L92:
;    while(*ptr) {
	ldn    R7
	lbnz   L91
;D*E*A*D  R11 - but not in vain I
;} //prtf
L90:
	release 4
	popr R7
	popr R6
	popr R1
	popr R0
	release 4
	Cretn

;;function_end$$ _printf
;;function_start _exit void function(int)
_exit:		
	reserve 4
	st2 R12,'O',sp,(6+1)
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L124
	ld2 R13,'O',sp,(6+1) 
	Ccall _printf
L125:
;	while(1);
L126:
	lbr L125
;}
L123:
	release 4
	Cretn

;;function_end$$ _exit
;;function_start _memcmp int function(pointer to const void,pointer to const void,unsigned int)
_memcmp:		
	pushr R0
	pushr R1
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(14+1) 
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R6
;    p1 = (unsigned char *)Ptr1;
	cpy2 R1,R12 
;    p2 = (unsigned char *)Ptr2;
	cpy2 R0,R13 
	lbr L130
L129:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R1 
	incm R1,1
	cpy2 R10,R0 
	incm R0,1
	ldn1 R11,R11	
	zExt R11 
	ldn1 R10,R10	
	zExt R10 
	alu2 R6,R11,R10,sm,smb
;D*E*A*D  R11
;D*E*A*D  R10
;    }
L130:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 
;D*E*A*D  R7
	cpy2 R7,R11	
	decm R7,1	
	jzU2 R11,L132
;D*E*A*D  R11
	jzU2 R6,L129
L132:
;    return v;
	cpy2 R15,R6 
;D*E*A*D  R6
L128:
	popr R7
	popr R6
	popr R1
	popr R0
	Cretn

;;function_end$$ _memcmp
;;function_start _memcpy pointer to void function(pointer to void,pointer to const void,unsigned int)
_memcpy:		
	pushr R1
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(12+1) 
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R6,R12 
;        char* src8 = (char*)src;
	cpy2 R1,R13 
	lbr L135
L134:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R6 
	incm R6,1
	cpy2 R10,R1 
	incm R1,1
	ldn R10
	str R11
;D*E*A*D  R11
;        }
L135:
;        while (count--) {
	cpy2 R11,R7 
;D*E*A*D  R7
	cpy2 R7,R11	
	decm R7,1	
	jnzU2 R11,L134
;D*E*A*D  R11
;        return dest;
	cpy2 R15,R12 
L133:
	popr R7
	popr R6
	popr R1
	Cretn

;;function_end$$ _memcpy
;;function_start _memset pointer to void function(pointer to void,int,unsigned int)
_memset:		
	pushr R6
	pushr R7
	ld2 R7,'O',sp,(10+1) 
;{
;    unsigned char* p=s;
	cpy2 R6,R12 
	lbr L139
L138:
;    while(n){
;        *p = (unsigned char)c;
	str1 R13,R6
;        p++;
	incm R6,1
;        n--;
	decm R7,1	
;	}
L139:
;    while(n){
	jnzU2 R7,L138
;    return s;
	cpy2 R15,R12 
L137:
	popr R7
	popr R6
	Cretn

;;function_end$$ _memset
;;function_start _nstdlibincluder void function(void)
_nstdlibincluder:		
;void nstdlibincluder(){
;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
	include nstdlib.inc
;}
L141:
	Cretn

;;function_end$$ _nstdlibincluder
	orgd
_x:
	globss 16
_rows:
	globss 16
_down:
	globss 30
_up:
	globss 30
	orgc
L124:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L59:
	dd 0xbf800000
	align 4
L58:
	dd 0x0
L33:
	db 10
	db 0
L32:
	db 37
	db 99
	db 0
L14:
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 54
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 52
	db 109
	db 104
	db 122
	db 32
	db 77
	db 67
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 77
	db 111
	db 116
	db 104
	db 101
	db 114
	db 39
	db 115
	db 32
	db 68
	db 97
	db 121
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 40
	db 102
	db 114
	db 111
	db 109
	db 32
	db 114
	db 117
	db 110
	db 49
	db 56
	db 48
	db 50
	db 32
	db 116
	db 111
	db 32
	db 57
	db 50
	db 110
	db 100
	db 32
	db 115
	db 111
	db 108
	db 117
	db 116
	db 105
	db 111
	db 110
	db 41
	db 10
	db 0
L13:
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 49
	db 55
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 49
	db 46
	db 54
	db 109
	db 104
	db 122
	db 32
	db 101
	db 108
	db 102
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 83
	db 116
	db 32
	db 74
	db 117
	db 100
	db 121
	db 39
	db 115
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 40
	db 102
	db 114
	db 111
	db 109
	db 32
	db 114
	db 117
	db 110
	db 49
	db 56
	db 48
	db 50
	db 32
	db 116
	db 111
	db 32
	db 57
	db 50
	db 110
	db 100
	db 32
	db 115
	db 111
	db 108
	db 117
	db 116
	db 105
	db 111
	db 110
	db 41
	db 10
	db 0
L12:
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 50
	db 50
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 49
	db 46
	db 54
	db 109
	db 104
	db 122
	db 32
	db 101
	db 108
	db 102
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 66
	db 105
	db 114
	db 116
	db 104
	db 100
	db 97
	db 121
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 10
	db 0
L11:
	db 46
	db 46
	db 46
	db 97
	db 110
	db 100
	db 46
	db 46
	db 46
	db 10
	db 56
	db 52
	db 49
	db 51
	db 54
	db 50
	db 55
	db 53
	db 32
	db 105
	db 115
	db 32
	db 108
	db 97
	db 115
	db 116
	db 10
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 50
	db 53
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 49
	db 46
	db 54
	db 109
	db 104
	db 122
	db 32
	db 101
	db 108
	db 102
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 67
	db 104
	db 114
	db 105
	db 115
	db 116
	db 109
	db 97
	db 115
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 10
	db 0
L2:
	db 103
	db 101
	db 110
	db 101
	db 114
	db 97
	db 116
	db 101
	db 115
	db 32
	db 57
	db 50
	db 32
	db 115
	db 111
	db 108
	db 117
	db 116
	db 105
	db 111
	db 110
	db 115
	db 46
	db 32
	db 10
	db 49
	db 53
	db 56
	db 54
	db 51
	db 55
	db 50
	db 52
	db 32
	db 105
	db 115
	db 32
	db 102
	db 105
	db 114
	db 115
	db 116
	db 10
	db 10
	db 0
	include lcc1802epiloCX.inc
	include LCC1802fp.inc
	include IO1802.inc
	include LCC1802finale.inc
