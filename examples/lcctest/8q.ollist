 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 1 - 10/29/2020 11:41:47


       1/       0 :                     ; generated by lcc-xr18CX $Version: 5.2 - XR18CX $ on Thu Oct 29 11:41:46 2020
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 
       4/       0 : =0EH                memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =0FH                retVal:	equ	15
       7/       0 : =0CH                regArg1: equ	12
       8/       0 : =0DH                regArg2: equ	13
(1) 1159/       0 :                     	listing	on
(1) 1160/       0 : C0 11 BD            	lbr	lcc1802init
(1) 1161/       3 :                     	
(1) 1162/       3 :                     
      11/       3 :                     	listing on
      12/       3 : (MACRO)             	orgc
      13/       3 :                     ;;function_start _main int function(void)
      14/       3 :                     _main: 
      15/       3 : (MACRO)             	pushr R7
      16/       7 : (MACRO)             	reserve 4
      17/       B :                     ;{
      18/       B :                     ;	printf("generates 92 solutions. \n15863724 is first\n\n");
      19/       B : (MACRO)             	ldaD R12,L2
      20/      11 : (MACRO)             	Ccall _printf
      21/      14 :                     ;	for (i = 0; i < 15; i++)
      22/      14 : (MACRO)             	ld2z R7
      23/      18 :                     L3:
      24/      18 :                     ;		up[i] = down[i] = 1;
      25/      18 : (MACRO)             	shlR2R	R11,R7	
      26/      1E : (MACRO)             	st2I 1,'O',R11,(_down)
      27/      2D : (MACRO)             	st2I 1,'O',R11,(_up)
      28/      3C :                     L4:
      29/      3C :                     ;	for (i = 0; i < 15; i++)
      30/      3C : (MACRO)             	incm R7,1
      31/      3D : (MACRO)             	jcI2I R7,15,lbnf,L3  
      32/      4E :                     ;	for (i = 0; i < 8; i++)
      33/      4E : (MACRO)             	ld2z R7
      34/      52 :                     L7:
      35/      52 :                     ;		rows[i] = 1;
      36/      52 : (MACRO)             	shlR2R	R11,R7	
      37/      58 : (MACRO)             	st2I 1,'O',R11,(_rows)
      38/      67 :                     L8:
      39/      67 :                     ;	for (i = 0; i < 8; i++)
      40/      67 : (MACRO)             	incm R7,1
      41/      68 : (MACRO)             	jcI2I R7,8,lbnf,L7  
      42/      79 :                     ;	queens(0);
      43/      79 : (MACRO)             	ld2z R12
      44/      7D : (MACRO)             	Ccall _queens
      45/      80 :                     ;	printf("...and...\n84136275 is last\nTook about 25 sec on 1.6mhz elf with Christmas compiler\n");
      46/      80 : (MACRO)             	ldaD R12,L11
      47/      86 : (MACRO)             	Ccall _printf
      48/      89 :                     ;	printf("Took about 22 sec on 1.6mhz elf with Birthday compiler\n");
      49/      89 : (MACRO)             	ldaD R12,L12
      50/      8F : (MACRO)             	Ccall _printf
      51/      92 :                     ;	printf("Took about 17 sec on 1.6mhz elf with St Judy's compiler(from run1802 to 92nd solution)\n");
      52/      92 : (MACRO)             	ldaD R12,L13
      53/      98 : (MACRO)             	Ccall _printf
      54/      9B :                     ;	printf("Took about 6 sec on 4mhz MC with Mother's Day compiler(from run1802 to 92nd solution)\n");
      55/      9B : (MACRO)             	ldaD R12,L14
      56/      A1 : (MACRO)             	Ccall _printf
      57/      A4 :                     ;	return 0;
      58/      A4 : (MACRO)             	ld2z R15
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 2 - 10/29/2020 11:41:47


      59/      A8 :                     L1:
      60/      A8 : (MACRO)             	release 4
      61/      AC : (MACRO)             	popr R7
      62/      B1 : (MACRO)             	Cretn
      63/      B2 :                     
      64/      B2 :                     ;;function_end$$ _main
      65/      B2 :                     ;;function_start _queens int function(int)
      66/      B2 :                     _queens:		
      67/      B2 : (MACRO)             	pushr R6
      68/      B6 : (MACRO)             	pushr R7
      69/      BA : (MACRO)             	reserve 4
      70/      BE : (MACRO)             	cpy2 R7,R12
      71/      C2 :                     ;{
      72/      C2 :                     ;	for (r = 0; r < 8; r++){
      73/      C2 : (MACRO)             	ld2z R6
      74/      C6 :                     L16:
      75/      C6 :                     ;		if (rows[r] && up[r-c+7] && down[r+c]) {
      76/      C6 : (MACRO)             	shlR2R	R11,R6	
      77/      CC : (MACRO)             	ld2 R11,'O',R11,(_rows) 
      78/      D8 : (MACRO)             	jzU2 R11,L20
      79/      E0 :                     ;D*E*A*D  R11
      80/      E0 : (MACRO)             	alu2 R11,R6,R7,sm,smb
      81/      EA : (MACRO)             	shl2I R11,1
      82/      F0 : (MACRO)             	ld2 R11,'O',R11,(_up+14) 
      83/      FC : (MACRO)             	jzU2 R11,L20
      84/     104 :                     ;D*E*A*D  R11
      85/     104 : (MACRO)             	alu2 R11,R6,R7,add,adc
      86/     10E : (MACRO)             	shl2I R11,1
      87/     114 : (MACRO)             	ld2 R11,'O',R11,(_down) 
      88/     120 : (MACRO)             	jzU2 R11,L20
      89/     128 :                     ;D*E*A*D  R11
      90/     128 :                     ;			rows[r] = up[r-c+7] = down[r+c] = 0;
      91/     128 : (MACRO)             	alu2 R11,R6,R7,add,adc
      92/     132 : (MACRO)             	shl2I R11,1
      93/     138 :                     ;D*E*A*D  R11
      94/     138 : (MACRO)             	st2I 0,'O',R11,(_down)
      95/     147 : (MACRO)             	alu2 R11,R6,R7,sm,smb
      96/     151 : (MACRO)             	shl2I R11,1
      97/     157 :                     ;D*E*A*D  R11
      98/     157 : (MACRO)             	st2I 0,'O',R11,(_up+14)
      99/     166 : (MACRO)             	shlR2R	R11,R6	
     100/     16C : (MACRO)             	st2I 0,'O',R11,(_rows)
     101/     17B :                     ;			x[c] = r;
     102/     17B : (MACRO)             	shlR2R	R11,R7	
     103/     181 : (MACRO)             	st2 R6,'O',R11,(_x)
     104/     18E :                     ;			if (c == 7)
     105/     18E : (MACRO)             	jneU2I R7,7,L24
     106/     19A :                     ;				print();
     107/     19A : (MACRO)             	Ccall _print
     108/     19D : C0 01 A8            	lbr L25
     109/     1A0 :                     L24:
     110/     1A0 :                     ;				queens(c + 1);
     111/     1A0 : (MACRO)             	cpy2 R12,R7 
     112/     1A4 : (MACRO)             	incm R12,1
     113/     1A5 : (MACRO)             	Ccall _queens
     114/     1A8 :                     L25:
     115/     1A8 :                     ;			rows[r] = up[r-c+7] = down[r+c] = 1;
     116/     1A8 : (MACRO)             	alu2 R11,R6,R7,add,adc
     117/     1B2 : (MACRO)             	shl2I R11,1
     118/     1B8 :                     ;D*E*A*D  R11
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 3 - 10/29/2020 11:41:47


     119/     1B8 : (MACRO)             	st2I 1,'O',R11,(_down)
     120/     1C7 : (MACRO)             	alu2 R11,R6,R7,sm,smb
     121/     1D1 : (MACRO)             	shl2I R11,1
     122/     1D7 :                     ;D*E*A*D  R11
     123/     1D7 : (MACRO)             	st2I 1,'O',R11,(_up+14)
     124/     1E6 : (MACRO)             	shlR2R	R11,R6	
     125/     1EC : (MACRO)             	st2I 1,'O',R11,(_rows)
     126/     1FB :                     ;		}
     127/     1FB :                     L20:
     128/     1FB :                     ;	}
     129/     1FB :                     L17:
     130/     1FB :                     ;	for (r = 0; r < 8; r++){
     131/     1FB : (MACRO)             	incm R6,1
     132/     1FC : (MACRO)             	jcI2I R6,8,lbnf,L16  
     133/     20D : (MACRO)             	ld2z R15
     134/     211 :                     ;}
     135/     211 :                     L15:
     136/     211 : (MACRO)             	release 4
     137/     215 : (MACRO)             	popr R7
     138/     21A : (MACRO)             	popr R6
     139/     21F : (MACRO)             	Cretn
     140/     220 :                     
     141/     220 :                     ;;function_end$$ _queens
     142/     220 :                     ;;function_start _print int function(void)
     143/     220 :                     _print:		
     144/     220 : (MACRO)             	pushr R7
     145/     224 : (MACRO)             	reserve 4
     146/     228 :                     ;{
     147/     228 :                     ;	for (k = 0; k < 8; k++)
     148/     228 : (MACRO)             	ld2z R7
     149/     22C :                     L28:
     150/     22C :                     ;		printf("%c", x[k]+'1');
     151/     22C : (MACRO)             	ldaD R12,L32
     152/     232 : (MACRO)             	shlR2R	R11,R7	
     153/     238 : (MACRO)             	ld2 R11,'O',R11,(_x) 
     154/     244 : (MACRO)             	ldA2 R13,'O',R11,(49)
     155/     24C :                     ;D*E*A*D  R11
     156/     24C : (MACRO)             	Ccall _printf
     157/     24F :                     L29:
     158/     24F :                     ;	for (k = 0; k < 8; k++)
     159/     24F : (MACRO)             	incm R7,1
     160/     250 : (MACRO)             	jcI2I R7,8,lbnf,L28  
     161/     261 :                     ;	printf("\n");
     162/     261 : (MACRO)             	ldaD R12,L33
     163/     267 : (MACRO)             	Ccall _printf
     164/     26A : (MACRO)             	ld2z R15
     165/     26E :                     ;}
     166/     26E :                     L27:
     167/     26E : (MACRO)             	release 4
     168/     272 : (MACRO)             	popr R7
     169/     277 : (MACRO)             	Cretn
     170/     278 :                     
     171/     278 :                     ;;function_end$$ _print
     172/     278 :                     ;;function_start _strncmp int function(pointer to const char,pointer to const char,unsigned int)
     173/     278 :                     _strncmp:		
     174/     278 : (MACRO)             	pushr R6
     175/     27C : (MACRO)             	pushr R7
     176/     280 : (MACRO)             	ld2 R7,'O',sp,(10+1) 
     177/     28C :                     ;{
     178/     28C :                     ;    for ( ; n > 0; s1++, s2++, --n)
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 4 - 10/29/2020 11:41:47


     179/     28C : C0 02 E7            	lbr L38
     180/     28F :                     L35:
     181/     28F :                     ;	if (*s1 != *s2)
     182/     28F : (MACRO)             	ldn1 R11,R12	
     183/     291 : (MACRO)             	zExt R11 
     184/     294 : (MACRO)             	ldn1 R10,R13	
     185/     296 : (MACRO)             	zExt R10 
     186/     299 : (MACRO)             	jeqI2 R11,R10,L39
     187/     2A7 :                     ;D*E*A*D  R11
     188/     2A7 :                     ;D*E*A*D  R10
     189/     2A7 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
     190/     2A7 : (MACRO)             	ldn1 R11,R12	
     191/     2A9 : (MACRO)             	zExt R11 
     192/     2AC : (MACRO)             	ldn1 R10,R13	
     193/     2AE : (MACRO)             	zExt R10 
     194/     2B1 : (MACRO)             	jcI2 R11,R10,lbdf,L42
     195/     2C3 :                     ;D*E*A*D  R11
     196/     2C3 :                     ;D*E*A*D  R10
     197/     2C3 : (MACRO)             	ldaD R6,-1
     198/     2C9 : C0 02 D2            	lbr L43
     199/     2CC :                     L42:
     200/     2CC : (MACRO)             	ldaD R6,1
     201/     2D2 :                     L43:
     202/     2D2 : (MACRO)             	cpy2 R15,R6 
     203/     2D6 :                     ;D*E*A*D  R6
     204/     2D6 : C0 02 F3            	lbr L34
     205/     2D9 :                     L39:
     206/     2D9 :                     ;	else if (*s1 == '\0')
     207/     2D9 : 0C                  	ldn    R12
     208/     2DA : CA 02 E4            	lbnz   L44
     209/     2DD :                     ;D*E*A*D  R11 - but not in vain I
     210/     2DD :                     ;	    return 0;
     211/     2DD : (MACRO)             	ld2z R15
     212/     2E1 : C0 02 F3            	lbr L34
     213/     2E4 :                     L44:
     214/     2E4 :                     L36:
     215/     2E4 :                     ;    for ( ; n > 0; s1++, s2++, --n)
     216/     2E4 : (MACRO)             	incm R12,1
     217/     2E5 : (MACRO)             	incm R13,1
     218/     2E6 : (MACRO)             	decm R7,1	
     219/     2E7 :                     L38:
     220/     2E7 : (MACRO)             	jnzU2 R7,L35
     221/     2EF :                     ;    return 0;
     222/     2EF : (MACRO)             	ld2z R15
     223/     2F3 :                     L34:
     224/     2F3 : (MACRO)             	popr R7
     225/     2F8 : (MACRO)             	popr R6
     226/     2FD : (MACRO)             	Cretn
     227/     2FE :                     
     228/     2FE :                     ;;function_end$$ _strncmp
     229/     2FE :                     ;;function_start _strlen unsigned int function(pointer to char)
     230/     2FE :                     _strlen:		
     231/     2FE : (MACRO)             	pushr R7
     232/     302 :                     ;{
     233/     302 :                     ;	unsigned int slen = 0 ;
     234/     302 : (MACRO)             	ld2z R7
     235/     306 : C0 03 0B            	lbr L48
     236/     309 :                     L47:
     237/     309 :                     ;	while (*str != 0) {
     238/     309 :                     ;      slen++ ;
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 5 - 10/29/2020 11:41:47


     239/     309 : (MACRO)             	incm R7,1
     240/     30A :                     ;      str++ ;
     241/     30A : (MACRO)             	incm R12,1
     242/     30B :                     ;   }
     243/     30B :                     L48:
     244/     30B :                     ;	while (*str != 0) {
     245/     30B : 0C                  	ldn    R12
     246/     30C : CA 03 09            	lbnz   L47
     247/     30F :                     ;D*E*A*D  R11 - but not in vain I
     248/     30F :                     ;   return slen;
     249/     30F : (MACRO)             	cpy2 R15,R7 
     250/     313 :                     ;D*E*A*D  R7
     251/     313 :                     L46:
     252/     313 : (MACRO)             	popr R7
     253/     318 : (MACRO)             	Cretn
     254/     319 :                     
     255/     319 :                     ;;function_end$$ _strlen
     256/     319 :                     ;;function_start _printstr void function(pointer to char)
     257/     319 :                     _printstr:		
     258/     319 : (MACRO)             	pushr R7
     259/     31D : (MACRO)             	reserve 4
     260/     321 : (MACRO)             	cpy2 R7,R12
     261/     325 :                     ;void printstr(char *ptr){
     262/     325 : C0 03 3B            	lbr L52
     263/     328 :                     L51:
     264/     328 :                     ;    while(*ptr){
     265/     328 :                     ;		putc(*ptr++); //jan 29
     266/     328 : (MACRO)             	ldaD R12,7
     267/     32E : (MACRO)             	cpy2 R11,R7 
     268/     332 : (MACRO)             	incm R7,1
     269/     333 : (MACRO)             	ldn1 R13,R11	
     270/     335 :                     ;D*E*A*D  R11
     271/     335 : (MACRO)             	zExt R13 
     272/     338 : (MACRO)             	Ccall _out
     273/     33B :                     ;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
     274/     33B : (MACRO)              nop1806
     275/     33B : (MACRO)              nop1806
     276/     33B : (MACRO)              nop1806
     277/     33B :                     ;	}
     278/     33B :                     L52:
     279/     33B :                     ;    while(*ptr){
     280/     33B : 07                  	ldn    R7
     281/     33C : CA 03 28            	lbnz   L51
     282/     33F :                     ;D*E*A*D  R11 - but not in vain I
     283/     33F :                     ;}
     284/     33F :                     L50:
     285/     33F : (MACRO)             	release 4
     286/     343 : (MACRO)             	popr R7
     287/     348 : (MACRO)             	Cretn
     288/     349 :                     
     289/     349 :                     ;;function_end$$ _printstr
     290/     349 : (MACRO)             	orgc
     291/     349 :                     	align 4
     292/     34C :                     _round_nums:
     293/     34C : 3F 00 00 00         	dd 0x3f000000
     294/     350 : 3D 4C CC CD         	dd 0x3d4ccccd
     295/     354 : 3B A3 D7 0A         	dd 0x3ba3d70a
     296/     358 : 3A 03 12 6F         	dd 0x3a03126f
     297/     35C : 38 51 B7 17         	dd 0x3851b717
     298/     360 : 36 A7 C5 AC         	dd 0x36a7c5ac
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 6 - 10/29/2020 11:41:47


     299/     364 : 35 06 37 BD         	dd 0x350637bd
     300/     368 : 33 56 BF 95         	dd 0x3356bf95
     301/     36C :                     	align 4
     302/     36C :                     _mult_nums:
     303/     36C : 3F 80 00 00         	dd 0x3f800000
     304/     370 : 41 20 00 00         	dd 0x41200000
     305/     374 : 42 C8 00 00         	dd 0x42c80000
     306/     378 : 44 7A 00 00         	dd 0x447a0000
     307/     37C : 46 1C 40 00         	dd 0x461c4000
     308/     380 : 47 C3 50 00         	dd 0x47c35000
     309/     384 : 49 74 24 00         	dd 0x49742400
     310/     388 : 4B 18 96 80         	dd 0x4b189680
     311/     38C : (MACRO)             	orgc
     312/     38C :                     ;;function_start _ftoa pointer to char function(float,pointer to char,unsigned int)
     313/     38C :                     _ftoa:		
     314/     38C : (MACRO)             	reserve 62
     315/     396 : (MACRO)             	pushr R0
     316/     39A : (MACRO)             	pushr R1
     317/     39E : (MACRO)             	pushr R6
     318/     3A2 : (MACRO)             	pushr R7
     319/     3A6 : (MACRO)             	reserve 8
     320/     3AE : (MACRO)             	cpy4 RL6,RL12
     321/     3B6 : (MACRO)             	ld2 R1,'O',sp,(86+1) 
     322/     3C2 :                     ;{
     323/     3C2 :                     ;   char *output = outbfr ;
     324/     3C2 : (MACRO)             	ld2 R0,'O',sp,(84+1) 
     325/     3CE :                     ;   if (flt < 0.0) {
     326/     3CE : (MACRO)             	ld4 RL10,'D',(L58),0
     327/     3DC : (MACRO)             	jcF4 RL6,RL10,lbdf,L56
     328/     421 :                     ;      *output++ = '-' ;
     329/     421 : (MACRO)             	cpy2 R11,R0 
     330/     425 : (MACRO)             	incm R0,1
     331/     426 : (MACRO)             	str1I 45,R11
     332/     429 :                     ;D*E*A*D  R11
     333/     429 :                     ;      flt *= -1.0 ;
     334/     429 : (MACRO)             	ld4 RL8,'D',(L59),0
     335/     437 : (MACRO)             	cpy4 RL10,RL6
     336/     43F :                     ;D*E*A*D  RL6
     337/     43F : (MACRO)             	Ccall fp_mul 
     338/     442 : (MACRO)             	cpy4 RL6,RL8
     339/     44A :                     ;D*E*A*D  RL8
     340/     44A :                     ;   } else {
     341/     44A : C0 04 58            	lbr L57
     342/     44D :                     L56:
     343/     44D :                     ;      if (use_leading_plus) {
     344/     44D : C0 04 58            	lbr L60
     345/     450 :                     ;         *output++ = '+' ;
     346/     450 : (MACRO)             	cpy2 R11,R0 
     347/     454 : (MACRO)             	incm R0,1
     348/     455 : (MACRO)             	str1I 43,R11
     349/     458 :                     ;D*E*A*D  R11
     350/     458 :                     ;      }
     351/     458 :                     L60:
     352/     458 :                     ;   }
     353/     458 :                     L57:
     354/     458 :                     ;   if (dec_digits < 8) {
     355/     458 : (MACRO)             	jcI2I R1,8,lbdf,L62
     356/     469 :                     ;      flt += round_nums[dec_digits] ;
     357/     469 : (MACRO)             	cpy4 RL8,RL6
     358/     471 :                     ;D*E*A*D  RL6
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 7 - 10/29/2020 11:41:47


     359/     471 : (MACRO)             	shlR2R	R11,R1	
     360/     477 : (MACRO)             	shl2I 	R11,1	
     361/     47D : (MACRO)             	ld4 RL10,'O',R11,(_round_nums)
     362/     48D :                     ;D*E*A*D  R11
     363/     48D : (MACRO)             	Ccall fp_add 
     364/     490 : (MACRO)             	cpy4 RL6,RL8
     365/     498 :                     ;D*E*A*D  RL8
     366/     498 :                     ;   }
     367/     498 :                     L62:
     368/     498 :                     ;	mult=mult_nums[dec_digits];
     369/     498 : (MACRO)             	shlR2R	R11,R1	
     370/     49E : (MACRO)             	shl2I 	R11,1	
     371/     4A4 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums)
     372/     4B4 :                     ;D*E*A*D  R11
     373/     4B4 : (MACRO)             	st4 RL10,'O',sp,(68+1)
     374/     4C7 :                     ;   wholeNum = flt;
     375/     4C7 : (MACRO)             	cpy4 RL8,RL6
     376/     4CF : (MACRO)             	ccall cvfi4
     377/     4D2 : (MACRO)             	st4 RL8,'O',sp,(72+1)
     378/     4E5 :                     ;   decimalNum = ((flt - wholeNum) * mult);
     379/     4E5 : (MACRO)             	cpy4 RL8,RL6
     380/     4ED :                     ;D*E*A*D  RL6
     381/     4ED : (MACRO)             	st4 RL8,'O',sp,(16+1)
     382/     500 : (MACRO)             	ld4 RL8,'O',sp,(72+1)
     383/     510 : (MACRO)             	Ccall cvif4
     384/     513 : (MACRO)             	cpy4 RL10,RL8
     385/     51B :                     ;D*E*A*D  RL8
     386/     51B : (MACRO)             	ld4 RL8,'O',sp,(16+1)
     387/     52B : (MACRO)             	Ccall fp_sub 
     388/     52E : (MACRO)             	ld4 RL10,'O',sp,(68+1)
     389/     53E : (MACRO)             	Ccall fp_mul 
     390/     541 : (MACRO)             	ccall cvfi4
     391/     544 : (MACRO)             	st4 RL8,'O',sp,(64+1)
     392/     557 :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
     393/     557 : (MACRO)             	ld4 Rp1p2,'O',sp,(72+1)
     394/     567 : (MACRO)             	st2 R0,'O',sp,(4+1)
     395/     574 : (MACRO)             	st2i 1,'O',sp,(6+1)
     396/     583 :                     ;D*E*A*D  R11 - but not in vain A
     397/     583 : (MACRO)             	Ccall _dubdabx
     398/     586 : (MACRO)             	cpy2 R11,R15 
     399/     58A : (MACRO)             	cpy2 R12,R0 
     400/     58E : (MACRO)             	cpy2 R13,R11 
     401/     592 :                     ;D*E*A*D  R11
     402/     592 : (MACRO)             	Ccall _strcpy
     403/     595 :                     ;   output+=strlen(output);
     404/     595 : (MACRO)             	cpy2 R12,R0 
     405/     599 : (MACRO)             	Ccall _strlen
     406/     59C : (MACRO)             	alu2 R0,R15,R0,add,adc	
     407/     5A6 :                     ;   if (dec_digits > 0) {
     408/     5A6 : (MACRO)             	jzU2 R1,L64
     409/     5AE :                     ;		*output++ = '.' ;
     410/     5AE : (MACRO)             	cpy2 R11,R0 
     411/     5B2 : (MACRO)             	incm R0,1
     412/     5B3 : (MACRO)             	str1I 46,R11
     413/     5B6 :                     ;D*E*A*D  R11
     414/     5B6 :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
     415/     5B6 : (MACRO)             	ld4 Rp1p2,'O',sp,(64+1)
     416/     5C6 : (MACRO)             	st2 R0,'O',sp,(4+1)
     417/     5D3 : (MACRO)             	cpy2 R11,R1 
     418/     5D7 :                     ;D*E*A*D  R1
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 8 - 10/29/2020 11:41:47


     419/     5D7 : (MACRO)             	st2 R11,'O',sp,(6+1)
     420/     5E4 :                     ;D*E*A*D  R11
     421/     5E4 : (MACRO)             	Ccall _dubdabx
     422/     5E7 : (MACRO)             	cpy2 R11,R15 
     423/     5EB : (MACRO)             	cpy2 R12,R0 
     424/     5EF :                     ;D*E*A*D  R0
     425/     5EF : (MACRO)             	cpy2 R13,R11 
     426/     5F3 :                     ;D*E*A*D  R11
     427/     5F3 : (MACRO)             	Ccall _strcpy
     428/     5F6 :                     ;	}
     429/     5F6 :                     L64:
     430/     5F6 :                     ;   return outbfr;
     431/     5F6 : (MACRO)             	ld2 R15,'O',sp,(84+1) 
     432/     602 :                     L55:
     433/     602 : (MACRO)             	release 8
     434/     60A : (MACRO)             	popr R7
     435/     60F : (MACRO)             	popr R6
     436/     614 : (MACRO)             	popr R1
     437/     619 : (MACRO)             	popr R0
     438/     61E : (MACRO)             	release 62
     439/     626 : (MACRO)             	Cretn
     440/     627 :                     
     441/     627 :                     ;;function_end$$ _ftoa
     442/     627 :                     ;;function_start _itoa pointer to char function(int,pointer to char)
     443/     627 :                     _itoa:		
     444/     627 : (MACRO)             	reserve 2
     445/     629 : (MACRO)             	pushr R0
     446/     62D : (MACRO)             	pushr R1
     447/     631 : (MACRO)             	pushr R6
     448/     635 : (MACRO)             	pushr R7
     449/     639 : (MACRO)             	reserve 4
     450/     63D : (MACRO)             	st2 R12,'O',sp,(16+1)
     451/     64A : 1E                  	inc memaddr				
     452/     64B : (MACRO)             	str2 R13,memaddr
     453/     651 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     454/     651 :                     ;	unsigned int flag=0;
     455/     651 : (MACRO)             	ld2z R0
     456/     655 :                     ;	char * bptr; bptr=buffer;
     457/     655 : (MACRO)             	ld2 R11,'O',sp,(18+1) 
     458/     661 : (MACRO)             	st2 R11,'O',sp,(12+1)
     459/     66E :                     ;D*E*A*D  R11
     460/     66E :                     ;	if (s<0){
     461/     66E : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     462/     67A : (MACRO)             	jcI2I R11,0,lbdf,L67
     463/     68B :                     ;D*E*A*D  R11
     464/     68B :                     ;		*bptr='-';bptr++;
     465/     68B : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     466/     697 : (MACRO)             	str1I 45,R11
     467/     69A :                     ;D*E*A*D  R11
     468/     69A : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     469/     6A6 : (MACRO)             	incm R11,1
     470/     6A7 : (MACRO)             	st2 R11,'O',sp,(12+1)
     471/     6B4 :                     ;D*E*A*D  R11
     472/     6B4 :                     ;		n=-s;
     473/     6B4 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     474/     6C0 : (MACRO)             	negI2 R11,R11 
     475/     6C9 : (MACRO)             	cpy2 R6,R11 
     476/     6CD :                     ;D*E*A*D  R11
     477/     6CD :                     ;	} else{
     478/     6CD : C0 06 E0            	lbr L68
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 9 - 10/29/2020 11:41:47


     479/     6D0 :                     L67:
     480/     6D0 :                     ;		n=s;
     481/     6D0 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     482/     6DC : (MACRO)             	cpy2 R6,R11 
     483/     6E0 :                     ;D*E*A*D  R11
     484/     6E0 :                     ;	}
     485/     6E0 :                     L68:
     486/     6E0 :                     ;	k=10000;
     487/     6E0 : (MACRO)             	ldaD R7,10000
     488/     6E6 : C0 07 6B            	lbr L70
     489/     6E9 :                     L69:
     490/     6E9 :                     ;	while(k>0){
     491/     6E9 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     492/     6E9 : (MACRO)             	ld2z R1
     493/     6ED : C0 06 FB            	lbr L75
     494/     6F0 :                     L72:
     495/     6F0 :                     L73:
     496/     6F0 : (MACRO)             	incm R1,1
     497/     6F1 : (MACRO)             	alu2 R6,R6,R7,sm,smb
     498/     6FB :                     L75:
     499/     6FB : (MACRO)             	jcU2 R6,R7,lbdf,L72 
     500/     708 :                     ;		if (flag || r>0||k==1){
     501/     708 : (MACRO)             	jnzU2 R0,L79
     502/     710 : (MACRO)             	jnzU2 R1,L79
     503/     718 : (MACRO)             	jneU2I R7,1,L76
     504/     724 :                     L79:
     505/     724 :                     ;			*bptr=('0'+r);bptr++;
     506/     724 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     507/     730 : (MACRO)             	ldA2 R10,'O',R1,(48)
     508/     738 :                     ;D*E*A*D  R1
     509/     738 : (MACRO)             	str1 R10,R11
     510/     73A :                     ;D*E*A*D  R10
     511/     73A :                     ;D*E*A*D  R11
     512/     73A : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     513/     746 : (MACRO)             	incm R11,1
     514/     747 : (MACRO)             	st2 R11,'O',sp,(12+1)
     515/     754 :                     ;D*E*A*D  R11
     516/     754 :                     ;			flag='y';
     517/     754 : (MACRO)             	ldaD R0,121
     518/     75A :                     ;		}
     519/     75A :                     L76:
     520/     75A :                     ;		k=k/10;
     521/     75A : (MACRO)             	cpy2 R12,R7 
     522/     75E :                     ;D*E*A*D  R7
     523/     75E : (MACRO)             	ldaD R13,10
     524/     764 : (MACRO)             	Ccall _divu2
     525/     767 : (MACRO)             	cpy2 R7,R15 
     526/     76B :                     ;	}
     527/     76B :                     L70:
     528/     76B :                     ;	while(k>0){
     529/     76B : (MACRO)             	jnzU2 R7,L69
     530/     773 :                     ;	*bptr='\0';
     531/     773 : (MACRO)             	ld2 R11,'O',sp,(12+1) 
     532/     77F : (MACRO)             	str1I 0,R11
     533/     782 :                     ;D*E*A*D  R11
     534/     782 :                     ;	return buffer;
     535/     782 : (MACRO)             	ld2 R15,'O',sp,(18+1) 
     536/     78E :                     L66:
     537/     78E : (MACRO)             	release 4
     538/     792 : (MACRO)             	popr R7
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 10 - 10/29/2020 11:41:47


     539/     797 : (MACRO)             	popr R6
     540/     79C : (MACRO)             	popr R1
     541/     7A1 : (MACRO)             	popr R0
     542/     7A6 : (MACRO)             	release 2
     543/     7A8 : (MACRO)             	Cretn
     544/     7A9 :                     
     545/     7A9 :                     ;;function_end$$ _itoa
     546/     7A9 :                     ;;function_start _ltoa pointer to char function(long int,pointer to char)
     547/     7A9 :                     _ltoa:		
     548/     7A9 : (MACRO)             	pushr R1
     549/     7AD : (MACRO)             	pushr R6
     550/     7B1 : (MACRO)             	pushr R7
     551/     7B5 : (MACRO)             	reserve 8
     552/     7BD : (MACRO)             	cpy4 RL6,RL12
     553/     7C5 :                     ;D*E*A*D  RL12
     554/     7C5 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     555/     7C5 :                     ;	char* bptr=buffer;
     556/     7C5 : (MACRO)             	ld2 R1,'O',sp,(20+1) 
     557/     7D1 :                     ;	if (s<0){
     558/     7D1 : (MACRO)             	ldI4 RL10,0 
     559/     7DD : (MACRO)             	jcI4 RL6,RL10,lbdf,L81
     560/     7F9 :                     ;D*E*A*D  RL10
     561/     7F9 :                     ;		*bptr++='-';
     562/     7F9 : (MACRO)             	cpy2 R11,R1 
     563/     7FD : (MACRO)             	incm R1,1
     564/     7FE : (MACRO)             	str1I 45,R11
     565/     801 :                     ;D*E*A*D  R11
     566/     801 :                     ;		s=-s;
     567/     801 : (MACRO)             	negI4 RL6,RL6 
     568/     821 :                     ;	}
     569/     821 :                     L81:
     570/     821 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
     571/     821 : (MACRO)             	cpy4 Rp1p2,RL6
     572/     829 :                     ;D*E*A*D  RL6
     573/     829 : (MACRO)             	st2 R1,'O',sp,(4+1)
     574/     836 : (MACRO)             	st2i 1,'O',sp,(6+1)
     575/     845 :                     ;D*E*A*D  R11 - but not in vain A
     576/     845 : (MACRO)             	Ccall _dubdabx
     577/     848 : (MACRO)             	cpy2 R11,R15 
     578/     84C : (MACRO)             	cpy2 R12,R1 
     579/     850 :                     ;D*E*A*D  R1
     580/     850 : (MACRO)             	cpy2 R13,R11 
     581/     854 :                     ;D*E*A*D  R11
     582/     854 : (MACRO)             	Ccall _strcpy
     583/     857 :                     ;	return buffer;
     584/     857 : (MACRO)             	ld2 R15,'O',sp,(20+1) 
     585/     863 :                     L80:
     586/     863 : (MACRO)             	release 8
     587/     86B : (MACRO)             	popr R7
     588/     870 : (MACRO)             	popr R6
     589/     875 : (MACRO)             	popr R1
     590/     87A : (MACRO)             	Cretn
     591/     87B :                     
     592/     87B :                     ;;function_end$$ _ltoa
     593/     87B :                     ;;function_start _printint void function(int)
     594/     87B :                     _printint:		
     595/     87B : (MACRO)             	reserve 12
     596/     885 : (MACRO)             	st2 R12,'O',sp,(14+1)
     597/     892 :                     ;void printint(int s){ //print an integer
     598/     892 :                     ;	itoa(s,buffer);
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 11 - 10/29/2020 11:41:47


     599/     892 : (MACRO)             	ld2 R12,'O',sp,(14+1) 
     600/     89E : (MACRO)             	ldA2 R13,'O',sp,(4+1)
     601/     8A6 : (MACRO)             	Ccall _itoa
     602/     8A9 :                     ;	printstr(buffer);
     603/     8A9 : (MACRO)             	ldA2 R12,'O',sp,(4+1)
     604/     8B1 : (MACRO)             	Ccall _printstr
     605/     8B4 :                     ;}
     606/     8B4 :                     L83:
     607/     8B4 : (MACRO)             	release 12
     608/     8BC : (MACRO)             	Cretn
     609/     8BD :                     
     610/     8BD :                     ;;function_end$$ _printint
     611/     8BD :                     ;;function_start _printlint void function(long int)
     612/     8BD :                     _printlint:		
     613/     8BD : (MACRO)             	reserve 18
     614/     8C7 : (MACRO)             	st2 R12,'O',sp,(20+1)
     615/     8D4 : 1E                  	inc memaddr				
     616/     8D5 : (MACRO)             	str2 R13,memaddr
     617/     8DB :                     ;void printlint(long s){ //print a long integer
     618/     8DB :                     ;	printstr(ltoa(s,buffer));
     619/     8DB : (MACRO)             	ld4 Rp1p2,'O',sp,(20+1)
     620/     8EB : (MACRO)             	ldA2 R11,'O',sp,(6+1)
     621/     8F3 : (MACRO)             	st2 R11,'O',sp,(4+1)
     622/     900 :                     ;D*E*A*D  R11
     623/     900 : (MACRO)             	Ccall _ltoa
     624/     903 : (MACRO)             	cpy2 R12,R15 
     625/     907 :                     ;D*E*A*D  R11 - but not in vain 5
     626/     907 : (MACRO)             	Ccall _printstr
     627/     90A :                     ;}
     628/     90A :                     L84:
     629/     90A : (MACRO)             	release 18
     630/     912 : (MACRO)             	Cretn
     631/     913 :                     
     632/     913 :                     ;;function_end$$ _printlint
     633/     913 :                     ;;function_start _printflt void function(float)
     634/     913 :                     _printflt:		
     635/     913 : (MACRO)             	reserve 28
     636/     91D : (MACRO)             	st2 R12,'O',sp,(30+1)
     637/     92A : 1E                  	inc memaddr				
     638/     92B : (MACRO)             	str2 R13,memaddr
     639/     931 :                     ;void printflt(float s){ //print a float
     640/     931 :                     ;	printstr(ftoa(s,buffer,3));
     641/     931 : (MACRO)             	ld4 Rp1p2,'O',sp,(30+1)
     642/     941 : (MACRO)             	ldA2 R11,'O',sp,(8+1)
     643/     949 : (MACRO)             	st2 R11,'O',sp,(4+1)
     644/     956 :                     ;D*E*A*D  R11
     645/     956 : (MACRO)             	st2i 3,'O',sp,(6+1)
     646/     965 :                     ;D*E*A*D  R11 - but not in vain A
     647/     965 : (MACRO)             	Ccall _ftoa
     648/     968 : (MACRO)             	cpy2 R12,R15 
     649/     96C :                     ;D*E*A*D  R11 - but not in vain 5
     650/     96C : (MACRO)             	Ccall _printstr
     651/     96F :                     ;}
     652/     96F :                     L85:
     653/     96F : (MACRO)             	release 28
     654/     977 : (MACRO)             	Cretn
     655/     978 :                     
     656/     978 :                     ;;function_end$$ _printflt
     657/     978 :                     ;;function_start _putxn void function(unsigned char)
     658/     978 :                     _putxn:		
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 12 - 10/29/2020 11:41:47


     659/     978 : (MACRO)             	reserve 4
     660/     97C : (MACRO)             	st1 R12,'O',sp,(6+1)
     661/     986 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     662/     986 :                     ;	if (x<10){
     663/     986 : (MACRO)             	ld1 R11,'O',sp,(6+1)
     664/     990 : (MACRO)             	jcI1I R11,10,lbdf,L87
     665/     996 :                     ;D*E*A*D  R11
     666/     996 :                     ;		putc(x+'0');
     667/     996 : (MACRO)             	ldaD R12,7
     668/     99C : (MACRO)             	ld1 R11,'O',sp,(6+1)
     669/     9A6 : (MACRO)             	zExt R11 
     670/     9A9 : (MACRO)             	ldA2 R13,'O',R11,(48)
     671/     9B1 :                     ;D*E*A*D  R11
     672/     9B1 : (MACRO)             	Ccall _out
     673/     9B4 :                     ;	} else {
     674/     9B4 : C0 09 DD            	lbr L88
     675/     9B7 :                     L87:
     676/     9B7 :                     ;		putc(x+'A'-10);
     677/     9B7 : (MACRO)             	ldaD R12,7
     678/     9BD : (MACRO)             	ld1 R11,'O',sp,(6+1)
     679/     9C7 : (MACRO)             	zExt R11 
     680/     9CA : (MACRO)             	ldA2 R11,'O',R11,(65)
     681/     9D2 : (MACRO)             	alu2I R13,R11,10,smi,smbi
     682/     9DA :                     ;D*E*A*D  R11
     683/     9DA : (MACRO)             	Ccall _out
     684/     9DD :                     ;	}
     685/     9DD :                     L88:
     686/     9DD :                     ;}
     687/     9DD :                     L86:
     688/     9DD : (MACRO)             	release 4
     689/     9E1 : (MACRO)             	Cretn
     690/     9E2 :                     
     691/     9E2 :                     ;;function_end$$ _putxn
     692/     9E2 :                     ;;function_start _putx void function(unsigned char)
     693/     9E2 :                     _putx:		
     694/     9E2 : (MACRO)             	reserve 4
     695/     9E6 : (MACRO)             	st1 R12,'O',sp,(6+1)
     696/     9F0 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     697/     9F0 :                     ;	putxn(x>>4);
     698/     9F0 : (MACRO)             	ld1 R11,'O',sp,(6+1)
     699/     9FA : (MACRO)             	zExt R11 
     700/     9FD : (MACRO)             	shrI2I R11,4
     701/     A1D : (MACRO)             	cpy1 R12,R11
     702/     A1F :                     ;D*E*A*D  R11
     703/     A1F : (MACRO)             	zExt R12 
     704/     A22 : (MACRO)             	Ccall _putxn
     705/     A25 :                     ;	putxn(x & 0x0F);
     706/     A25 : (MACRO)             	ld1 R11,'O',sp,(6+1)
     707/     A2F : (MACRO)             	zExt R11 
     708/     A32 : (MACRO)             	alu2I R11,R11,15,ani,ani
     709/     A3A :                     	
     710/     A3A : (MACRO)             	cpy1 R12,R11
     711/     A3C :                     ;D*E*A*D  R11
     712/     A3C : (MACRO)             	zExt R12 
     713/     A3F : (MACRO)             	Ccall _putxn
     714/     A42 :                     ;}
     715/     A42 :                     L89:
     716/     A42 : (MACRO)             	release 4
     717/     A46 : (MACRO)             	Cretn
     718/     A47 :                     
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 13 - 10/29/2020 11:41:47


     719/     A47 :                     ;;function_end$$ _putx
     720/     A47 :                     ;;function_start _printf void function(pointer to char,...)
     721/     A47 :                     _printf:		
     722/     A47 : (MACRO)             	reserve 4
     723/     A4B : (MACRO)             	pushr R0
     724/     A4F : (MACRO)             	pushr R1
     725/     A53 : (MACRO)             	pushr R6
     726/     A57 : (MACRO)             	pushr R7
     727/     A5B : (MACRO)             	reserve 4
     728/     A5F : (MACRO)             	st2 R12,'O',sp,(18+1)
     729/     A6C : 1E                  	inc memaddr				
     730/     A6D : (MACRO)             	str2 R13,memaddr
     731/     A73 :                     ;D*E*A*D  memaddr
     732/     A73 :                     ;void printf(char *pptr,...){ //limited implementation of printf
     733/     A73 :                     ;	register char* ptr=pptr; //try to save on loads/spills
     734/     A73 : (MACRO)             	ld2 R7,'O',sp,(18+1) 
     735/     A7F :                     ;	int argslot=0;	//used to align longs
     736/     A7F : (MACRO)             	ld2z R0
     737/     A83 :                     ;	int * this=(int *)&pptr;
     738/     A83 : (MACRO)             	ldA2 R1,'O',sp,(18+1)
     739/     A8B :                     ;	this++; argslot++; //advance argument pointer and slot #
     740/     A8B : (MACRO)             	incm R1,2
     741/     A8D : (MACRO)             	incm R0,1
     742/     A8E : C0 0D 20            	lbr L92
     743/     A91 :                     L91:
     744/     A91 :                     ;    while(*ptr) {
     745/     A91 :                     ;		c=*ptr; ptr++;
     746/     A91 : (MACRO)             	ldn1 R6,R7
     747/     A93 : (MACRO)             	incm R7,1
     748/     A94 :                     ;		if (c!='%'){
     749/     A94 : (MACRO)             	jeqU1I R6,37,L94
     750/     A9A :                     ;			putc(c);
     751/     A9A : (MACRO)             	ldaD R12,7
     752/     AA0 : (MACRO)             	cpy1 R13,R6
     753/     AA2 :                     ;D*E*A*D  R6
     754/     AA2 : (MACRO)             	zExt R13 
     755/     AA5 : (MACRO)             	Ccall _out
     756/     AA8 :                     ;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
     757/     AA8 : (MACRO)              nop1806
     758/     AA8 : (MACRO)              nop1806
     759/     AA8 : (MACRO)              nop1806
     760/     AA8 :                     ;		} else{
     761/     AA8 : C0 0D 20            	lbr L95
     762/     AAB :                     L94:
     763/     AAB :                     ;			c=*ptr;ptr++;
     764/     AAB : (MACRO)             	ldn1 R6,R7
     765/     AAD : (MACRO)             	incm R7,1
     766/     AAE :                     ;			switch (c){
     767/     AAE : (MACRO)             	cpy1 R11,R6
     768/     AB0 : (MACRO)             	zExt R11 
     769/     AB3 : (MACRO)             	st2 R11,'O',sp,(13+1)
     770/     AC0 : (MACRO)             	jcI2I R11,99,lbnf,L118  
     771/     AD1 : (MACRO)             	jnI2I R11,108,lbnf,L119
     772/     AE2 : (MACRO)             	shl2I R11,1
     773/     AE8 : (MACRO)             	ld2 R11,'O',R11,(L120-198) 
     774/     AF4 :                     ;D*E*A*D  R11
     775/     AF4 : (MACRO)             	jumpv R11
     776/     AFD : (MACRO)             	orgc
     777/     AFD :                     L120:
     778/     AFD : 0B A3               	dw L102
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 14 - 10/29/2020 11:41:47


     779/     AFF : 0B 79               	dw L100
     780/     B01 : 0D 03               	dw L97
     781/     B03 : 0C D0               	dw L113
     782/     B05 : 0D 03               	dw L97
     783/     B07 : 0D 03               	dw L97
     784/     B09 : 0B 79               	dw L100
     785/     B0B : 0D 03               	dw L97
     786/     B0D : 0D 03               	dw L97
     787/     B0F : 0C 1D               	dw L106
     788/     B11 : (MACRO)             	orgc
     789/     B11 :                     L118:
     790/     B11 : (MACRO)             	ld2 R11,'O',sp,(13+1) 
     791/     B1D : (MACRO)             	jeqU2I R11,88,L105
     792/     B29 :                     ;D*E*A*D  R11
     793/     B29 : C0 0D 03            	lbr L97
     794/     B2C :                     L119:
     795/     B2C : (MACRO)             	ld2 R11,'O',sp,(13+1) 
     796/     B38 : (MACRO)             	ldaD R10,115
     797/     B3E : (MACRO)             	jeqI2 R11,R10,L101
     798/     B4C : (MACRO)             	jcI2 R11,R10,lbnf,L97
     799/     B5E :                     ;D*E*A*D  R11
     800/     B5E :                     ;D*E*A*D  R10
     801/     B5E :                     L122:
     802/     B5E : (MACRO)             	ld2 R11,'O',sp,(13+1) 
     803/     B6A : (MACRO)             	jeqU2I R11,120,L105
     804/     B76 :                     ;D*E*A*D  R11
     805/     B76 : C0 0D 03            	lbr L97
     806/     B79 :                     L100:
     807/     B79 :                     ;					printint(*this++);
     808/     B79 : (MACRO)             	cpy2 R11,R1 
     809/     B7D : (MACRO)             	incm R1,2
     810/     B7F : (MACRO)             	ldn2 R12,R11	
     811/     B84 :                     ;D*E*A*D  R11
     812/     B84 : (MACRO)             	Ccall _printint
     813/     B87 :                     ;					argslot+=1; //next argument slot
     814/     B87 : (MACRO)             	incm R0,1
     815/     B88 :                     ;					break;
     816/     B88 : C0 0D 20            	lbr L98
     817/     B8B :                     L101:
     818/     B8B :                     ;					printstr((char*) *this++);
     819/     B8B : (MACRO)             	cpy2 R11,R1 
     820/     B8F : (MACRO)             	incm R1,2
     821/     B91 : (MACRO)             	ldn2s R11,R11	
     822/     B98 : (MACRO)             	cpy2 R12,R11 
     823/     B9C :                     ;D*E*A*D  R11
     824/     B9C : (MACRO)             	Ccall _printstr
     825/     B9F :                     ;					argslot+=1; //next argument slot
     826/     B9F : (MACRO)             	incm R0,1
     827/     BA0 :                     ;					break;
     828/     BA0 : C0 0D 20            	lbr L98
     829/     BA3 :                     L102:
     830/     BA3 :                     ;					if (*ptr=='x'){ //if there's an x
     831/     BA3 : (MACRO)             	ldn1 R11,R7
     832/     BA5 : (MACRO)             	jneU1I R11,120,L103	
     833/     BAB :                     ;D*E*A*D  R11
     834/     BAB :                     ;						ptr++; //skip over the x
     835/     BAB : (MACRO)             	incm R7,1
     836/     BAC :                     ;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
     837/     BAC : (MACRO)             	cpy2 R11,R1 
     838/     BB0 : (MACRO)             	incm R1,2
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 15 - 10/29/2020 11:41:47


     839/     BB2 : (MACRO)             	ldn2s R11,R11	
     840/     BB9 : (MACRO)             	alu2I R11,R11,255,ani,ani 
     841/     BC1 : (MACRO)             	cpy1 R12,R11
     842/     BC3 :                     ;D*E*A*D  R11
     843/     BC3 : (MACRO)             	zExt R12 
     844/     BC6 : (MACRO)             	Ccall _putx
     845/     BC9 :                     ;					} else{
     846/     BC9 : C0 0B E6            	lbr L104
     847/     BCC :                     L103:
     848/     BCC :                     ;						putc((unsigned int) *this++);		//print as char
     849/     BCC : (MACRO)             	ldaD R12,7
     850/     BD2 : (MACRO)             	cpy2 R11,R1 
     851/     BD6 : (MACRO)             	incm R1,2
     852/     BD8 : (MACRO)             	ldn2s R11,R11	
     853/     BDF : (MACRO)             	cpy2 R13,R11 
     854/     BE3 :                     ;D*E*A*D  R11
     855/     BE3 : (MACRO)             	Ccall _out
     856/     BE6 :                     ;					}
     857/     BE6 :                     L104:
     858/     BE6 :                     ;					argslot+=1; //next argument slot
     859/     BE6 : (MACRO)             	incm R0,1
     860/     BE7 :                     ;					break;
     861/     BE7 : C0 0D 20            	lbr L98
     862/     BEA :                     L105:
     863/     BEA :                     ;					putx(((unsigned int) *this)>>8);
     864/     BEA : (MACRO)             	ldn2 R11,R1	
     865/     BEF : 9B                  	ghi	R11	
     866/     BF0 :                     ;D*E*A*D  R11
     867/     BF0 : AB                  	plo	R11
     868/     BF1 : F8 00               	ldi	0
     869/     BF3 : BB                  	phi	R11
     870/     BF4 : (MACRO)             	cpy1 R12,R11
     871/     BF6 :                     ;D*E*A*D  R11
     872/     BF6 : (MACRO)             	zExt R12 
     873/     BF9 : (MACRO)             	Ccall _putx
     874/     BFC :                     ;					putx(((unsigned int) *this++)&255);
     875/     BFC : (MACRO)             	cpy2 R11,R1 
     876/     C00 : (MACRO)             	incm R1,2
     877/     C02 : (MACRO)             	ldn2s R11,R11	
     878/     C09 : (MACRO)             	alu2I R11,R11,255,ani,ani 
     879/     C11 : (MACRO)             	cpy1 R12,R11
     880/     C13 :                     ;D*E*A*D  R11
     881/     C13 : (MACRO)             	zExt R12 
     882/     C16 : (MACRO)             	Ccall _putx
     883/     C19 :                     ;					argslot+=1; //next argument slot
     884/     C19 : (MACRO)             	incm R0,1
     885/     C1A :                     ;					break;
     886/     C1A : C0 0D 20            	lbr L98
     887/     C1D :                     L106:
     888/     C1D :                     ;					if (*ptr){ //as long as there's something there
     889/     C1D : 07                  	ldn   R7
     890/     C1E : C2 0C D0            	lbz   L107
     891/     C21 :                     ;D*E*A*D  R11 - but not in vain H
     892/     C21 :                     ;						xord=*ptr++;
     893/     C21 : (MACRO)             	cpy2 R11,R7 
     894/     C25 : (MACRO)             	incm R7,1
     895/     C26 : (MACRO)             	ldA2 R10,'O',sp,(15+1)
     896/     C2E : 0B                  	ldn R11
     897/     C2F : 5A                  	str R10
     898/     C30 :                     ;D*E*A*D  R10
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 16 - 10/29/2020 11:41:47


     899/     C30 :                     ;						if (argslot&1) {
     900/     C30 : (MACRO)             	alu2I R11,R0,1,ani,ani
     901/     C38 :                     	
     902/     C38 : (MACRO)             	jzU2 R11,L109
     903/     C40 :                     ;D*E*A*D  R11
     904/     C40 :                     ;							this++;
     905/     C40 : (MACRO)             	incm R1,2
     906/     C42 :                     ;							argslot++;
     907/     C42 : (MACRO)             	incm R0,1
     908/     C43 :                     ;						}
     909/     C43 :                     L109:
     910/     C43 :                     ;						if(xord=='d'){
     911/     C43 : (MACRO)             	ld1 R11,'O',sp,(15+1)
     912/     C4D : (MACRO)             	jneU1I R11,100,L111	
     913/     C53 :                     ;D*E*A*D  R11
     914/     C53 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     915/     C53 : (MACRO)             	ld4 Rp1p2,'O',R1,0
     916/     C63 : (MACRO)             	Ccall _printlint
     917/     C66 :                     ;							this+=2;				// and advances it 4 bytes
     918/     C66 : (MACRO)             	incm R1,4
     919/     C6A :                     ;						} else{
     920/     C6A : C0 0C CB            	lbr L112
     921/     C6D :                     L111:
     922/     C6D :                     ;							putx(((unsigned int) *this)>>8);
     923/     C6D : (MACRO)             	ldn2 R11,R1	
     924/     C72 : 9B                  	ghi	R11	
     925/     C73 :                     ;D*E*A*D  R11
     926/     C73 : AB                  	plo	R11
     927/     C74 : F8 00               	ldi	0
     928/     C76 : BB                  	phi	R11
     929/     C77 : (MACRO)             	cpy1 R12,R11
     930/     C79 :                     ;D*E*A*D  R11
     931/     C79 : (MACRO)             	zExt R12 
     932/     C7C : (MACRO)             	Ccall _putx
     933/     C7F :                     ;							putx(((unsigned int) *this++)&255);
     934/     C7F : (MACRO)             	cpy2 R11,R1 
     935/     C83 : (MACRO)             	incm R1,2
     936/     C85 : (MACRO)             	ldn2s R11,R11	
     937/     C8C : (MACRO)             	alu2I R11,R11,255,ani,ani 
     938/     C94 : (MACRO)             	cpy1 R12,R11
     939/     C96 :                     ;D*E*A*D  R11
     940/     C96 : (MACRO)             	zExt R12 
     941/     C99 : (MACRO)             	Ccall _putx
     942/     C9C :                     ;							putx(((unsigned int) *this)>>8);
     943/     C9C : (MACRO)             	ldn2 R11,R1	
     944/     CA1 : 9B                  	ghi	R11	
     945/     CA2 :                     ;D*E*A*D  R11
     946/     CA2 : AB                  	plo	R11
     947/     CA3 : F8 00               	ldi	0
     948/     CA5 : BB                  	phi	R11
     949/     CA6 : (MACRO)             	cpy1 R12,R11
     950/     CA8 :                     ;D*E*A*D  R11
     951/     CA8 : (MACRO)             	zExt R12 
     952/     CAB : (MACRO)             	Ccall _putx
     953/     CAE :                     ;							putx(((unsigned int) *this++)&255);
     954/     CAE : (MACRO)             	cpy2 R11,R1 
     955/     CB2 : (MACRO)             	incm R1,2
     956/     CB4 : (MACRO)             	ldn2s R11,R11	
     957/     CBB : (MACRO)             	alu2I R11,R11,255,ani,ani 
     958/     CC3 : (MACRO)             	cpy1 R12,R11
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 17 - 10/29/2020 11:41:47


     959/     CC5 :                     ;D*E*A*D  R11
     960/     CC5 : (MACRO)             	zExt R12 
     961/     CC8 : (MACRO)             	Ccall _putx
     962/     CCB :                     ;						}
     963/     CCB :                     L112:
     964/     CCB :                     ;						argslot+=2;
     965/     CCB : (MACRO)             	incm R0,2
     966/     CCD :                     ;						break;
     967/     CCD : C0 0D 20            	lbr L98
     968/     CD0 :                     L107:
     969/     CD0 :                     L113:
     970/     CD0 :                     ;					if (*ptr){ //as long as there's something there
     971/     CD0 : 07                  	ldn   R7
     972/     CD1 : C2 0D 03            	lbz   L114
     973/     CD4 :                     ;D*E*A*D  R11 - but not in vain H
     974/     CD4 :                     ;						if (argslot&1) { //adjust alignment
     975/     CD4 : (MACRO)             	alu2I R11,R0,1,ani,ani
     976/     CDC :                     	
     977/     CDC : (MACRO)             	jzU2 R11,L116
     978/     CE4 :                     ;D*E*A*D  R11
     979/     CE4 :                     ;							this++;
     980/     CE4 : (MACRO)             	incm R1,2
     981/     CE6 :                     ;							argslot++;
     982/     CE6 : (MACRO)             	incm R0,1
     983/     CE7 :                     ;						}
     984/     CE7 :                     L116:
     985/     CE7 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
     986/     CE7 : (MACRO)             	ld4 Rp1p2,'O',R1,0
     987/     CF7 : (MACRO)             	Ccall _printflt
     988/     CFA :                     ;						this+=2;				// and advances it 4 bytes
     989/     CFA : (MACRO)             	incm R1,4
     990/     CFE :                     ;						argslot+=2;
     991/     CFE : (MACRO)             	incm R0,2
     992/     D00 :                     ;						break;
     993/     D00 : C0 0D 20            	lbr L98
     994/     D03 :                     L114:
     995/     D03 :                     L97:
     996/     D03 :                     ;					putc('%');putc(c);
     997/     D03 : (MACRO)             	ldaD R12,7
     998/     D09 : (MACRO)             	ldaD R13,37
     999/     D0F : (MACRO)             	Ccall _out
    1000/     D12 : (MACRO)             	ldaD R12,7
    1001/     D18 : (MACRO)             	cpy1 R13,R6
    1002/     D1A :                     ;D*E*A*D  R6
    1003/     D1A : (MACRO)             	zExt R13 
    1004/     D1D : (MACRO)             	Ccall _out
    1005/     D20 :                     ;			} //switch
    1006/     D20 :                     L98:
    1007/     D20 :                     ;		} //%
    1008/     D20 :                     L95:
    1009/     D20 :                     ;	} //while
    1010/     D20 :                     L92:
    1011/     D20 :                     ;    while(*ptr) {
    1012/     D20 : 07                  	ldn    R7
    1013/     D21 : CA 0A 91            	lbnz   L91
    1014/     D24 :                     ;D*E*A*D  R11 - but not in vain I
    1015/     D24 :                     ;} //prtf
    1016/     D24 :                     L90:
    1017/     D24 : (MACRO)             	release 4
    1018/     D28 : (MACRO)             	popr R7
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 18 - 10/29/2020 11:41:47


    1019/     D2D : (MACRO)             	popr R6
    1020/     D32 : (MACRO)             	popr R1
    1021/     D37 : (MACRO)             	popr R0
    1022/     D3C : (MACRO)             	release 4
    1023/     D40 : (MACRO)             	Cretn
    1024/     D41 :                     
    1025/     D41 :                     ;;function_end$$ _printf
    1026/     D41 :                     ;;function_start _exit void function(int)
    1027/     D41 :                     _exit:		
    1028/     D41 : (MACRO)             	reserve 4
    1029/     D45 : (MACRO)             	st2 R12,'O',sp,(6+1)
    1030/     D52 :                     ;void exit(int code){
    1031/     D52 :                     ;	printf("exit %d\n",code);
    1032/     D52 : (MACRO)             	ldaD R12,L124
    1033/     D58 : (MACRO)             	ld2 R13,'O',sp,(6+1) 
    1034/     D64 : (MACRO)             	Ccall _printf
    1035/     D67 :                     L125:
    1036/     D67 :                     ;	while(1);
    1037/     D67 :                     L126:
    1038/     D67 : C0 0D 67            	lbr L125
    1039/     D6A :                     ;}
    1040/     D6A :                     L123:
    1041/     D6A : (MACRO)             	release 4
    1042/     D6E : (MACRO)             	Cretn
    1043/     D6F :                     
    1044/     D6F :                     ;;function_end$$ _exit
    1045/     D6F :                     ;;function_start _memcmp int function(pointer to const void,pointer to const void,unsigned int)
    1046/     D6F :                     _memcmp:		
    1047/     D6F : (MACRO)             	pushr R0
    1048/     D73 : (MACRO)             	pushr R1
    1049/     D77 : (MACRO)             	pushr R6
    1050/     D7B : (MACRO)             	pushr R7
    1051/     D7F : (MACRO)             	ld2 R7,'O',sp,(14+1) 
    1052/     D8B :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1053/     D8B :                     ;    int v = 0;
    1054/     D8B : (MACRO)             	ld2z R6
    1055/     D8F :                     ;    p1 = (unsigned char *)Ptr1;
    1056/     D8F : (MACRO)             	cpy2 R1,R12 
    1057/     D93 :                     ;    p2 = (unsigned char *)Ptr2;
    1058/     D93 : (MACRO)             	cpy2 R0,R13 
    1059/     D97 : C0 0D B8            	lbr L130
    1060/     D9A :                     L129:
    1061/     D9A :                     ;    while(Count-- > 0 && v == 0) {
    1062/     D9A :                     ;        v = *(p1++) - *(p2++);
    1063/     D9A : (MACRO)             	cpy2 R11,R1 
    1064/     D9E : (MACRO)             	incm R1,1
    1065/     D9F : (MACRO)             	cpy2 R10,R0 
    1066/     DA3 : (MACRO)             	incm R0,1
    1067/     DA4 : (MACRO)             	ldn1 R11,R11	
    1068/     DA6 : (MACRO)             	zExt R11 
    1069/     DA9 : (MACRO)             	ldn1 R10,R10	
    1070/     DAB : (MACRO)             	zExt R10 
    1071/     DAE : (MACRO)             	alu2 R6,R11,R10,sm,smb
    1072/     DB8 :                     ;D*E*A*D  R11
    1073/     DB8 :                     ;D*E*A*D  R10
    1074/     DB8 :                     ;    }
    1075/     DB8 :                     L130:
    1076/     DB8 :                     ;    while(Count-- > 0 && v == 0) {
    1077/     DB8 : (MACRO)             	cpy2 R11,R7 
    1078/     DBC :                     ;D*E*A*D  R7
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 19 - 10/29/2020 11:41:47


    1079/     DBC : (MACRO)             	cpy2 R7,R11	
    1080/     DC0 : (MACRO)             	decm R7,1	
    1081/     DC1 : (MACRO)             	jzU2 R11,L132
    1082/     DC9 :                     ;D*E*A*D  R11
    1083/     DC9 : (MACRO)             	jzU2 R6,L129
    1084/     DD1 :                     L132:
    1085/     DD1 :                     ;    return v;
    1086/     DD1 : (MACRO)             	cpy2 R15,R6 
    1087/     DD5 :                     ;D*E*A*D  R6
    1088/     DD5 :                     L128:
    1089/     DD5 : (MACRO)             	popr R7
    1090/     DDA : (MACRO)             	popr R6
    1091/     DDF : (MACRO)             	popr R1
    1092/     DE4 : (MACRO)             	popr R0
    1093/     DE9 : (MACRO)             	Cretn
    1094/     DEA :                     
    1095/     DEA :                     ;;function_end$$ _memcmp
    1096/     DEA :                     ;;function_start _memcpy pointer to void function(pointer to void,pointer to const void,unsigned int)
    1097/     DEA :                     _memcpy:		
    1098/     DEA : (MACRO)             	pushr R1
    1099/     DEE : (MACRO)             	pushr R6
    1100/     DF2 : (MACRO)             	pushr R7
    1101/     DF6 : (MACRO)             	ld2 R7,'O',sp,(12+1) 
    1102/     E02 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1103/     E02 :                     ;        char* dst8 = (char*)dest;
    1104/     E02 : (MACRO)             	cpy2 R6,R12 
    1105/     E06 :                     ;        char* src8 = (char*)src;
    1106/     E06 : (MACRO)             	cpy2 R1,R13 
    1107/     E0A : C0 0E 19            	lbr L135
    1108/     E0D :                     L134:
    1109/     E0D :                     ;        while (count--) {
    1110/     E0D :                     ;            *dst8++ = *src8++;
    1111/     E0D : (MACRO)             	cpy2 R11,R6 
    1112/     E11 : (MACRO)             	incm R6,1
    1113/     E12 : (MACRO)             	cpy2 R10,R1 
    1114/     E16 : (MACRO)             	incm R1,1
    1115/     E17 : 0A                  	ldn R10
    1116/     E18 : 5B                  	str R11
    1117/     E19 :                     ;D*E*A*D  R11
    1118/     E19 :                     ;        }
    1119/     E19 :                     L135:
    1120/     E19 :                     ;        while (count--) {
    1121/     E19 : (MACRO)             	cpy2 R11,R7 
    1122/     E1D :                     ;D*E*A*D  R7
    1123/     E1D : (MACRO)             	cpy2 R7,R11	
    1124/     E21 : (MACRO)             	decm R7,1	
    1125/     E22 : (MACRO)             	jnzU2 R11,L134
    1126/     E2A :                     ;D*E*A*D  R11
    1127/     E2A :                     ;        return dest;
    1128/     E2A : (MACRO)             	cpy2 R15,R12 
    1129/     E2E :                     L133:
    1130/     E2E : (MACRO)             	popr R7
    1131/     E33 : (MACRO)             	popr R6
    1132/     E38 : (MACRO)             	popr R1
    1133/     E3D : (MACRO)             	Cretn
    1134/     E3E :                     
    1135/     E3E :                     ;;function_end$$ _memcpy
    1136/     E3E :                     ;;function_start _memset pointer to void function(pointer to void,int,unsigned int)
    1137/     E3E :                     _memset:		
    1138/     E3E : (MACRO)             	pushr R6
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 20 - 10/29/2020 11:41:47


    1139/     E42 : (MACRO)             	pushr R7
    1140/     E46 : (MACRO)             	ld2 R7,'O',sp,(10+1) 
    1141/     E52 :                     ;{
    1142/     E52 :                     ;    unsigned char* p=s;
    1143/     E52 : (MACRO)             	cpy2 R6,R12 
    1144/     E56 : C0 0E 5D            	lbr L139
    1145/     E59 :                     L138:
    1146/     E59 :                     ;    while(n){
    1147/     E59 :                     ;        *p = (unsigned char)c;
    1148/     E59 : (MACRO)             	str1 R13,R6
    1149/     E5B :                     ;        p++;
    1150/     E5B : (MACRO)             	incm R6,1
    1151/     E5C :                     ;        n--;
    1152/     E5C : (MACRO)             	decm R7,1	
    1153/     E5D :                     ;	}
    1154/     E5D :                     L139:
    1155/     E5D :                     ;    while(n){
    1156/     E5D : (MACRO)             	jnzU2 R7,L138
    1157/     E65 :                     ;    return s;
    1158/     E65 : (MACRO)             	cpy2 R15,R12 
    1159/     E69 :                     L137:
    1160/     E69 : (MACRO)             	popr R7
    1161/     E6E : (MACRO)             	popr R6
    1162/     E73 : (MACRO)             	Cretn
    1163/     E74 :                     
    1164/     E74 :                     ;;function_end$$ _memset
    1165/     E74 :                     ;;function_start _nstdlibincluder void function(void)
    1166/     E74 :                     _nstdlibincluder:		
    1167/     E74 :                     ;void nstdlibincluder(){
    1168/     E74 :                     ;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
    1169/     E74 :                     	include nstdlib.inc
(1)    1/     E74 :                     ;nstdlib.inc includes assembly versions of nstdlib routines strcpy, strcmp
(1)    2/     E74 :                     ;Oct 1 first test seems ok
(1)    3/     E74 :                     ;20-08-01 moved in dubdabx
(1)    4/     E74 : =>UNDEFINED          IFNDEF _DUBDABX		;avoid double define
(1)    5/     E74 : =>UNDEFINED           IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)    6/     E74 :                        align 256			;wjr 20-05-23
(1)    7/     F00 :                     _dubdabx:	
(1)    8/     F00 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)    9/     F00 :                     ;thanks to Charles Richmond for the suggestion and code
(1)   10/     F00 :                     ;long interger is passed in rp1p2
(1)   11/     F00 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)   12/     F00 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)   13/     F00 :                     ;r8-11 are used as temps
(1)   14/     F00 :                     ;r8 is the working pointer
(1)   15/     F00 :                     ;r15.0 is bit count(32) and the return value register
(1)   16/     F00 :                     ;r9.0 is digit count
(1)   17/     F00 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)   18/     F00 : (MACRO)             	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)   19/     F0C : (MACRO)             	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)   20/     F18 : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)   21/     F1C : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)   22/     F1E : A9                  	plo r9
(1)   23/     F1F :                     $$clrlp:	;clear the passed buffer
(1)   24/     F1F : F8 00               	ldi 0	
(1)   25/     F21 : 58                  	str r8	;clear a byte
(1)   26/     F22 : 18                  	inc r8
(1)   27/     F23 : 29                  	dec r9
(1)   28/     F24 : 89                  	glo r9	;check the count
(1)   29/     F25 : 3A 1F               	bnz $$clrlp ;back for more
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(nstdlib.inc) - Page 21 - 10/29/2020 11:41:47


(1)   30/     F27 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)   31/     F2B :                     
(1)   32/     F2B : F8 20               	ldi 32	;bit count
(1)   33/     F2D : AF                  	plo r15
(1)   34/     F2E :                     ;now i'm going to spin off any leading 0's in the binary number
(1)   35/     F2E :                     $$cktop:
(1)   36/     F2E : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)   37/     F2F : FE                  	shl		;check for a 1
(1)   38/     F30 : 33 43               	bdf $$bitloop	;move on if we have one
(1)   39/     F32 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)   40/     F3E : 2F                  	dec r15		;reduce the number of times to shift
(1)   41/     F3F : 8F                  	glo r15
(1)   42/     F40 : 3A 2E               	bnz $$cktop	;
(1)   43/     F42 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)   44/     F43 :                     $$bitloop:
(1)   45/     F43 : F8 0A               	ldi 10	;digit count
(1)   46/     F45 : A9                  	plo r9
(1)   47/     F46 :                     $$dcklp:
(1)   48/     F46 : 08                  	ldn r8 	;pick up a digit
(1)   49/     F47 : FF 05               	smi 5	;see if it's greater than 4
(1)   50/     F49 : 3B 4E               	bnf $$dnoadd ;if not, bypass add
(1)   51/     F4B : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)   52/     F4D : 58                  	str r8	;put it back
(1)   53/     F4E :                     $$dnoadd:
(1)   54/     F4E : 18                  	inc r8
(1)   55/     F4F : 29                  	dec r9	;decrement digit count
(1)   56/     F50 : 89                  	glo r9
(1)   57/     F51 : 3A 46               	bnz $$dcklp ;and back for next digit
(1)   58/     F53 :                     	
(1)   59/     F53 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)   60/     F5F :                     	
(1)   61/     F5F : F8 0A               	ldi 10	;load the digit count again
(1)   62/     F61 : A9                  	plo r9
(1)   63/     F62 :                     ;r8 is now just past the units location and ready to walk back
(1)   64/     F62 :                     $$dshlp:
(1)   65/     F62 : 28                  	dec r8	;walk back from 0's position
(1)   66/     F63 : 08                  	ldn r8	;get the digit back
(1)   67/     F64 : 7E                  	shlc	;continue the shift
(1)   68/     F65 : BF                  	phi r15 ;save it for the carry test
(1)   69/     F66 : FA 0F               	ani 0x0f ;clear the 10 bit
(1)   70/     F68 : 58                  	str r8	;put the digit back
(1)   71/     F69 : 9F                  	ghi r15	;now test for carry
(1)   72/     F6A : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)   73/     F6C : 29                  	dec r9	;decrement the digit count
(1)   74/     F6D : 89                  	glo r9
(1)   75/     F6E : 3A 62               	bnz $$dshlp ;back for more if needed
(1)   76/     F70 :                     	
(1)   77/     F70 : 2F                  	dec r15
(1)   78/     F71 : 8F                  	glo r15
(1)   79/     F72 : 3A 43               	bnz $$bitloop
(1)   80/     F74 :                     	
(1)   81/     F74 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)   82/     F78 : F8 0A               	ldi 10		;digit count again
(1)   83/     F7A : A9                  	plo r9
(1)   84/     F7B :                     $$upnxt:
(1)   85/     F7B : 08                  	ldn r8		;get digit
(1)   86/     F7C : F9 30               	ori 0x30	;make ascii
(1)   87/     F7E : 58                  	str r8		;put it back
(1)   88/     F7F : 18                  	inc r8		;next digit
(1)   89/     F80 : 29                  	dec r9		;counter
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(nstdlib.inc) - Page 22 - 10/29/2020 11:41:47


(1)   90/     F81 : 89                  	glo r9
(1)   91/     F82 : 3A 7B               	bnz $$upnxt	;upgrade all 10 spots
(1)   92/     F84 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)   93/     F8C : EE                  	sex memaddr	;set up
(1)   94/     F8D : F8 0A               	ldi 10		;max number of 0's to skip
(1)   95/     F8F : F7                  	sm		;desired number of digits to skip
(1)   96/     F90 : E2                  	sex sp		;reset index register
(1)   97/     F91 : A9                  	plo r9		;number of leading 0's to skip
(1)   98/     F92 :                     $$cknext:
(1)   99/     F92 : 0F                  	ldn r15		;check digit
(1)  100/     F93 : FF 30               	smi 0x30	;for '0'
(1)  101/     F95 : 3A 9C               	bnz $$done
(1)  102/     F97 : 1F                  	inc r15		;next digit
(1)  103/     F98 : 29                  	dec r9		;reduce count
(1)  104/     F99 : 89                  	glo r9
(1)  105/     F9A : 3A 92               	bnz $$cknext
(1)  106/     F9C :                     $$done:
(1)  107/     F9C : (MACRO)             	cretn
(1)  108/     F9D : [5]                   ENDIF	
(1)  109/     F9D : [4]                  ENDIF
(1)  110/     F9D :                     
(1)  111/     F9D :                     ;char * strcpy(char * to, const char *from)
(1)  112/     F9D :                     	align 64
(1)  113/     FC0 :                     _strcpy:
(1)  114/     FC0 :                     ;char *save = to; (to is R12, from is R13)
(1)  115/     FC0 : 8C                  	glo R12	
(1)  116/     FC1 : AF                  	plo R15
(1)  117/     FC2 : 9C                  	ghi R12
(1)  118/     FC3 : BF                  	phi R15
(1)  119/     FC4 :                     ;for (; (*to = *from) != 0; ++from, ++to);
(1)  120/     FC4 : 4D                  __strcpy: lda R13
(1)  121/     FC5 : 5C                  	str R12
(1)  122/     FC6 : 1C                  	inc R12
(1)  123/     FC7 : 3A C4               	bnz __strcpy
(1)  124/     FC9 :                     ;return(save);
(1)  125/     FC9 : (MACRO)             	cretn
(1)  126/     FCA :                     ;}
(1)  127/     FCA :                     
(1)  128/     FCA :                     
(1)  129/     FCA :                     ;int strcmp(const char *s1, const char *s2){  s1 will be R12, s2 R13
(1)  130/     FCA :                     _strcmp:	;entry point from C program
(1)  131/     FCA :                     ;  int ret = 0;
(1)  132/     FCA : (MACRO)             	ld2z	R15	;ret is R15
(1)  133/     FCE :                     ;  while (!(ret = *(unsigned char *) s1 - *(unsigned char *) s2) && *s2) ++s1, ++s2;
(1)  134/     FCE : 22                  	dec	sp	;make a work area
(1)  135/     FCF :                     __strcmplp:
(1)  136/     FCF : 4D                  	lda	R13	;get string 2 character
(1)  137/     FD0 : 52                  	str	sp	;prep for compare
(1)  138/     FD1 : 4C                  	lda	R12	;get string 1 character
(1)  139/     FD2 : F7                  	sm		;subtract string 2 char from string 1
(1)  140/     FD3 : 3A DA               	bnz	__strcmpne ;strings not equal quit
(1)  141/     FD5 :                     	
(1)  142/     FD5 : 02                  	ldn	sp	;check string 2 character
(1)  143/     FD6 : 3A CF               	bnz	__strcmplp ;back for more if not done
(1)  144/     FD8 : 12                  	inc	sp	;release the work area
(1)  145/     FD9 : (MACRO)             	cretn		;back to caler with 0 in R15
(1)  146/     FDA :                     	
(1)  147/     FDA :                     __strcmpne:	;here I know they're not equal
(1)  148/     FDA : 12                  	inc	sp		;release the work area
(1)  149/     FDB : 33 DF               	bdf	__strcmpgt	;string1>string2
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(nstdlib.inc) - Page 23 - 10/29/2020 11:41:47


(1)  150/     FDD : 2F                  	dec	R15		;string 1<string 2, return -1
(1)  151/     FDE : (MACRO)             	cretn
(1)  152/     FDF :                     __strcmpgt:
(1)  153/     FDF : 1F                  	inc	R15		;string1>string2, return 1
(1)  154/     FE0 : (MACRO)             	cretn
(1)  155/     FE1 :                     
    1170/     FE1 :                     ;}
    1171/     FE1 :                     L141:
    1172/     FE1 : (MACRO)             	Cretn
    1173/     FE2 :                     
    1174/     FE2 :                     ;;function_end$$ _nstdlibincluder
    1175/     FE2 : (MACRO)             	orgd
    1176/     FE2 :                     _x:
    1177/     FE2 : (MACRO)             	globss 16
    1178/     FF2 :                     _rows:
    1179/     FF2 : (MACRO)             	globss 16
    1180/    1002 :                     _down:
    1181/    1002 : (MACRO)             	globss 30
    1182/    1020 :                     _up:
    1183/    1020 : (MACRO)             	globss 30
    1184/    103E : (MACRO)             	orgc
    1185/    103E :                     L124:
    1186/    103E : 65                  	db 101
    1187/    103F : 78                  	db 120
    1188/    1040 : 69                  	db 105
    1189/    1041 : 74                  	db 116
    1190/    1042 : 20                  	db 32
    1191/    1043 : 25                  	db 37
    1192/    1044 : 64                  	db 100
    1193/    1045 : 0A                  	db 10
    1194/    1046 : 00                  	db 0
    1195/    1047 :                     	align 4
    1196/    1048 :                     L59:
    1197/    1048 : BF 80 00 00         	dd 0xbf800000
    1198/    104C :                     	align 4
    1199/    104C :                     L58:
    1200/    104C : 00 00 00 00         	dd 0x0
    1201/    1050 :                     L33:
    1202/    1050 : 0A                  	db 10
    1203/    1051 : 00                  	db 0
    1204/    1052 :                     L32:
    1205/    1052 : 25                  	db 37
    1206/    1053 : 63                  	db 99
    1207/    1054 : 00                  	db 0
    1208/    1055 :                     L14:
    1209/    1055 : 54                  	db 84
    1210/    1056 : 6F                  	db 111
    1211/    1057 : 6F                  	db 111
    1212/    1058 : 6B                  	db 107
    1213/    1059 : 20                  	db 32
    1214/    105A : 61                  	db 97
    1215/    105B : 62                  	db 98
    1216/    105C : 6F                  	db 111
    1217/    105D : 75                  	db 117
    1218/    105E : 74                  	db 116
    1219/    105F : 20                  	db 32
    1220/    1060 : 36                  	db 54
    1221/    1061 : 20                  	db 32
    1222/    1062 : 73                  	db 115
    1223/    1063 : 65                  	db 101
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 24 - 10/29/2020 11:41:47


    1224/    1064 : 63                  	db 99
    1225/    1065 : 20                  	db 32
    1226/    1066 : 6F                  	db 111
    1227/    1067 : 6E                  	db 110
    1228/    1068 : 20                  	db 32
    1229/    1069 : 34                  	db 52
    1230/    106A : 6D                  	db 109
    1231/    106B : 68                  	db 104
    1232/    106C : 7A                  	db 122
    1233/    106D : 20                  	db 32
    1234/    106E : 4D                  	db 77
    1235/    106F : 43                  	db 67
    1236/    1070 : 20                  	db 32
    1237/    1071 : 77                  	db 119
    1238/    1072 : 69                  	db 105
    1239/    1073 : 74                  	db 116
    1240/    1074 : 68                  	db 104
    1241/    1075 : 20                  	db 32
    1242/    1076 : 4D                  	db 77
    1243/    1077 : 6F                  	db 111
    1244/    1078 : 74                  	db 116
    1245/    1079 : 68                  	db 104
    1246/    107A : 65                  	db 101
    1247/    107B : 72                  	db 114
    1248/    107C : 27                  	db 39
    1249/    107D : 73                  	db 115
    1250/    107E : 20                  	db 32
    1251/    107F : 44                  	db 68
    1252/    1080 : 61                  	db 97
    1253/    1081 : 79                  	db 121
    1254/    1082 : 20                  	db 32
    1255/    1083 : 63                  	db 99
    1256/    1084 : 6F                  	db 111
    1257/    1085 : 6D                  	db 109
    1258/    1086 : 70                  	db 112
    1259/    1087 : 69                  	db 105
    1260/    1088 : 6C                  	db 108
    1261/    1089 : 65                  	db 101
    1262/    108A : 72                  	db 114
    1263/    108B : 28                  	db 40
    1264/    108C : 66                  	db 102
    1265/    108D : 72                  	db 114
    1266/    108E : 6F                  	db 111
    1267/    108F : 6D                  	db 109
    1268/    1090 : 20                  	db 32
    1269/    1091 : 72                  	db 114
    1270/    1092 : 75                  	db 117
    1271/    1093 : 6E                  	db 110
    1272/    1094 : 31                  	db 49
    1273/    1095 : 38                  	db 56
    1274/    1096 : 30                  	db 48
    1275/    1097 : 32                  	db 50
    1276/    1098 : 20                  	db 32
    1277/    1099 : 74                  	db 116
    1278/    109A : 6F                  	db 111
    1279/    109B : 20                  	db 32
    1280/    109C : 39                  	db 57
    1281/    109D : 32                  	db 50
    1282/    109E : 6E                  	db 110
    1283/    109F : 64                  	db 100
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 25 - 10/29/2020 11:41:47


    1284/    10A0 : 20                  	db 32
    1285/    10A1 : 73                  	db 115
    1286/    10A2 : 6F                  	db 111
    1287/    10A3 : 6C                  	db 108
    1288/    10A4 : 75                  	db 117
    1289/    10A5 : 74                  	db 116
    1290/    10A6 : 69                  	db 105
    1291/    10A7 : 6F                  	db 111
    1292/    10A8 : 6E                  	db 110
    1293/    10A9 : 29                  	db 41
    1294/    10AA : 0A                  	db 10
    1295/    10AB : 00                  	db 0
    1296/    10AC :                     L13:
    1297/    10AC : 54                  	db 84
    1298/    10AD : 6F                  	db 111
    1299/    10AE : 6F                  	db 111
    1300/    10AF : 6B                  	db 107
    1301/    10B0 : 20                  	db 32
    1302/    10B1 : 61                  	db 97
    1303/    10B2 : 62                  	db 98
    1304/    10B3 : 6F                  	db 111
    1305/    10B4 : 75                  	db 117
    1306/    10B5 : 74                  	db 116
    1307/    10B6 : 20                  	db 32
    1308/    10B7 : 31                  	db 49
    1309/    10B8 : 37                  	db 55
    1310/    10B9 : 20                  	db 32
    1311/    10BA : 73                  	db 115
    1312/    10BB : 65                  	db 101
    1313/    10BC : 63                  	db 99
    1314/    10BD : 20                  	db 32
    1315/    10BE : 6F                  	db 111
    1316/    10BF : 6E                  	db 110
    1317/    10C0 : 20                  	db 32
    1318/    10C1 : 31                  	db 49
    1319/    10C2 : 2E                  	db 46
    1320/    10C3 : 36                  	db 54
    1321/    10C4 : 6D                  	db 109
    1322/    10C5 : 68                  	db 104
    1323/    10C6 : 7A                  	db 122
    1324/    10C7 : 20                  	db 32
    1325/    10C8 : 65                  	db 101
    1326/    10C9 : 6C                  	db 108
    1327/    10CA : 66                  	db 102
    1328/    10CB : 20                  	db 32
    1329/    10CC : 77                  	db 119
    1330/    10CD : 69                  	db 105
    1331/    10CE : 74                  	db 116
    1332/    10CF : 68                  	db 104
    1333/    10D0 : 20                  	db 32
    1334/    10D1 : 53                  	db 83
    1335/    10D2 : 74                  	db 116
    1336/    10D3 : 20                  	db 32
    1337/    10D4 : 4A                  	db 74
    1338/    10D5 : 75                  	db 117
    1339/    10D6 : 64                  	db 100
    1340/    10D7 : 79                  	db 121
    1341/    10D8 : 27                  	db 39
    1342/    10D9 : 73                  	db 115
    1343/    10DA : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 26 - 10/29/2020 11:41:47


    1344/    10DB : 63                  	db 99
    1345/    10DC : 6F                  	db 111
    1346/    10DD : 6D                  	db 109
    1347/    10DE : 70                  	db 112
    1348/    10DF : 69                  	db 105
    1349/    10E0 : 6C                  	db 108
    1350/    10E1 : 65                  	db 101
    1351/    10E2 : 72                  	db 114
    1352/    10E3 : 28                  	db 40
    1353/    10E4 : 66                  	db 102
    1354/    10E5 : 72                  	db 114
    1355/    10E6 : 6F                  	db 111
    1356/    10E7 : 6D                  	db 109
    1357/    10E8 : 20                  	db 32
    1358/    10E9 : 72                  	db 114
    1359/    10EA : 75                  	db 117
    1360/    10EB : 6E                  	db 110
    1361/    10EC : 31                  	db 49
    1362/    10ED : 38                  	db 56
    1363/    10EE : 30                  	db 48
    1364/    10EF : 32                  	db 50
    1365/    10F0 : 20                  	db 32
    1366/    10F1 : 74                  	db 116
    1367/    10F2 : 6F                  	db 111
    1368/    10F3 : 20                  	db 32
    1369/    10F4 : 39                  	db 57
    1370/    10F5 : 32                  	db 50
    1371/    10F6 : 6E                  	db 110
    1372/    10F7 : 64                  	db 100
    1373/    10F8 : 20                  	db 32
    1374/    10F9 : 73                  	db 115
    1375/    10FA : 6F                  	db 111
    1376/    10FB : 6C                  	db 108
    1377/    10FC : 75                  	db 117
    1378/    10FD : 74                  	db 116
    1379/    10FE : 69                  	db 105
    1380/    10FF : 6F                  	db 111
    1381/    1100 : 6E                  	db 110
    1382/    1101 : 29                  	db 41
    1383/    1102 : 0A                  	db 10
    1384/    1103 : 00                  	db 0
    1385/    1104 :                     L12:
    1386/    1104 : 54                  	db 84
    1387/    1105 : 6F                  	db 111
    1388/    1106 : 6F                  	db 111
    1389/    1107 : 6B                  	db 107
    1390/    1108 : 20                  	db 32
    1391/    1109 : 61                  	db 97
    1392/    110A : 62                  	db 98
    1393/    110B : 6F                  	db 111
    1394/    110C : 75                  	db 117
    1395/    110D : 74                  	db 116
    1396/    110E : 20                  	db 32
    1397/    110F : 32                  	db 50
    1398/    1110 : 32                  	db 50
    1399/    1111 : 20                  	db 32
    1400/    1112 : 73                  	db 115
    1401/    1113 : 65                  	db 101
    1402/    1114 : 63                  	db 99
    1403/    1115 : 20                  	db 32
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 27 - 10/29/2020 11:41:47


    1404/    1116 : 6F                  	db 111
    1405/    1117 : 6E                  	db 110
    1406/    1118 : 20                  	db 32
    1407/    1119 : 31                  	db 49
    1408/    111A : 2E                  	db 46
    1409/    111B : 36                  	db 54
    1410/    111C : 6D                  	db 109
    1411/    111D : 68                  	db 104
    1412/    111E : 7A                  	db 122
    1413/    111F : 20                  	db 32
    1414/    1120 : 65                  	db 101
    1415/    1121 : 6C                  	db 108
    1416/    1122 : 66                  	db 102
    1417/    1123 : 20                  	db 32
    1418/    1124 : 77                  	db 119
    1419/    1125 : 69                  	db 105
    1420/    1126 : 74                  	db 116
    1421/    1127 : 68                  	db 104
    1422/    1128 : 20                  	db 32
    1423/    1129 : 42                  	db 66
    1424/    112A : 69                  	db 105
    1425/    112B : 72                  	db 114
    1426/    112C : 74                  	db 116
    1427/    112D : 68                  	db 104
    1428/    112E : 64                  	db 100
    1429/    112F : 61                  	db 97
    1430/    1130 : 79                  	db 121
    1431/    1131 : 20                  	db 32
    1432/    1132 : 63                  	db 99
    1433/    1133 : 6F                  	db 111
    1434/    1134 : 6D                  	db 109
    1435/    1135 : 70                  	db 112
    1436/    1136 : 69                  	db 105
    1437/    1137 : 6C                  	db 108
    1438/    1138 : 65                  	db 101
    1439/    1139 : 72                  	db 114
    1440/    113A : 0A                  	db 10
    1441/    113B : 00                  	db 0
    1442/    113C :                     L11:
    1443/    113C : 2E                  	db 46
    1444/    113D : 2E                  	db 46
    1445/    113E : 2E                  	db 46
    1446/    113F : 61                  	db 97
    1447/    1140 : 6E                  	db 110
    1448/    1141 : 64                  	db 100
    1449/    1142 : 2E                  	db 46
    1450/    1143 : 2E                  	db 46
    1451/    1144 : 2E                  	db 46
    1452/    1145 : 0A                  	db 10
    1453/    1146 : 38                  	db 56
    1454/    1147 : 34                  	db 52
    1455/    1148 : 31                  	db 49
    1456/    1149 : 33                  	db 51
    1457/    114A : 36                  	db 54
    1458/    114B : 32                  	db 50
    1459/    114C : 37                  	db 55
    1460/    114D : 35                  	db 53
    1461/    114E : 20                  	db 32
    1462/    114F : 69                  	db 105
    1463/    1150 : 73                  	db 115
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 28 - 10/29/2020 11:41:47


    1464/    1151 : 20                  	db 32
    1465/    1152 : 6C                  	db 108
    1466/    1153 : 61                  	db 97
    1467/    1154 : 73                  	db 115
    1468/    1155 : 74                  	db 116
    1469/    1156 : 0A                  	db 10
    1470/    1157 : 54                  	db 84
    1471/    1158 : 6F                  	db 111
    1472/    1159 : 6F                  	db 111
    1473/    115A : 6B                  	db 107
    1474/    115B : 20                  	db 32
    1475/    115C : 61                  	db 97
    1476/    115D : 62                  	db 98
    1477/    115E : 6F                  	db 111
    1478/    115F : 75                  	db 117
    1479/    1160 : 74                  	db 116
    1480/    1161 : 20                  	db 32
    1481/    1162 : 32                  	db 50
    1482/    1163 : 35                  	db 53
    1483/    1164 : 20                  	db 32
    1484/    1165 : 73                  	db 115
    1485/    1166 : 65                  	db 101
    1486/    1167 : 63                  	db 99
    1487/    1168 : 20                  	db 32
    1488/    1169 : 6F                  	db 111
    1489/    116A : 6E                  	db 110
    1490/    116B : 20                  	db 32
    1491/    116C : 31                  	db 49
    1492/    116D : 2E                  	db 46
    1493/    116E : 36                  	db 54
    1494/    116F : 6D                  	db 109
    1495/    1170 : 68                  	db 104
    1496/    1171 : 7A                  	db 122
    1497/    1172 : 20                  	db 32
    1498/    1173 : 65                  	db 101
    1499/    1174 : 6C                  	db 108
    1500/    1175 : 66                  	db 102
    1501/    1176 : 20                  	db 32
    1502/    1177 : 77                  	db 119
    1503/    1178 : 69                  	db 105
    1504/    1179 : 74                  	db 116
    1505/    117A : 68                  	db 104
    1506/    117B : 20                  	db 32
    1507/    117C : 43                  	db 67
    1508/    117D : 68                  	db 104
    1509/    117E : 72                  	db 114
    1510/    117F : 69                  	db 105
    1511/    1180 : 73                  	db 115
    1512/    1181 : 74                  	db 116
    1513/    1182 : 6D                  	db 109
    1514/    1183 : 61                  	db 97
    1515/    1184 : 73                  	db 115
    1516/    1185 : 20                  	db 32
    1517/    1186 : 63                  	db 99
    1518/    1187 : 6F                  	db 111
    1519/    1188 : 6D                  	db 109
    1520/    1189 : 70                  	db 112
    1521/    118A : 69                  	db 105
    1522/    118B : 6C                  	db 108
    1523/    118C : 65                  	db 101
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 29 - 10/29/2020 11:41:47


    1524/    118D : 72                  	db 114
    1525/    118E : 0A                  	db 10
    1526/    118F : 00                  	db 0
    1527/    1190 :                     L2:
    1528/    1190 : 67                  	db 103
    1529/    1191 : 65                  	db 101
    1530/    1192 : 6E                  	db 110
    1531/    1193 : 65                  	db 101
    1532/    1194 : 72                  	db 114
    1533/    1195 : 61                  	db 97
    1534/    1196 : 74                  	db 116
    1535/    1197 : 65                  	db 101
    1536/    1198 : 73                  	db 115
    1537/    1199 : 20                  	db 32
    1538/    119A : 39                  	db 57
    1539/    119B : 32                  	db 50
    1540/    119C : 20                  	db 32
    1541/    119D : 73                  	db 115
    1542/    119E : 6F                  	db 111
    1543/    119F : 6C                  	db 108
    1544/    11A0 : 75                  	db 117
    1545/    11A1 : 74                  	db 116
    1546/    11A2 : 69                  	db 105
    1547/    11A3 : 6F                  	db 111
    1548/    11A4 : 6E                  	db 110
    1549/    11A5 : 73                  	db 115
    1550/    11A6 : 2E                  	db 46
    1551/    11A7 : 20                  	db 32
    1552/    11A8 : 0A                  	db 10
    1553/    11A9 : 31                  	db 49
    1554/    11AA : 35                  	db 53
    1555/    11AB : 38                  	db 56
    1556/    11AC : 36                  	db 54
    1557/    11AD : 33                  	db 51
    1558/    11AE : 37                  	db 55
    1559/    11AF : 32                  	db 50
    1560/    11B0 : 34                  	db 52
    1561/    11B1 : 20                  	db 32
    1562/    11B2 : 69                  	db 105
    1563/    11B3 : 73                  	db 115
    1564/    11B4 : 20                  	db 32
    1565/    11B5 : 66                  	db 102
    1566/    11B6 : 69                  	db 105
    1567/    11B7 : 72                  	db 114
    1568/    11B8 : 73                  	db 115
    1569/    11B9 : 74                  	db 116
    1570/    11BA : 0A                  	db 10
    1571/    11BB : 0A                  	db 10
    1572/    11BC : 00                  	db 0
    1573/    11BD :                     	include lcc1802epiloCX.inc
(1)    1/    11BD :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    11BD :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    11BD :                     ;this is the version published with the lcc1802121229 release
(1)    4/    11BD :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    11BD :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    11BD :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    11BD :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    11BD :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    11BD :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    11BD :                     ;Feb 12 fixed bugs in modi2/u2
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 30 - 10/29/2020 11:41:47


(1)   11/    11BD :                     ;feb 27 changed stack to start at 7fff
(1)   12/    11BD :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    11BD :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    11BD :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    11BD :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/    11BD :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/    11BD :                     ;16-09-20 allow stack relocation 
(1)   18/    11BD :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/    11BD :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/    11BD :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/    11BD :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/    11BD :                     ;17-04-09 don't include call/return for 1806
(1)   23/    11BD :                     ;17-10-17 SCRT routines changed to clean stack model i.e. push is stxd stxd, pop is inc lda inc ldn
(1)   24/    11BD :                     ;17-10-19 using CPUSPEED instead of LCC1802CPUSPEED, also STACKLOC instead of LCCSTACKLOC
(1)   25/    11BD :                     ;17-10-23 extending work area protection from 10-13 above for 1802 as well as 1805
(1)   26/    11BD : =0EH                rwork:	equ	memAddr	;work register
(1)   27/    11BD :                     ;17-11-25 conditional include for register saves
(1)   28/    11BD :                     ;18-01-28 changed onems() to always use 4 instruction loop, accommodate slower CPU speed
(1)   29/    11BD :                     ;20-04-28 specific version for COMX-35/Crosslib
(1)   30/    11BD :                     ;20-04-29 saving registers for COMX basic
(1)   31/    11BD :                     ;20-04-30 changing init for COMX - saving R4&5, using my own SCRT routines.
(1)   32/    11BD :                     ;20-05-01 saving D around Call/return
(1)   33/    11BD :                     ;20-05-18 added sex r2 in SCRT return routine
(1)   34/    11BD :                     ;20-05-23 align for dubdabx - really should move to nstdlib.inc
(1)   35/    11BD :                     ;20-06-19 changed lbr die to br on return from main
(1)   36/    11BD :                     ;20-07-10 (Marcel) added orgc at start to solve issue with branches to data area (suggested by Bill)
(1)   37/    11BD :                     ;20-08-01 dubdabx moved to nstdlib.inc
(1)   38/    11BD : (MACRO)              orgc
(1)   39/    11BD :                     ;;function_start lcc1802init.inc void function(void)
(1)   40/    11BD :                     lcc1802init:
(1)   41/    11BD : =>UNDEFINED           IFDEF SAVEREGS
(1)   42/    11BD :                         include "saveregs.inc"
(1)   43/    11BD : [41]                  ENDIF
(1)   44/    11BD : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX - don't set stack or PC, return to BASIC at end
(1)   45/    11BD :                       	pushr 4
(1)   46/    11BD :                       	pushr 5
(1)   47/    11BD :                       	pushr 7			;wjr 20-04-29 save/restore BASIC registers
(1)   48/    11BD :                       	pushr 9	
(1)   49/    11BD :                       	pushr 11
(1)   50/    11BD :                       	pushr 15
(1)   51/    11BD :                     	ldiReg	RCALL,_call
(1)   52/    11BD :                     	ldiReg	RRET,_return
(1)   53/    11BD :                       	Ccall _main		;wjr 20-04-28 start the C program
(1)   54/    11BD :                       	popr  15		;wjr 20-04-29 save/restore BASIC registers
(1)   55/    11BD :                       	popr  11
(1)   56/    11BD :                       	popr  9
(1)   57/    11BD :                       	popr  7
(1)   58/    11BD :                       	popr 5
(1)   59/    11BD :                       	popr 4
(1)   60/    11BD :                       	Cretn			;wjr 20-04-28 hopefully back to COMX Basic
(1)   61/    11BD : =>TRUE                ELSE
(1)   62/    11BD : =>TRUE                IF    MOMCPU<>$1805		;for 1806 use SCAL 
(1)   63/    11BD : (MACRO)             	ldiReg	RCALL,_call
(1)   64/    11C3 : (MACRO)             	ldiReg	RRET,_return
(1)   65/    11C9 : =>FALSE               ELSE
(1)   66/    11C9 :                     	ldiReg	RCALL,$$_die; _call
(1)   67/    11C9 :                     	ldiReg	RRET,$$_die; _return
(1)   68/    11C9 : [62]                  ENDIF
(1)   69/    11C9 : =>UNDEFINED         	  IFNDEF  STACKLOC		;wjr 16-09-20 allow stack relocation
(1)   70/    11C9 : (MACRO)             		ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 31 - 10/29/2020 11:41:47


(1)   71/    11CF : =>FALSE             	  ELSEIF				;wjr 16-09-20
(1)   72/    11CF :                     		ldiReg	SP,STACKLOC	;wjr 16-09-20 start stack as specified
(1)   73/    11CF : [69]                	  ENDIF				;wjr 16-09-20
(1)   74/    11CF : E2                  		sex	SP
(1)   75/    11D0 : (MACRO)             		ldiReg	RPC,$$_00000
(1)   76/    11D6 : D3                  		sep	RPC
(1)   77/    11D7 :                     	$$_00000:
(1)   78/    11D7 : (MACRO)             		Ccall _main	;call the main routine
(1)   79/    11DA : 30 DA               	$$_die:	br	$$_die		;loop here when main returns
(1)   80/    11DC : DE AD               		db	0xde,0xad
(1)   81/    11DE : [44]                  ENDIF
(1)   82/    11DE :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   83/    11DE :                     _setqOn:
(1)   84/    11DE : 7B                  	seq
(1)   85/    11DF : (MACRO)             	Cretn
(1)   86/    11E0 :                     _setqOff:
(1)   87/    11E0 : 7A                  	req
(1)   88/    11E1 : (MACRO)             	Cretn
(1)   89/    11E2 : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   90/    11E2 :                     _modU2:	;16 bit unsigned remainder
(1)   91/    11E2 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   92/    11E2 : (MACRO)                 Ccall _divU2
(1)   93/    11E5 : 8C                      glo regArg1
(1)   94/    11E6 : AF                      plo retVal
(1)   95/    11E7 : 9C                      ghi regArg1
(1)   96/    11E8 : BF                      phi retVal
(1)   97/    11E9 : (MACRO)                 Cretn
(1)   98/    11EA :                         
(1)   99/    11EA :                     _modI2:	;16 bit signed remainder
(1)  100/    11EA :                     	; just calls the 16 bit division then puts remainder into return value
(1)  101/    11EA : (MACRO)                 Ccall _divI2
(1)  102/    11ED : 8C                      glo regArg1
(1)  103/    11EE : AF                      plo retVal
(1)  104/    11EF : 9C                      ghi regArg1
(1)  105/    11F0 : BF                      phi retVal
(1)  106/    11F1 : (MACRO)                 Cretn
(1)  107/    11F2 : [89]                 ENDIF
(1)  108/    11F2 :                     _out4:	
(1)  109/    11F2 : 8C                  	glo	regArg1
(1)  110/    11F3 : 22                  	dec	sp
(1)  111/    11F4 : 52                  	str	sp
(1)  112/    11F5 : 64                  	out	4
(1)  113/    11F6 : (MACRO)             	Cretn
(1)  114/    11F7 :                     
(1)  115/    11F7 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)  116/    11F7 : =>TRUE                if MOMCPU<>$1805		;for 1806 use SCAL
(1)  117/    11F7 :                     	align 32
(1)  118/    1200 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)  119/    1200 : D3                  	sep     R3 ;go to subroutine
(1)  120/    1201 : E2                  _call:	sex	SP ;make sure X=SP
(1)  121/    1202 : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  122/    1202 :                     	phi	r15	;save D #wjr 20-05-01
(1)  123/    1202 : [121]                 ENDIF
(1)  124/    1202 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)  125/    1203 : 73                  	stxd
(1)  126/    1204 : 96                  	ghi	retAddr
(1)  127/    1205 : 73                  	stxd	
(1)  128/    1206 : 83                  	glo	RPC ;copy old PC to retAddr
(1)  129/    1207 : A6                  	plo	retAddr
(1)  130/    1208 : 93                  	ghi	RPC
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 32 - 10/29/2020 11:41:47


(1)  131/    1209 : B6                  	phi	retAddr
(1)  132/    120A : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)  133/    120B : B3                  	phi	RPC
(1)  134/    120C : 46                  	lda	retAddr
(1)  135/    120D : A3                  	plo	RPC
(1)  136/    120E : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  137/    120E :                     	ghi	r15	;save D #wjr 20-05-01
(1)  138/    120E : [136]                 ENDIF
(1)  139/    120E : 30 00               	br	_call-1
(1)  140/    1210 :                     
(1)  141/    1210 :                     ;Standard subroutine return 
(1)  142/    1210 : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  143/    1210 :                     	align 16
(1)  144/    1210 : [142]                 ENDIF
(1)  145/    1210 : D3                  	sep	RPC	;return to the original program
(1)  146/    1211 :                     _return: 
(1)  147/    1211 : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  148/    1211 :                     	phi	r15	;save D #wjr 20-05-01
(1)  149/    1211 :                             sex r2		;fix x register per marcel
(1)  150/    1211 : [147]                 ENDIF
(1)  151/    1211 : 86                  	glo	retAddr	;transfer the current return address to RPC
(1)  152/    1212 : A3                  	plo	RPC
(1)  153/    1213 : 96                  	ghi	retAddr
(1)  154/    1214 : B3                  	phi	RPC
(1)  155/    1215 : 12                  	inc 	SP
(1)  156/    1216 : 42                  	lda	SP	;pick up old return address
(1)  157/    1217 : B6                  	phi	retAddr
(1)  158/    1218 : 02                  	ldn	SP
(1)  159/    1219 : A6                  	plo	retAddr
(1)  160/    121A : =>UNDEFINED           IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  161/    121A :                     	ghi	r15	;save D #wjr 20-05-01
(1)  162/    121A : [160]                 ENDIF
(1)  163/    121A : 30 10               	br	_return-1
(1)  164/    121C : [116]                ENDIF
(1)  165/    121C :                     	align 8
(1)  166/    1220 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  167/    1220 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  168/    1220 :                     ;each loop is 2 instruction times
(1)  169/    1220 :                     ;so the number of loops needed is 
(1)  170/    1220 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  171/    1220 : =>UNDEFINED         	IFNDEF	CPUSPEED
(1)  172/    1220 : =186A00H            CPUSPEED EQU 1600000	;1.6MHZ default
(1)  173/    1220 : [171]               	ENDIF
(1)  174/    1220 : =>FALSE              if MOMCPU=$1805		;for 1806 SCAL
(1)  175/    1220 :                     SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  176/    1220 : =>TRUE               else
(1)  177/    1220 : =1BH                SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  178/    1220 : [174]                endif 
(1)  179/    1220 : =>TRUE                    IF (CPUSPEED/16000)>=(SUBOVHD+4);fast enough to need more than subroutine overhead
(1)  180/    1220 : F8 12               	ldi	(CPUSPEED/1000/16-SUBOVHD)/4
(1)  181/    1222 : FF 01               $$mslf:	smi	1
(1)  182/    1224 : E2                  	sex	2
(1)  183/    1225 : E2                  	sex	2
(1)  184/    1226 : 3A 22               	bnz	$$mslf
(1)  185/    1228 : [179]                 ENDIF
(1)  186/    1228 : (MACRO)             	Cretn
(1)  187/    1229 :                     
(1)  188/    1229 :                     
(1)  189/    1229 : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  190/    1229 :                     	align 256
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 33 - 10/29/2020 11:41:47


(1)  191/    1300 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  192/    1300 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  193/    1300 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  194/    1300 : (MACRO)             	ld2z retval
(1)  195/    1304 :                     $$mulrlp:
(1)  196/    1304 : (MACRO)             	shru2 regarg2
(1)  197/    130A : 3B 16               	bnf $$mulrnoadd
(1)  198/    130C :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  199/    130C : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  200/    1316 :                     $$mulrnoadd:
(1)  201/    1316 : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  202/    1317 : 3A 1C               	bnz $$mulrshft	;nope, continue
(1)  203/    1319 : 8D                  	glo regarg2	;check bottom byte
(1)  204/    131A : 32 24               	bz $$mulrdone
(1)  205/    131C :                     $$mulrshft:
(1)  206/    131C : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  207/    1322 : 30 04               	br $$mulrlp
(1)  208/    1324 :                     $$mulrdone:		;here the product is in retval
(1)  209/    1324 : (MACRO)             	cretn
(1)  210/    1325 :                     
(1)  211/    1325 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  212/    1325 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  213/    1325 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  214/    1325 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  215/    1325 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  216/    1325 :                     	;regarg1 to hold develop remainder, 
(1)  217/    1325 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  218/    1325 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  219/    1325 :                     				;result in D, rwork.hi, DF
(1)  220/    1325 :                     	glo reg2
(1)  221/    1325 :                     	str sp
(1)  222/    1325 :                     	glo reg1
(1)  223/    1325 :                     	sm
(1)  224/    1325 :                     	plo R11
(1)  225/    1325 :                     	ghi reg2
(1)  226/    1325 :                     	str sp
(1)  227/    1325 :                     	ghi reg1
(1)  228/    1325 :                     	smb
(1)  229/    1325 :                     	endm
(1)  230/    1325 :                     	
(1)  231/    1325 :                     ;	pushf R10	;save R10 & leave stack down 1
(1)  232/    1325 : (MACRO)             	pushr R10	;default push leaves stack clean
(1)  233/    1329 : 8B                  	glo R11		;and bottom
(1)  234/    132A : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  235/    132B : (MACRO)             	cpy2 R10,regarg1
(1)  236/    132F : (MACRO)             	ld2z retval	;quotient
(1)  237/    1333 : (MACRO)             	cpy2 rwork,regarg2
(1)  238/    1337 :                     	
(1)  239/    1337 : (MACRO)             	testsub R10,regarg2
(1)  240/    1340 : 3B 5B               	bnf $$computequot	;DF=0 means it didn't fit
(1)  241/    1342 : BA                  	phi R10	;R10=R10-regarg2
(1)  242/    1343 : 8B                  	glo R11
(1)  243/    1344 : AA                  	plo R10
(1)  244/    1345 :                     	
(1)  245/    1345 :                     $$again:	;this is the divisor doubling phase
(1)  246/    1345 : (MACRO)              	testsub R10,regarg2
(1)  247/    134E : 3B 5B                	bnf $$computequot	;df=0 means it didn't fit
(1)  248/    1350 : BA                  	phi R10	;R10=R10-regarg2
(1)  249/    1351 : 8B                  	glo R11
(1)  250/    1352 : AA                  	plo R10 	
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 34 - 10/29/2020 11:41:47


(1)  251/    1353 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  252/    1359 : 30 45                	br $$again
(1)  253/    135B :                      	
(1)  254/    135B :                      $$computequot:	;here we're computing the quotient
(1)  255/    135B : (MACRO)              	testsub regarg1,regarg2
(1)  256/    1364 : 3B 6A                	bnf $$testexit
(1)  257/    1366 : BC                   	phi regarg1		;complete the subtraction
(1)  258/    1367 : 8B                   	glo R11
(1)  259/    1368 : AC                   	plo regarg1
(1)  260/    1369 : 1F                   	inc retval
(1)  261/    136A :                      $$testexit:
(1)  262/    136A : 9E                   	ghi rwork
(1)  263/    136B : F7                   	sm	;top of regarg2 is still on stack
(1)  264/    136C : 3A 74                	bnz $$ney0y
(1)  265/    136E : 8D                   	glo regarg2
(1)  266/    136F : 52                   	str sp
(1)  267/    1370 : 8E                   	glo rwork
(1)  268/    1371 : F7                   	sm	;test low order bytes
(1)  269/    1372 : 32 82                	bz	$$out	;if = we're done
(1)  270/    1374 :                      $$ney0y:
(1)  271/    1374 : (MACRO)              	shl2 retval	;double quotient
(1)  272/    137A : (MACRO)              	shrU2 regarg2	;halve divisor
(1)  273/    1380 : 30 5B                	br $$computequot	;continue
(1)  274/    1382 :                      $$out:
(1)  275/    1382 :                      ;here the quotient is in retval, remainder in regarg1
(1)  276/    1382 : 12                    	inc sp	;release work area
(1)  277/    1383 : 02                  	ldn sp	;recover
(1)  278/    1384 : AB                  	plo R11	;bottom byte of R11
(1)  279/    1385 : (MACRO)             	popr R10 ;and all of R10
(1)  280/    138A : (MACRO)             	cretn	;and we're done
(1)  281/    138B :                     
(1)  282/    138B :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  283/    138B :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  284/    138B :                     _divI2:
(1)  285/    138B : 22                      dec	sp	;leave a work area available
(1)  286/    138C : 9C                      ghi regArg1
(1)  287/    138D : 52                      str sp	;save the sign of the 1st arg
(1)  288/    138E : FE                      shl
(1)  289/    138F : 3B 9A                   bnf $$pos1	;if the 1st arg is -v
(1)  290/    1391 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  291/    139A :                     $$pos1: ;1st is now +v, check 2nd
(1)  292/    139A : 9D                      ghi regArg2
(1)  293/    139B : F3                      xor	
(1)  294/    139C : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  295/    139D : 9D                      ghi regArg2
(1)  296/    139E : FE                      shl
(1)  297/    139F : 3B AA                   bnf $$pos2	;if the 2nd arg is -v
(1)  298/    13A1 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  299/    13AA :                     $$pos2: ; both args now +v
(1)  300/    13AA : 22                      dec sp	;protect workarea on the 1802
(1)  301/    13AB : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  302/    13AE : 12                      inc sp	;recover work area
(1)  303/    13AF :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  304/    13AF : 42                      lda	sp ;get back the sign bits and restore SP
(1)  305/    13B0 : FE                      shl
(1)  306/    13B1 : 3B BC                   bnf $$done ;if the signs were different
(1)  307/    13B3 : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  308/    13BC :                     $$done:
(1)  309/    13BC : (MACRO)                 Cretn ;and we're done - I hope!
(1)  310/    13BD : [189]                ENDIF
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 35 - 10/29/2020 11:41:47


(1)  311/    13BD : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  312/    13BD :                     	align 256    ;32 bit operations follow
(1)  313/    1400 :                     _divu4:
(1)  314/    1400 :                     ;This is an unsigned 32 bit restoring division
(1)  315/    1400 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  316/    1400 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  317/    1400 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  318/    1400 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  319/    1400 :                     
(1)  320/    1400 : F8 20               	ldi 32		;set loop count
(1)  321/    1402 : AE                  	plo memaddr	;in temp register
(1)  322/    1403 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  323/    140F :                     $$loop:
(1)  324/    140F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  325/    141B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  326/    1427 :                     
(1)  327/    1427 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  328/    143D :                     
(1)  329/    143D : FA 80               	ani 0x80	;check the top bit
(1)  330/    143F : 32 5D               	bz $$norestore	;if it's 0
(1)  331/    1441 : 89                  		glo RL8
(1)  332/    1442 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  333/    1444 : A9                  		plo RL8
(1)  334/    1445 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  335/    145B : 30 61               	br $$endlp 	;else
(1)  336/    145D :                     $$norestore:
(1)  337/    145D : 89                  		glo RL8
(1)  338/    145E : F9 01               		ori 1	;turn on the bottom bit
(1)  339/    1460 : A9                  		plo RL8
(1)  340/    1461 :                     	;end if
(1)  341/    1461 :                     $$endlp:
(1)  342/    1461 : 2E                  	dec memaddr	;check the cycle count
(1)  343/    1462 : 8E                  	glo memaddr
(1)  344/    1463 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  345/    1465 :                     	
(1)  346/    1465 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  347/    1466 :                     		
(1)  348/    1466 :                     
(1)  349/    1466 :                     _mulu4:
(1)  350/    1466 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  351/    1466 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  352/    1466 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  353/    1466 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  354/    1466 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  355/    1466 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  356/    1466 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  357/    1466 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  358/    1466 :                     	;for 10 we subtract and shift
(1)  359/    1466 :                     	;for 00 and 11 we just shift
(1)  360/    1466 :                     
(1)  361/    1466 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  362/    1472 : F8 20                   ldi 32
(1)  363/    1474 : AE                      plo memaddr		;cycle count
(1)  364/    1475 : FC 00                   adi 0		;clear df
(1)  365/    1477 :                     $$mloop:
(1)  366/    1477 : 89                      glo RL8
(1)  367/    1478 : FA 01                   ani 1		;isolate bottom bit of result
(1)  368/    147A : 3B 96                   bnf	$$check_sub	;
(1)  369/    147C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  370/    147E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 36 - 10/29/2020 11:41:47


(1)  371/    147E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  372/    1494 : 30 AE                   br $$shift
(1)  373/    1496 :                     $$check_sub:
(1)  374/    1496 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  375/    1498 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  376/    1498 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  377/    14AE :                     $$shift:
(1)  378/    14AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  379/    14BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  380/    14C8 :                     
(1)  381/    14C8 : 2E                      dec memaddr		;cycle count
(1)  382/    14C9 : 8E                      glo memaddr
(1)  383/    14CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  384/    14CC :                         
(1)  385/    14CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  386/    14CD :                     
(1)  387/    14CD :                     	align 256
(1)  388/    1500 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  389/    1500 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  390/    1500 :                     _divI4:
(1)  391/    1500 : 22                      dec	sp	;leave a work area available
(1)  392/    1501 : 98                      ghi RL8-1	;get the top of the dividend
(1)  393/    1502 : 52                      str sp	;save the sign of the 1st arg
(1)  394/    1503 : FE                      shl
(1)  395/    1504 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  396/    1506 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  397/    1526 :                     $$pos1: ;1st is now +v, check 2nd
(1)  398/    1526 : 9A                      ghi RL10-1
(1)  399/    1527 : F3                      xor	
(1)  400/    1528 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  401/    1529 : 9A                      ghi RL10-1
(1)  402/    152A : FE                      shl
(1)  403/    152B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  404/    152D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  405/    154D :                     $$pos2: ; both args now +v
(1)  406/    154D : 22                      dec sp	;protect workarea on the 1802
(1)  407/    154E : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  408/    1551 : 12                      inc sp	;recover work area
(1)  409/    1552 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  410/    1552 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  411/    1553 : FE                      shl
(1)  412/    1554 : 3B 76                   bnf $$done ;if the signs were different
(1)  413/    1556 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  414/    1576 :                     $$done:
(1)  415/    1576 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  416/    1577 : [311]                ENDIF
(1)  417/    1577 : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  418/    1577 :                     _modU4:	;32 bit unsigned remainder
(1)  419/    1577 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  420/    1577 : (MACRO)                 Ccall _divU4
(1)  421/    157A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  422/    1582 : (MACRO)                 Cretn
(1)  423/    1583 :                         
(1)  424/    1583 :                     _modI4:	;32 bit signed remainder
(1)  425/    1583 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  426/    1583 : (MACRO)                 Ccall _divI4
(1)  427/    1586 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  428/    158E : (MACRO)                 Cretn
(1)  429/    158F : [417]                ENDIF	
(1)  430/    158F :                     ;;function_end lcc1802init.inc
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(lcc1802epiloCX.inc) - Page 37 - 10/29/2020 11:41:47


(1)  431/    158F :                     
    1574/    158F :                     	include LCC1802fp.inc
(1)    1/    158F :                     ;17-03-06 changing sep rret to cretn, sep rcall to ccall
(1)    2/    158F :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    3/    158F :                     ;maybe originally from RCA
(1)    4/    158F :                     ;these routines use ALL the registers from 6-15!
(1)    5/    158F :                     ;8-15 were more or less available to start with
(1)    6/    158F :                     ;it saves 6 when it uses it
(1)    7/    158F :                     ;I save 7 on entry and restore on exit
(1)    8/    158F :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    9/    158F : =0BH                FB	equ	11	;was R9
(1)   10/    158F : =9H                 F9	equ	9	;was R7
(1)   11/    158F : =7H                 F7	equ	7	;was RB
(1)   12/    158F :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   13/    158F :                     ;18-02-09 moved labels atof_div,div_nope,div_a2nz and others off of macro statement
(1)   14/    158F :                     ; *** Convert signed long to float
(1)   15/    158F :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   16/    158F :                     ; *** result in same register
(1)   17/    158F :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   18/    158F :                     	align 256
(1)   19/    1600 : F8 00               cvif4:	ldi	0
(1)   20/    1602 : BE                  	phi	memaddr	;sign
(1)   21/    1603 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   22/    1605 : AE                  	plo	memaddr	;
(1)   23/    1606 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   24/    1607 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   25/    1609 : FE                  	shl		;sign bit to df
(1)   26/    160A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   27/    160C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   28/    160D : BE                  	phi	memaddr	;save it
(1)   29/    160E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   30/    162E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   31/    1630 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   32/    1631 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    1633 : 99                  	ghi	RL8	;next byte
(1)   34/    1634 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   35/    1636 : 89                  	glo	RL8	;last byte
(1)   36/    1637 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   37/    1639 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   38/    163A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   39/    163C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   40/    163D : (MACRO)             	shru4	RL8
(1)   41/    1649 : 30 39               	br	$$sgnpos
(1)   42/    164B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   43/    164C : FA 80               	ani	0x80	;isolate it
(1)   44/    164E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   45/    1650 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   46/    1651 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   47/    165D : 30 4B               	br	$$shl
(1)   48/    165F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   49/    1660 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   50/    1661 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   51/    1662 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   52/    1664 : 88                  	glo	RL8-1	;get the byte
(1)   53/    1665 : FA 7F               	ani	0x7f	;clear bit 23
(1)   54/    1667 : A8                  	plo	RL8-1	;put it back
(1)   55/    1668 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   56/    1669 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   57/    166B : 98                  	ghi	RL8-1	;get the sign byte
(1)   58/    166C : F9 80               	ori	0x80	;set the sign bit
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 38 - 10/29/2020 11:41:47


(1)   59/    166E : B8                  	phi	RL8-1	;place it
(1)   60/    166F :                     $$done:			;;moved off macro
(1)   61/    166F : (MACRO)             	Cretn		;and we're done
(1)   62/    1670 :                     	
(1)   63/    1670 :                     
(1)   64/    1670 :                     
(1)   65/    1670 :                     ; *** Convert float to signed long
(1)   66/    1670 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   67/    1670 :                     ; *** result in same register
(1)   68/    1670 :                     	align 256
(1)   69/    1700 :                     cvfi4:
(1)   70/    1700 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   71/    1701 : BE                  	phi	memaddr ;save for later
(1)   72/    1702 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   73/    1703 : FE                  	shl		;shift to df
(1)   74/    1704 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   75/    1705 : 7E                  	shlc		;combine with 0
(1)   76/    1706 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   77/    1706 : 22                  	dec	sp
(1)   78/    1707 : 52                  	str	sp
(1)   79/    1708 : F8 96               	ldi	150
(1)   80/    170A : F7                  	sm		;calculate shift count needed
(1)   81/    170B :                     ;*******note - the df flag set here is tested later
(1)   82/    170B : AE                  	plo	memaddr
(1)   83/    170C : 12                  	inc	sp	;release work area
(1)   84/    170D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   85/    170D : F8 00               	ldi	0
(1)   86/    170F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   87/    1710 : 88                  	glo	RL8-1	;get the next byte
(1)   88/    1711 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   89/    1713 : A8                  	plo	RL8-1	;put it back
(1)   90/    1714 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   91/    1715 : 32 3B               	bz	$$sign
(1)   92/    1717 :                     ;**********note df is set from subtraction before setting mantissa
(1)   93/    1717 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   94/    1719 :                     
(1)   95/    1719 :                     $$shr:			;separated from macro
(1)   96/    1719 : (MACRO)             	shru4	RL8
(1)   97/    1725 : 2E                  	dec	memaddr	;check shift count
(1)   98/    1726 : 8E                  	glo	memaddr
(1)   99/    1727 : 3A 19               	bnz	$$shr	;complete the shift
(1)  100/    1729 : 30 3B               	br	$$sign
(1)  101/    172B :                     
(1)  102/    172B :                     ;handle negative shift as best I can - gigo
(1)  103/    172B :                     $$lsh: 			;separated from macro
(1)  104/    172B : (MACRO)             	shl4	RL8	;shift once
(1)  105/    1737 : 1E                  	inc	memaddr
(1)  106/    1738 : 8E                  	glo	memaddr
(1)  107/    1739 : 3A 2B               	bnz	$$lsh	
(1)  108/    173B :                     	
(1)  109/    173B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  110/    173C : FE                  	shl		;shift sign bit into df
(1)  111/    173D : 3B 61               	bnf	$$done
(1)  112/    173F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  113/    175F : 30 61               	br	$$done	; and return
(1)  114/    1761 :                     
(1)  115/    1761 :                     $$done:			;moved off macro
(1)  116/    1761 : (MACRO)             	Cretn		;and we're done
(1)  117/    1762 :                     
(1)  118/    1762 :                     ; *** Check if character is numeric
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 39 - 10/29/2020 11:41:47


(1)  119/    1762 :                     ; *** D - char to check
(1)  120/    1762 :                     ; *** Returns DF=1 if numeric
(1)  121/    1762 :                     ; ***         DF=0 if not
(1)  122/    1762 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  123/    1763 : FF 30                          smi     '0'                 ; check for below zero
(1)  124/    1765 : 3B 6E                          bnf     fails               ; jump if below
(1)  125/    1767 : FF 0A                          smi     10                  ; see if above
(1)  126/    1769 : 33 6E                          bdf     fails               ; fails if so
(1)  127/    176B : FF 00               passes:    smi     0                   ; signal success
(1)  128/    176D : C8                             lskp
(1)  129/    176E : FC 00               fails:     adi     0                   ; signal failure
(1)  130/    1770 : 8E                             glo     r14                 ; recover character
(1)  131/    1771 : (MACRO)                        cretn	                ; and return; ******************************* 17-03-06
(1)  132/    1772 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  133/    1772 :                     ; *******************************
(1)  134/    1772 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  135/    1773 : F6                             shr
(1)  136/    1774 : B8                             phi   r8
(1)  137/    1775 : 88                             glo   r8
(1)  138/    1776 : 76                             shrc
(1)  139/    1777 : A8                             plo   r8
(1)  140/    1778 : 99                             ghi   F9                    ; shift low word right
(1)  141/    1779 : 76                             shrc
(1)  142/    177A : B9                             phi   F9
(1)  143/    177B : 89                             glo   F9
(1)  144/    177C : 76                             shrc
(1)  145/    177D : A9                             plo   F9
(1)  146/    177E : (MACRO)                        Cretn
(1)  147/    177F :                     
(1)  148/    177F :                     ; ******************************
(1)  149/    177F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  150/    177F :                     ; ******************************
(1)  151/    177F : 89                  fp_shl_1:  glo   F9
(1)  152/    1780 : FE                             shl
(1)  153/    1781 : A9                             plo   F9
(1)  154/    1782 : 99                             ghi   F9
(1)  155/    1783 : 7E                             shlc
(1)  156/    1784 : B9                             phi   F9
(1)  157/    1785 : 88                             glo   r8
(1)  158/    1786 : 7E                             shlc
(1)  159/    1787 : A8                             plo   r8
(1)  160/    1788 : 98                             ghi   r8
(1)  161/    1789 : 7E                             shlc
(1)  162/    178A : B8                             phi   r8
(1)  163/    178B : (MACRO)                        cretn	;17-03-06
(1)  164/    178C :                     
(1)  165/    178C :                     ; **********************
(1)  166/    178C :                     ; *** R8:F9 += RA:FB ***
(1)  167/    178C :                     ; **********************
(1)  168/    178C : 8B                  fp_add_12: glo   FB
(1)  169/    178D : 22                  	   dec r2	;wjr - make a work area
(1)  170/    178E : 52                             str   r2
(1)  171/    178F : 89                             glo   F9
(1)  172/    1790 : F4                             add
(1)  173/    1791 : A9                             plo   F9
(1)  174/    1792 : 9B                             ghi   FB
(1)  175/    1793 : 52                             str   r2
(1)  176/    1794 : 99                             ghi   F9
(1)  177/    1795 : 74                             adc
(1)  178/    1796 : B9                             phi   F9
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 40 - 10/29/2020 11:41:47


(1)  179/    1797 : 8A                             glo   R10
(1)  180/    1798 : 52                             str   r2
(1)  181/    1799 : 88                             glo   r8
(1)  182/    179A : 74                             adc
(1)  183/    179B : A8                             plo   r8
(1)  184/    179C : 9A                             ghi   R10
(1)  185/    179D : 52                             str   r2
(1)  186/    179E : 98                             ghi   r8
(1)  187/    179F : 74                             adc
(1)  188/    17A0 : B8                             phi   r8
(1)  189/    17A1 : 12                             inc	r2	;wjr - release work area
(1)  190/    17A2 : (MACRO)                        Cretn
(1)  191/    17A3 :                     
(1)  192/    17A3 :                     ; *******************************
(1)  193/    17A3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  194/    17A3 :                     ; *******************************
(1)  195/    17A3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  196/    17A4 : F6                             shr
(1)  197/    17A5 : BF                             phi   R15
(1)  198/    17A6 : 8F                             glo   R15
(1)  199/    17A7 : 76                             shrc
(1)  200/    17A8 : AF                             plo   R15
(1)  201/    17A9 : 9D                             ghi   R13                    ; shift low word right
(1)  202/    17AA : 76                             shrc
(1)  203/    17AB : BD                             phi   R13
(1)  204/    17AC : 8D                             glo   R13
(1)  205/    17AD : 76                             shrc
(1)  206/    17AE : AD                             plo   R13
(1)  207/    17AF : (MACRO)                        Cretn
(1)  208/    17B0 :                     
(1)  209/    17B0 :                     ; *************************************
(1)  210/    17B0 :                     ; *** Scale number to high bit is 1 ***
(1)  211/    17B0 :                     ; *** R8:F9 - Number to scale       ***
(1)  212/    17B0 :                     ; *** RF.1  - Exponent for number   ***
(1)  213/    17B0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  214/    17B0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  215/    17B0 :                     ; *************************************
(1)  216/    17B0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  217/    17B1 : FA 80                          ani   080h                  ; check it
(1)  218/    17B3 : CA 17 C0                       lbnz  fp_sc_cln             ; jump if good
(1)  219/    17B6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  220/    17B9 : 9F                             ghi   R15                    ; get exp1
(1)  221/    17BA : FF 01                          smi   1                     ; minus 1
(1)  222/    17BC : BF                             phi   R15                    ; and put it back
(1)  223/    17BD : C0 17 B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  224/    17C0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  225/    17C1 : FE                             shl                         ; shift out high 1 bit
(1)  226/    17C2 : A8                             plo   r8                    ; set aside
(1)  227/    17C3 : 9F                             ghi   R15                    ; get exponent byte
(1)  228/    17C4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  229/    17C5 : F6                             shr                         ; shift bit 0 into DF
(1)  230/    17C6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  231/    17C7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  232/    17C8 : A8                             plo   r8                    ; and put it back
(1)  233/    17C9 : 87                             glo   F7                   ; get signs
(1)  234/    17CA : F6                             shr                         ; get sign 1
(1)  235/    17CB : 98                             ghi   r8                    ; recover exponent
(1)  236/    17CC : 76                             shrc                        ; shift in sign
(1)  237/    17CD : B8                             phi   r8                    ; put it back
(1)  238/    17CE : 12                             inc	r2	;wjr release work area
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 41 - 10/29/2020 11:41:47


(1)  239/    17CF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  240/    17D4 : (MACRO)             	   popr R12	;wjr
(1)  241/    17D9 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  242/    17DE : (MACRO)                        Cretn                       ; return to caller
(1)  243/    17DF :                     
(1)  244/    17DF :                     ; ************************************
(1)  245/    17DF :                     ; *** Get exponenst from arguments ***
(1)  246/    17DF :                     ; *** R8:F9 - Arg 1                ***
(1)  247/    17DF :                     ; *** RA:FB - Arg 2                ***
(1)  248/    17DF :                     ; *** Returns: RF.1 - exp1         ***
(1)  249/    17DF :                     ; ***          RF.0 - exp2         ***
(1)  250/    17DF :                     ; ************************************
(1)  251/    17DF : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  252/    17E0 : FE                             shl                         ; shift it into DF
(1)  253/    17E1 : 98                             ghi   r8                    ; get top 7 bits
(1)  254/    17E2 : 7E                             shlc                        ; shift in first bit
(1)  255/    17E3 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  256/    17E4 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  257/    17E4 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  258/    17E5 : FE                             shl                         ; shift it into DF
(1)  259/    17E6 : 9A                             ghi   R10                    ; get top 7 bits
(1)  260/    17E7 : 7E                             shlc                        ; shift in first bit
(1)  261/    17E8 : AF                             plo   R15                    ; put into RF
(1)  262/    17E9 : (MACRO)                        cretn	                  ; return to caller 17-03-06
(1)  263/    17EA :                     
(1)  264/    17EA :                     ; ************************************
(1)  265/    17EA :                     ; *** Get signs from arguments     ***
(1)  266/    17EA :                     ; *** R8:F9 - Arg 1                ***
(1)  267/    17EA :                     ; *** RA:FB - Arg 2                ***
(1)  268/    17EA :                     ; *** Returns: F7.0 - signs        ***
(1)  269/    17EA :                     ; ************************************
(1)  270/    17EA : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  271/    17EB : FE                             shl                         ; shift into DF
(1)  272/    17EC : 9A                             ghi   R10                    ; get sign of arg2
(1)  273/    17ED : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  274/    17EE : 7E                             shlc                        ; now shift in sign of arg2
(1)  275/    17EF : A7                             plo   F7                    ; save them
(1)  276/    17F0 : (MACRO)                        Cretn                       ; return to caller
(1)  277/    17F1 :                     
(1)  278/    17F1 :                     ; ***************************************
(1)  279/    17F1 :                     ; *** Add 2 SP floating point numbers ***
(1)  280/    17F1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  281/    17F1 :                     ; *** RA:FB - Arg 2                   ***
(1)  282/    17F1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  283/    17F1 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  284/    17F1 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  285/    17F1 :                     ; ***        F7.0 - signs        ***
(1)  286/    17F1 :                     ; ***************************************
(1)  287/    17F1 : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  288/    17F2 : CA 18 0A                       lbnz  add_a1nz
(1)  289/    17F5 : 88                             glo   r8
(1)  290/    17F6 : CA 18 0A                       lbnz  add_a1nz
(1)  291/    17F9 : 99                             ghi   F9
(1)  292/    17FA : CA 18 0A                       lbnz  add_a1nz
(1)  293/    17FD : 89                             glo   F9
(1)  294/    17FE : CA 18 0A                       lbnz  add_a1nz
(1)  295/    1801 : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  296/    1802 : B8                             phi   r8
(1)  297/    1803 : 8A                             glo   R10
(1)  298/    1804 : A8                             plo   r8
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 42 - 10/29/2020 11:41:47


(1)  299/    1805 : 9B                             ghi   FB
(1)  300/    1806 : B9                             phi   F9
(1)  301/    1807 : 8B                             glo   FB
(1)  302/    1808 : A9                             plo   F9
(1)  303/    1809 : (MACRO)                        Cretn                        ; return to caller
(1)  304/    180A :                     
(1)  305/    180A : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  306/    180B : CA 18 1B                       lbnz  add_a2nz
(1)  307/    180E : 8A                             glo   R10
(1)  308/    180F : CA 18 1B                       lbnz  add_a2nz
(1)  309/    1812 : 9B                             ghi   FB
(1)  310/    1813 : CA 18 1B                       lbnz  add_a2nz
(1)  311/    1816 : 8B                             glo   FB
(1)  312/    1817 : CA 18 1B                       lbnz  add_a2nz
(1)  313/    181A : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  314/    181B :                                
(1)  315/    181B :                     add_a2nz:  
(1)  316/    181B : (MACRO)             	   pushr F7	;wjr save c variable register
(1)  317/    181F : (MACRO)             	   pushr R12	;wjr save param regs
(1)  318/    1823 : (MACRO)             	   pushr R13	;wjr
(1)  319/    1827 : 22                  	   dec	r2	;wjr - make a work area
(1)  320/    1828 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  321/    182B : 9F                             ghi   R15
(1)  322/    182C : 52                             str   r2
(1)  323/    182D : 8F                             glo   R15
(1)  324/    182E : F7                             sm                          ; perfrom exp2 - exp1
(1)  325/    182F : CB 18 50                       lbnf  add_ns                ; jump if no swap needed
(1)  326/    1832 :                     
(1)  327/    1832 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  328/    1833 : AE                             plo   R14
(1)  329/    1834 : 9A                             ghi   R10
(1)  330/    1835 : B8                             phi   r8
(1)  331/    1836 : 8E                             glo   R14
(1)  332/    1837 : BA                             phi   R10
(1)  333/    1838 : 88                             glo   r8
(1)  334/    1839 : AE                             plo   R14
(1)  335/    183A : 8A                             glo   R10
(1)  336/    183B : A8                             plo   r8
(1)  337/    183C : 8E                             glo   R14
(1)  338/    183D : AA                             plo   R10
(1)  339/    183E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  340/    183F : AE                             plo   R14
(1)  341/    1840 : 9B                             ghi   FB
(1)  342/    1841 : B9                             phi   F9
(1)  343/    1842 : 8E                             glo   R14
(1)  344/    1843 : BB                             phi   FB
(1)  345/    1844 : 89                             glo   F9
(1)  346/    1845 : AE                             plo   R14
(1)  347/    1846 : 8B                             glo   FB
(1)  348/    1847 : A9                             plo   F9
(1)  349/    1848 : 8E                             glo   R14
(1)  350/    1849 : AB                             plo   FB
(1)  351/    184A : 9F                             ghi   R15                    ; swap exponents
(1)  352/    184B : AE                             plo   R14
(1)  353/    184C : 8F                             glo   R15
(1)  354/    184D : BF                             phi   R15
(1)  355/    184E : 8E                             glo   R14
(1)  356/    184F : AF                             plo   R15
(1)  357/    1850 :                     add_ns:    				;moved off macro
(1)  358/    1850 : (MACRO)             	   ccall fp_getsgn              ; get signs of arguments
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 43 - 10/29/2020 11:41:47


(1)  359/    1853 : F8 00                          ldi   0                     ; setup mantissas
(1)  360/    1855 : B8                             phi   r8
(1)  361/    1856 : BA                             phi   R10
(1)  362/    1857 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  363/    1859 : 52                             str   r2
(1)  364/    185A : 88                             glo   r8
(1)  365/    185B : F1                             or
(1)  366/    185C : A8                             plo   r8
(1)  367/    185D : 8A                             glo   R10
(1)  368/    185E : F1                             or
(1)  369/    185F : AA                             plo   R10
(1)  370/    1860 : 9F                             ghi   R15                    ; get exp1
(1)  371/    1861 : 52                             str   r2                    ; place into memory
(1)  372/    1862 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  373/    1863 : F7                             sm                          ; see if match to exp1
(1)  374/    1864 : C2 18 77                       lbz   add_lp1dn             ; jump if match
(1)  375/    1867 : 8F                             glo   R15                    ; need to increase it
(1)  376/    1868 : FC 01                          adi   1
(1)  377/    186A : AF                             plo   R15
(1)  378/    186B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  379/    186C : F6                             shr
(1)  380/    186D : AA                             plo   R10
(1)  381/    186E : 9B                             ghi   FB
(1)  382/    186F : 76                             shrc
(1)  383/    1870 : BB                             phi   FB
(1)  384/    1871 : 8B                             glo   FB
(1)  385/    1872 : 76                             shrc
(1)  386/    1873 : AB                             plo   FB
(1)  387/    1874 : C0 18 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  388/    1877 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  389/    1878 : 52                             str   r2
(1)  390/    1879 : F6                             shr
(1)  391/    187A : F3                             xor
(1)  392/    187B : FA 01                          ani   1                     ; keep only bottom bit
(1)  393/    187D : CA 18 86                       lbnz  add_nm                ; jump if signs do not match
(1)  394/    1880 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  395/    1883 : C0 18 BF                       lbr   add_fnl               ; jump to clean up
(1)  396/    1886 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  397/    1887 : 52                             str   r2
(1)  398/    1888 : 89                             glo   F9
(1)  399/    1889 : F7                             sm
(1)  400/    188A : AC                             plo   R12                    ; place into RD:RC
(1)  401/    188B : 9B                             ghi   FB
(1)  402/    188C : 52                             str   r2
(1)  403/    188D : 99                             ghi   F9
(1)  404/    188E : 77                             smb
(1)  405/    188F : BC                             phi   R12
(1)  406/    1890 : 8A                             glo   R10
(1)  407/    1891 : 52                             str   r2
(1)  408/    1892 : 88                             glo   r8
(1)  409/    1893 : 77                             smb
(1)  410/    1894 : AD                             plo   R13
(1)  411/    1895 : 9A                             ghi   R10
(1)  412/    1896 : 52                             str   r2
(1)  413/    1897 : 98                             ghi   r8
(1)  414/    1898 : 77                             smb
(1)  415/    1899 : BD                             phi   R13
(1)  416/    189A : CB 18 A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  417/    189D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  418/    189E : B8                             phi   r8
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 44 - 10/29/2020 11:41:47


(1)  419/    189F : 8D                             glo   R13
(1)  420/    18A0 : A8                             plo   r8
(1)  421/    18A1 : 9C                             ghi   R12
(1)  422/    18A2 : B9                             phi   F9
(1)  423/    18A3 : 8C                             glo   R12
(1)  424/    18A4 : A9                             plo   F9
(1)  425/    18A5 : C0 18 BF                       lbr   add_fnl               ; finalize
(1)  426/    18A8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  427/    18A9 : 52                             str   r2
(1)  428/    18AA : 8B                             glo   FB
(1)  429/    18AB : F7                             sm
(1)  430/    18AC : A9                             plo   F9
(1)  431/    18AD : 99                             ghi   F9
(1)  432/    18AE : 52                             str   r2
(1)  433/    18AF : 9B                             ghi   FB
(1)  434/    18B0 : 77                             smb
(1)  435/    18B1 : B9                             phi   F9
(1)  436/    18B2 : 88                             glo   r8
(1)  437/    18B3 : 52                             str   r2
(1)  438/    18B4 : 8A                             glo   R10
(1)  439/    18B5 : 77                             smb
(1)  440/    18B6 : A8                             plo   r8
(1)  441/    18B7 : 98                             ghi   r8
(1)  442/    18B8 : 52                             str   r2
(1)  443/    18B9 : 9A                             ghi   R10
(1)  444/    18BA : 77                             smb
(1)  445/    18BB : B8                             phi   r8
(1)  446/    18BC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  447/    18BD : FE                             shl
(1)  448/    18BE : A7                             plo   F7
(1)  449/    18BF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  450/    18C0 : CA 18 E0                       lbnz  add_nz                ; jump if not
(1)  451/    18C3 : 88                             glo   r8
(1)  452/    18C4 : CA 18 E0                       lbnz  add_nz
(1)  453/    18C7 : 99                             ghi   F9
(1)  454/    18C8 : CA 18 E0                       lbnz  add_nz
(1)  455/    18CB : 89                             glo   F9
(1)  456/    18CC : CA 18 E0                       lbnz  add_nz
(1)  457/    18CF : 12                             inc	r2	;wjr release work area
(1)  458/    18D0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  459/    18D5 : (MACRO)             	   popr R12	;wjr
(1)  460/    18DA : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  461/    18DF : (MACRO)                        Cretn                       ; return the zero
(1)  462/    18E0 : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  463/    18E1 : C2 18 EE                       lbz   add_nx                ; jump if not
(1)  464/    18E4 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  465/    18E7 : 9F                             ghi   R15                    ; get exp1
(1)  466/    18E8 : FC 01                          adi   1                     ; increment it
(1)  467/    18EA : BF                             phi   R15                    ; and put it back
(1)  468/    18EB : C0 18 E0                       lbr   add_nz                ; keep going until not > 24 bits
(1)  469/    18EE :                     
(1)  470/    18EE : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  471/    18EF : F6                             shr
(1)  472/    18F0 : A7                             plo   F7
(1)  473/    18F1 : C0 17 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  474/    18F4 :                     
(1)  475/    18F4 :                     ; ***************************************
(1)  476/    18F4 :                     ; *** sub 2 SP floating point numbers ***
(1)  477/    18F4 :                     ; *** R8:F9 - Arg 1                   ***
(1)  478/    18F4 :                     ; *** RA:FB - Arg 2                   ***
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 45 - 10/29/2020 11:41:47


(1)  479/    18F4 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  480/    18F4 :                     ; ***************************************
(1)  481/    18F4 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  482/    18F5 : FB 80                          xri   080h
(1)  483/    18F7 : BA                             phi   R10                    ; and put it back
(1)  484/    18F8 : C0 17 F1                       lbr   fp_add                ; now just add
(1)  485/    18FB :                     
(1)  486/    18FB :                     ; ***************************************
(1)  487/    18FB :                     ; *** Div 2 SP floating point numbers ***
(1)  488/    18FB :                     ; *** R8:F9 - Arg 1                   ***
(1)  489/    18FB :                     ; *** RA:FB - Arg 2                   ***
(1)  490/    18FB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  491/    18FB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  492/    18FB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  493/    18FB :                     ; ***        F7.0 - signs        ***
(1)  494/    18FB :                     ; ***************************************
(1)  495/    18FB : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  496/    18FC : CA 19 0C                       lbnz  div_a1nz
(1)  497/    18FF : 88                             glo   r8
(1)  498/    1900 : CA 19 0C                       lbnz  div_a1nz
(1)  499/    1903 : 99                             ghi   F9
(1)  500/    1904 : CA 19 0C                       lbnz  div_a1nz
(1)  501/    1907 : 89                             glo   F9
(1)  502/    1908 : CA 19 0C                       lbnz  div_a1nz
(1)  503/    190B : (MACRO)                        Cretn	                ; just return the zero
(1)  504/    190C : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  505/    190D : CA 19 2A                       lbnz  div_a2nz
(1)  506/    1910 : 8A                             glo   R10
(1)  507/    1911 : CA 19 2A                       lbnz  div_a2nz
(1)  508/    1914 : 9B                             ghi   FB
(1)  509/    1915 : CA 19 2A                       lbnz  div_a2nz
(1)  510/    1918 : 8B                             glo   FB
(1)  511/    1919 : CA 19 2A                       lbnz  div_a2nz
(1)  512/    191C : 98                             ghi   r8                    ; need sign of arg1
(1)  513/    191D : FA 80                          ani   080h                  ; want only sign
(1)  514/    191F : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  515/    1921 : B8                             phi   r8                    ; put into answer
(1)  516/    1922 : F8 80                          ldi   080h                  ; build rest of answer
(1)  517/    1924 : A8                             plo   r8 
(1)  518/    1925 : F8 00                          ldi   0
(1)  519/    1927 : B9                             phi   F9
(1)  520/    1928 : A9                             plo   F9
(1)  521/    1929 : (MACRO)                        Cretn                  	; and return to caller
(1)  522/    192A :                     
(1)  523/    192A :                     div_a2nz:  				; 18-02-09 moved off of macro
(1)  524/    192A : (MACRO)             	   pushr F7	;wjr save the C variable
(1)  525/    192E : (MACRO)             	   pushr R12	;wjr save param regs
(1)  526/    1932 : (MACRO)             	   pushr R13	;wjr
(1)  527/    1936 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  528/    1937 :                     
(1)  529/    1937 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  530/    193A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  531/    193D : 8F                             glo   R15                    ; get exp2
(1)  532/    193E : FF 7F                          smi   127                   ; remove bias
(1)  533/    1940 : 52                             str   r2                    ; place into memory
(1)  534/    1941 : 9F                             ghi   R15                    ; get exp1
(1)  535/    1942 : FF 7F                          smi   127                   ; remove bias
(1)  536/    1944 : F7                             sm                          ; perform exp1 - exp2
(1)  537/    1945 : FC 7F                          adi   127                   ; put bias back in
(1)  538/    1947 : 73                             stxd                        ; save onto stack
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 46 - 10/29/2020 11:41:47


(1)  539/    1948 : 87                             glo   F7                    ; determine sign for answer
(1)  540/    1949 : 52                             str   r2
(1)  541/    194A : F6                             shr
(1)  542/    194B : F3                             xor
(1)  543/    194C : 73                             stxd                        ; place onto stack
(1)  544/    194D : F8 00                          ldi   0                     ; setup man
(1)  545/    194F : BA                             phi   R10
(1)  546/    1950 : 8A                             glo   R10
(1)  547/    1951 : F9 80                          ori   080h
(1)  548/    1953 : AA                             plo   R10
(1)  549/    1954 : F8 00                          ldi   0                     ; setup div
(1)  550/    1956 : B8                             phi   r8
(1)  551/    1957 : 88                             glo   r8
(1)  552/    1958 : F9 80                          ori   080h
(1)  553/    195A : A8                             plo   r8
(1)  554/    195B : F8 00                          ldi   0                     ; setup result
(1)  555/    195D : BC                             phi   R12
(1)  556/    195E : AC                             plo   R12
(1)  557/    195F : B7                             phi   F7
(1)  558/    1960 : A7                             plo   F7
(1)  559/    1961 : AF                             plo   R15                    ; setup quotient
(1)  560/    1962 : BF                             phi   R15
(1)  561/    1963 : BD                             phi   R13
(1)  562/    1964 : AD                             plo   R13
(1)  563/    1965 : F8 80                          ldi   080h
(1)  564/    1967 : AF                             plo   R15
(1)  565/    1968 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  566/    1969 : CA 19 7B                       lbnz  div_go1
(1)  567/    196C : 88                             glo   r8
(1)  568/    196D : CA 19 7B                       lbnz  div_go1
(1)  569/    1970 : 99                             ghi   F9
(1)  570/    1971 : CA 19 7B                       lbnz  div_go1
(1)  571/    1974 : 89                             glo   F9
(1)  572/    1975 : CA 19 7B                       lbnz  div_go1
(1)  573/    1978 : C0 19 DB                       lbr   div_z
(1)  574/    197B : 9A                  div_go1:   ghi   R10
(1)  575/    197C : CA 19 8E                       lbnz  div_go
(1)  576/    197F : 8A                             glo   R10
(1)  577/    1980 : CA 19 8E                       lbnz  div_go
(1)  578/    1983 : 9B                             ghi   FB
(1)  579/    1984 : CA 19 8E                       lbnz  div_go
(1)  580/    1987 : 8B                             glo   FB
(1)  581/    1988 : CA 19 8E                       lbnz  div_go
(1)  582/    198B : C0 19 DB                       lbr   div_z                 ; nothing more to do
(1)  583/    198E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  584/    198F : 52                             str   r2
(1)  585/    1990 : 89                             glo   F9
(1)  586/    1991 : F7                             sm
(1)  587/    1992 : 9B                             ghi   FB
(1)  588/    1993 : 52                             str   r2
(1)  589/    1994 : 99                             ghi   F9
(1)  590/    1995 : 77                             smb
(1)  591/    1996 : 8A                             glo   R10
(1)  592/    1997 : 52                             str   r2
(1)  593/    1998 : 88                             glo   r8
(1)  594/    1999 : 77                             smb
(1)  595/    199A : 9A                             ghi   R10
(1)  596/    199B : 52                             str   r2
(1)  597/    199C : 98                             ghi   r8
(1)  598/    199D : 77                             smb
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 47 - 10/29/2020 11:41:47


(1)  599/    199E : CB 19 C9                       lbnf  div_nope              ; jump if div was smaller
(1)  600/    19A1 : 8B                             glo   FB                    ; div -= man
(1)  601/    19A2 : 52                             str   r2
(1)  602/    19A3 : 89                             glo   F9
(1)  603/    19A4 : F7                             sm
(1)  604/    19A5 : A9                             plo   F9
(1)  605/    19A6 : 9B                             ghi   FB
(1)  606/    19A7 : 52                             str   r2
(1)  607/    19A8 : 99                             ghi   F9
(1)  608/    19A9 : 77                             smb
(1)  609/    19AA : B9                             phi   F9
(1)  610/    19AB : 8A                             glo   R10
(1)  611/    19AC : 52                             str   r2
(1)  612/    19AD : 88                             glo   r8
(1)  613/    19AE : 77                             smb
(1)  614/    19AF : A8                             plo   r8
(1)  615/    19B0 : 9A                             ghi   R10
(1)  616/    19B1 : 52                             str   r2
(1)  617/    19B2 : 98                             ghi   r8
(1)  618/    19B3 : 77                             smb
(1)  619/    19B4 : B8                             phi   r8
(1)  620/    19B5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  621/    19B6 : 52                             str   r2
(1)  622/    19B7 : 9C                             ghi   R12
(1)  623/    19B8 : F1                             or
(1)  624/    19B9 : BC                             phi   R12
(1)  625/    19BA : 8F                             glo   R15
(1)  626/    19BB : 52                             str   r2
(1)  627/    19BC : 8C                             glo   R12
(1)  628/    19BD : F1                             or
(1)  629/    19BE : AC                             plo   R12
(1)  630/    19BF : 9D                             ghi   R13
(1)  631/    19C0 : 52                             str   r2
(1)  632/    19C1 : 97                             ghi   F7
(1)  633/    19C2 : F1                             or
(1)  634/    19C3 : B7                             phi   F7
(1)  635/    19C4 : 8D                             glo   R13
(1)  636/    19C5 : 52                             str   r2
(1)  637/    19C6 : 87                             glo   F7
(1)  638/    19C7 : F1                             or
(1)  639/    19C8 : A7                             plo   F7
(1)  640/    19C9 :                     div_nope:  				;18-02-09 moved label off macro
(1)  641/    19C9 : (MACRO)             	   ccall fp_shr_fd              ; shift quotient right 17-03-06
(1)  642/    19CC : 9A                             ghi   R10                    ; shift divisor right
(1)  643/    19CD : F6                             shr
(1)  644/    19CE : BA                             phi   R10
(1)  645/    19CF : 8A                             glo   R10
(1)  646/    19D0 : 76                             shrc
(1)  647/    19D1 : AA                             plo   R10
(1)  648/    19D2 : 9B                             ghi   FB
(1)  649/    19D3 : 76                             shrc
(1)  650/    19D4 : BB                             phi   FB
(1)  651/    19D5 : 8B                             glo   FB
(1)  652/    19D6 : 76                             shrc
(1)  653/    19D7 : AB                             plo   FB
(1)  654/    19D8 : C0 19 68                       lbr   div_lp                ; loop back until done
(1)  655/    19DB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  656/    19DC : B8                             phi   r8
(1)  657/    19DD : 8C                             glo   R12
(1)  658/    19DE : A8                             plo   r8
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 48 - 10/29/2020 11:41:47


(1)  659/    19DF : 97                             ghi   F7
(1)  660/    19E0 : B9                             phi   F9
(1)  661/    19E1 : 87                             glo   F7
(1)  662/    19E2 : A9                             plo   F9
(1)  663/    19E3 : 60                             irx                         ; recover sign
(1)  664/    19E4 : 72                             ldxa
(1)  665/    19E5 : A7                             plo   F7
(1)  666/    19E6 : F0                             ldx                         ; recover answer exponent
(1)  667/    19E7 : BF                             phi   R15
(1)  668/    19E8 : C0 17 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  669/    19EB :                     
(1)  670/    19EB :                     ; ***************************************
(1)  671/    19EB :                     ; *** Mul 2 SP floating point numbers ***
(1)  672/    19EB :                     ; *** R8:F9 - Arg 1                   ***
(1)  673/    19EB :                     ; *** RA:FB - Arg 2                   ***
(1)  674/    19EB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  675/    19EB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  676/    19EB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  677/    19EB :                     ; ***        F7.0 - signs             ***
(1)  678/    19EB :                     ; ***************************************
(1)  679/    19EB :                     fp_mul:    		;separated from macro
(1)  680/    19EB : (MACRO)             	   pushr F7	;wjr save the C variable
(1)  681/    19EF : (MACRO)             	   pushr R12	;wjr save param regs
(1)  682/    19F3 : (MACRO)             	   pushr R13	;wjr
(1)  683/    19F7 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  684/    19F8 :                     
(1)  685/    19F8 : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  686/    19FB : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  687/    19FE : 8F                             glo   R15                    ; get exp2
(1)  688/    19FF : FF 7F                          smi   127                   ; remove bias
(1)  689/    1A01 : 52                             str   r2                    ; place into memory
(1)  690/    1A02 : 9F                             ghi   R15                    ; get exp1
(1)  691/    1A03 : FF 7F                          smi   127                   ; remove bias
(1)  692/    1A05 : F4                             add                         ; add in exponent 2
(1)  693/    1A06 : FC 7F                          adi   127                   ; put bias back in
(1)  694/    1A08 : 73                             stxd                        ; place onto stack
(1)  695/    1A09 : 87                             glo   F7                    ; determine sign for answer
(1)  696/    1A0A : 52                             str   r2
(1)  697/    1A0B : F6                             shr
(1)  698/    1A0C : F3                             xor
(1)  699/    1A0D : 73                             stxd                        ; place onto stack
(1)  700/    1A0E : 9E                             ghi   R14                    ; get baud constant
(1)  701/    1A0F : 73                             stxd                        ; save on stack
(1)  702/    1A10 : 96                             ghi   r6                    ; save return position on stack
(1)  703/    1A11 : 73                             stxd
(1)  704/    1A12 : 86                             glo   r6
(1)  705/    1A13 : 73                             stxd
(1)  706/    1A14 : F8 00                          ldi   0                     ; initial value of ct
(1)  707/    1A16 : 73                             stxd
(1)  708/    1A17 : BE                             phi   R14                    ; set mulH to 0
(1)  709/    1A18 : AE                             plo   R14
(1)  710/    1A19 : B6                             phi   r6
(1)  711/    1A1A : A6                             plo   r6
(1)  712/    1A1B : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  713/    1A1C : 88                             glo   r8                    ; be sure high bit is set
(1)  714/    1A1D : F9 80                          ori   080h
(1)  715/    1A1F : A8                             plo   r8
(1)  716/    1A20 : F8 00                          ldi   0
(1)  717/    1A22 : BC                             phi   R12                    ; set result to 0
(1)  718/    1A23 : AC                             plo   R12
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 49 - 10/29/2020 11:41:47


(1)  719/    1A24 : B7                             phi   F7
(1)  720/    1A25 : A7                             plo   F7
(1)  721/    1A26 : BF                             phi   R15
(1)  722/    1A27 : AF                             plo   R15
(1)  723/    1A28 : BD                             phi   R13
(1)  724/    1A29 : AD                             plo   R13
(1)  725/    1A2A : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  726/    1A2B : 8A                             glo   R10                    ; be sure high bit is set
(1)  727/    1A2C : F9 80                          ori   080h
(1)  728/    1A2E : AA                             plo   R10
(1)  729/    1A2F : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  730/    1A30 : CA 1A 3F                       lbnz  mul_go1               ; jump if not zero
(1)  731/    1A33 : 9B                             ghi   FB
(1)  732/    1A34 : CA 1A 3F                       lbnz  mul_go1
(1)  733/    1A37 : 8A                             glo   R10
(1)  734/    1A38 : CA 1A 3F                       lbnz  mul_go1
(1)  735/    1A3B : 9A                             ghi   R10
(1)  736/    1A3C : C2 1A B7                       lbz   mul_dn                ; jump if muliplier is zero
(1)  737/    1A3F : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  738/    1A40 : F6                             shr
(1)  739/    1A41 : BA                             phi   R10
(1)  740/    1A42 : 8A                             glo   R10
(1)  741/    1A43 : 76                             shrc
(1)  742/    1A44 : AA                             plo   R10
(1)  743/    1A45 : 9B                             ghi   FB
(1)  744/    1A46 : 76                             shrc
(1)  745/    1A47 : BB                             phi   FB
(1)  746/    1A48 : 8B                             glo   FB
(1)  747/    1A49 : 76                             shrc
(1)  748/    1A4A : AB                             plo   FB
(1)  749/    1A4B : CB 1A 8C                       lbnf  mul_no                ; jump if low bit was zero
(1)  750/    1A4E : 89                             glo   F9                    ; res += mul
(1)  751/    1A4F : 52                             str   r2
(1)  752/    1A50 : 87                             glo   F7
(1)  753/    1A51 : F4                             add
(1)  754/    1A52 : A7                             plo   F7
(1)  755/    1A53 : 99                             ghi   F9
(1)  756/    1A54 : 52                             str   r2
(1)  757/    1A55 : 97                             ghi   F7
(1)  758/    1A56 : 74                             adc
(1)  759/    1A57 : B7                             phi   F7
(1)  760/    1A58 : 88                             glo   r8
(1)  761/    1A59 : 52                             str   r2
(1)  762/    1A5A : 8C                             glo   R12
(1)  763/    1A5B : 74                             adc
(1)  764/    1A5C : AC                             plo   R12
(1)  765/    1A5D : 98                             ghi   r8
(1)  766/    1A5E : 52                             str   r2
(1)  767/    1A5F : 9C                             ghi   R12
(1)  768/    1A60 : 74                             adc
(1)  769/    1A61 : BC                             phi   R12
(1)  770/    1A62 : 86                             glo   r6                    ; now high 32 bits
(1)  771/    1A63 : 52                             str   r2
(1)  772/    1A64 : 8D                             glo   R13
(1)  773/    1A65 : F4                             add
(1)  774/    1A66 : AD                             plo   R13
(1)  775/    1A67 : 96                             ghi   r6
(1)  776/    1A68 : 52                             str   r2
(1)  777/    1A69 : 96                             ghi   r6
(1)  778/    1A6A : 52                             str   r2
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 50 - 10/29/2020 11:41:47


(1)  779/    1A6B : 9D                             ghi   R13
(1)  780/    1A6C : 74                             adc
(1)  781/    1A6D : BD                             phi   R13
(1)  782/    1A6E : 8E                             glo   R14
(1)  783/    1A6F : 52                             str   r2
(1)  784/    1A70 : 8F                             glo   R15
(1)  785/    1A71 : 74                             adc
(1)  786/    1A72 : AF                             plo   R15
(1)  787/    1A73 : 9E                             ghi   R14
(1)  788/    1A74 : 52                             str   r2
(1)  789/    1A75 : 9F                             ghi   R15
(1)  790/    1A76 : 74                             adc
(1)  791/    1A77 : BF                             phi   R15
(1)  792/    1A78 : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  793/    1A79 : C2 1A 8C                       lbz   mul_no                ; jump if no carry is needed
(1)  794/    1A7C : 8D                             glo   R13                    ; move the carry on over
(1)  795/    1A7D : FC 01                          adi   1
(1)  796/    1A7F : AD                             plo   R13
(1)  797/    1A80 : 9D                             ghi   R13
(1)  798/    1A81 : 7C 00                          adci  0
(1)  799/    1A83 : BD                             phi   R13
(1)  800/    1A84 : 8F                             glo   R15
(1)  801/    1A85 : 7C 00                          adci  0
(1)  802/    1A87 : AF                             plo   R15
(1)  803/    1A88 : 9F                             ghi   R15
(1)  804/    1A89 : 7C 00                          adci  0
(1)  805/    1A8B : BF                             phi   R15
(1)  806/    1A8C : 60                  mul_no:    irx                         ; recover ct
(1)  807/    1A8D : F0                             ldx
(1)  808/    1A8E : FC 01                          adi   1                     ; increment by 1
(1)  809/    1A90 : 73                             stxd                        ; and put it back
(1)  810/    1A91 : 89                             glo   F9                    ; shift mulL left
(1)  811/    1A92 : FE                             shl
(1)  812/    1A93 : A9                             plo   F9
(1)  813/    1A94 : 99                             ghi   F9
(1)  814/    1A95 : 7E                             shlc
(1)  815/    1A96 : B9                             phi   F9
(1)  816/    1A97 : 88                             glo   r8
(1)  817/    1A98 : 7E                             shlc
(1)  818/    1A99 : A8                             plo   r8
(1)  819/    1A9A : 98                             ghi   r8
(1)  820/    1A9B : 7E                             shlc
(1)  821/    1A9C : B8                             phi   r8
(1)  822/    1A9D : 86                             glo   r6                    ; shift mulH left
(1)  823/    1A9E : FE                             shl
(1)  824/    1A9F : A6                             plo   r6
(1)  825/    1AA0 : 96                             ghi   r6
(1)  826/    1AA1 : 7E                             shlc
(1)  827/    1AA2 : B6                             phi   r6
(1)  828/    1AA3 : 8E                             glo   R14
(1)  829/    1AA4 : 7E                             shlc
(1)  830/    1AA5 : AE                             plo   R14
(1)  831/    1AA6 : 9E                             ghi   R14
(1)  832/    1AA7 : 7E                             shlc
(1)  833/    1AA8 : BE                             phi   R14
(1)  834/    1AA9 : 98                             ghi   r8                    ; see if a carry is needed
(1)  835/    1AAA : C2 1A 2F                       lbz   mul_lp1               ; jump if not
(1)  836/    1AAD : F8 00                          ldi   0                     ; zero the high byte
(1)  837/    1AAF : B8                             phi   r8
(1)  838/    1AB0 : 86                             glo   r6                    ; add in the carry
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 51 - 10/29/2020 11:41:47


(1)  839/    1AB1 : F9 01                          ori   1
(1)  840/    1AB3 : A6                             plo   r6
(1)  841/    1AB4 : C0 1A 2F                       lbr   mul_lp1               ; loop back for more
(1)  842/    1AB7 : 60                  mul_dn:    irx                         ; recover ct
(1)  843/    1AB8 : 72                             ldxa
(1)  844/    1AB9 : AE                             plo   R14                    ; set aside
(1)  845/    1ABA : 72                             ldxa
(1)  846/    1ABB : A6                             plo   r6
(1)  847/    1ABC : 72                             ldxa
(1)  848/    1ABD : B6                             phi   r6
(1)  849/    1ABE : F0                             ldx
(1)  850/    1ABF : BE                             phi   R14
(1)  851/    1AC0 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  852/    1AC1 : B8                             phi   r8
(1)  853/    1AC2 : 8C                             glo   R12
(1)  854/    1AC3 : A8                             plo   r8
(1)  855/    1AC4 : 97                             ghi   F7
(1)  856/    1AC5 : B9                             phi   F9
(1)  857/    1AC6 : 87                             glo   F7
(1)  858/    1AC7 : A9                             plo   F9
(1)  859/    1AC8 : 8E                             glo   R14
(1)  860/    1AC9 : AC                             plo   R12                    ; put ct into RC.0
(1)  861/    1ACA : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  862/    1ACB : FF 02                          smi   2                     ; see if <2
(1)  863/    1ACD : CB 1A E1                       lbnf  mul_nxt1              ; jump if so
(1)  864/    1AD0 : (MACRO)                        ccall    fp_shr_1           ; shift answer to the right 17-03-06
(1)  865/    1AD3 : (MACRO)                        ccall    fp_shr_fd          ; shift resH right 17-03-06
(1)  866/    1AD6 : CB 1A DD                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  867/    1AD9 : 88                             glo   r8                    ; set high bit
(1)  868/    1ADA : F9 80                          ori   080h
(1)  869/    1ADC : A8                             plo   r8
(1)  870/    1ADD : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  871/    1ADE : C0 1A CA                       lbr   mul_lp2               ; loop back to keep checking
(1)  872/    1AE1 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  873/    1AE2 : 72                             ldxa
(1)  874/    1AE3 : A7                             plo   F7
(1)  875/    1AE4 : F0                             ldx                         ; recover answer exponent
(1)  876/    1AE5 : AC                             plo   R12
(1)  877/    1AE6 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  878/    1AE7 : CA 1A F9                       lbnz  mul_lp3a
(1)  879/    1AEA : 8F                             glo   R15
(1)  880/    1AEB : CA 1A F9                       lbnz  mul_lp3a
(1)  881/    1AEE : 9D                             ghi   R13
(1)  882/    1AEF : CA 1A F9                       lbnz  mul_lp3a
(1)  883/    1AF2 : 8D                             glo   R13
(1)  884/    1AF3 : CA 1A F9                       lbnz  mul_lp3a
(1)  885/    1AF6 : C0 1B 0A                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  886/    1AF9 : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  887/    1AFA : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  888/    1AFD : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  889/    1B00 : CB 1A E6                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  890/    1B03 : 88                             glo   r8                    ; set high bit
(1)  891/    1B04 : F9 80                          ori   080h
(1)  892/    1B06 : A8                             plo   r8
(1)  893/    1B07 : C0 1A E6                       lbr   mul_lp3
(1)  894/    1B0A : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  895/    1B0B : BF                             phi   R15                    ; to high R15
(1)  896/    1B0C : C0 17 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  897/    1B0F :                     
(1)  898/    1B0F :                     ; ***************************************
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 52 - 10/29/2020 11:41:47


(1)  899/    1B0F :                     ; *** Convert ascii to floating point ***
(1)  900/    1B0F :                     ; *** RF - buffer to ascii text       ***
(1)  901/    1B0F :                     ; *** Returns: R8:F9 - number         ***
(1)  902/    1B0F :                     ; ***************************************
(1)  903/    1B0F : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  904/    1B10 : FF 20                          smi   ' '                   ; check for space
(1)  905/    1B12 : C2 1B 0F                       lbz   fp_atof               ; move past any spaces
(1)  906/    1B15 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  907/    1B16 : 0F                             ldn   R15                    ; check for possible sign
(1)  908/    1B17 : FF 2D                          smi   '-'                   ; first check for minus
(1)  909/    1B19 : CA 1B 23                       lbnz   atof_nm              ; jump if not minus
(1)  910/    1B1C : F8 80                          ldi   080h                  ; high bit set for minus
(1)  911/    1B1E : 73                             stxd                        ; place onto stack
(1)  912/    1B1F : 1F                             inc   R15                    ; move past sign
(1)  913/    1B20 : C0 1B 2D                       lbr   atof_go1              ; and continue
(1)  914/    1B23 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  915/    1B25 : 73                             stxd                        ; place onto stack
(1)  916/    1B26 : 0F                             ldn   R15                    ; now check for + sign
(1)  917/    1B27 : FF 2B                          smi   '+'
(1)  918/    1B29 : CA 1B 2D                       lbnz  atof_go1              ; jump if not plus
(1)  919/    1B2C : 1F                             inc   R15                    ; move past plus sign
(1)  920/    1B2D : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  921/    1B2F : B8                             phi   r8
(1)  922/    1B30 : A8                             plo   r8
(1)  923/    1B31 : B9                             phi   F9
(1)  924/    1B32 : A9                             plo   F9
(1)  925/    1B33 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  926/    1B34 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  927/    1B37 : CB 1B 64                       lbnf  atof_no1              ; jump if not
(1)  928/    1B3A : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  929/    1B3B : BA                             phi   R10
(1)  930/    1B3C : 88                             glo   r8
(1)  931/    1B3D : AA                             plo   R10
(1)  932/    1B3E : 99                             ghi   F9
(1)  933/    1B3F : BB                             phi   FB
(1)  934/    1B40 : 89                             glo   F9
(1)  935/    1B41 : AB                             plo   FB
(1)  936/    1B42 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  937/    1B45 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  938/    1B48 : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  939/    1B4B : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  940/    1B4E : 4F                             lda   R15                    ; get number
(1)  941/    1B4F : FF 30                          smi   '0'                   ; convert to binary
(1)  942/    1B51 : 52                             str   r2                    ; setup for add
(1)  943/    1B52 : 89                             glo   F9                    ; add in next digit
(1)  944/    1B53 : F4                             add
(1)  945/    1B54 : A9                             plo   F9
(1)  946/    1B55 : 99                             ghi   F9                    ; propagate carry
(1)  947/    1B56 : 7C 00                          adci  0
(1)  948/    1B58 : B9                             phi   F9
(1)  949/    1B59 : 88                             glo   r8
(1)  950/    1B5A : 7C 00                          adci  0
(1)  951/    1B5C : A8                             plo   r8
(1)  952/    1B5D : 98                             ghi   r8
(1)  953/    1B5E : 7C 00                          adci  0
(1)  954/    1B60 : B8                             phi   r8
(1)  955/    1B61 : C0 1B 33                       lbr   atof_lp1              ; loop until no more digits
(1)  956/    1B64 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  957/    1B65 : FF 2E                          smi   '.'
(1)  958/    1B67 : CA 1B 6B                       lbnz  atof_ndp              ; jump if none
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 53 - 10/29/2020 11:41:47


(1)  959/    1B6A : 1F                             inc   R15                    ; move past decimal
(1)  960/    1B6B : F8 1C               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  961/    1B6D : BA                             phi   R10
(1)  962/    1B6E : F8 A3                          ldi   scratch&255
(1)  963/    1B70 : AA                             plo   R10
(1)  964/    1B71 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  965/    1B73 : AC                             plo   R12
(1)  966/    1B74 : F8 00               atof_lpx:  ldi   0
(1)  967/    1B76 : 5A                             str   R10
(1)  968/    1B77 : 1A                             inc   R10
(1)  969/    1B78 : 2C                             dec   R12
(1)  970/    1B79 : 8C                             glo   R12
(1)  971/    1B7A : CA 1B 74                       lbnz  atof_lpx
(1)  972/    1B7D : F8 1C                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  973/    1B7F : BA                             phi   R10
(1)  974/    1B80 : F8 A4                          ldi   (scratch+1)&255
(1)  975/    1B82 : AA                             plo   R10
(1)  976/    1B83 : F8 01                          ldi   1                     ; setup count
(1)  977/    1B85 : AC                             plo   R12
(1)  978/    1B86 : F8 00                          ldi   0                     ; setup exp flag
(1)  979/    1B88 : BC                             phi   R12
(1)  980/    1B89 : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  981/    1B8A : FF 11                          smi   17
(1)  982/    1B8C : C2 1B A5                       lbz   atof_dn3              ; jump if so
(1)  983/    1B8F : 0F                             ldn   R15                    ; get character
(1)  984/    1B90 : (MACRO)                        ccall    f_isnum                 ; is it numeric
(1)  985/    1B93 : CB 1B A5                       lbnf  atof_dn3              ; jump if not
(1)  986/    1B96 : 4F                             lda   R15                    ; get character
(1)  987/    1B97 : FF 30                          smi   '0'                   ; converto to binary
(1)  988/    1B99 : 5A                             str   R10                    ; write into bcd area
(1)  989/    1B9A : 1A                             inc   R10
(1)  990/    1B9B : 1C                             inc   R12                    ; increment count
(1)  991/    1B9C : CA 1B 89                       lbnz  atof_lp2              ; loop back until done
(1)  992/    1B9F : F8 01                          ldi   1                     ; set non zero flag
(1)  993/    1BA1 : BC                             phi   R12
(1)  994/    1BA2 : C0 1B 89                       lbr   atof_lp2
(1)  995/    1BA5 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  996/    1BA6 : CA 1B BF                       lbnz  atof_nz
(1)  997/    1BA9 : 98                             ghi   r8                    ; check for non-zero integer
(1)  998/    1BAA : CA 1B BF                       lbnz  atof_nz
(1)  999/    1BAD : 88                             glo   r8
(1) 1000/    1BAE : CA 1B BF                       lbnz  atof_nz
(1) 1001/    1BB1 : 99                             ghi   F9
(1) 1002/    1BB2 : CA 1B BF                       lbnz  atof_nz
(1) 1003/    1BB5 : 89                             glo   F9
(1) 1004/    1BB6 : CA 1B BF                       lbnz  atof_nz
(1) 1005/    1BB9 : 60                             irx                         ; recover sign
(1) 1006/    1BBA : F0                             ldx
(1) 1007/    1BBB : B8                             phi   r8                    ; put in high of zero
(1) 1008/    1BBC : C0 1C 92                       lbr	atof_end               ; and return
(1) 1009/    1BBF : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1010/    1BC1 : BC                             phi   R12
(1) 1011/    1BC2 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1012/    1BC3 : FA 80                          ani   080h
(1) 1013/    1BC5 : CA 1C 0F                       lbnz  atof_dn4              ; jump if so
(1) 1014/    1BC8 : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1015/    1BCB : F8 1C                          ldi   scratch>>8          ; point to bcd number
(1) 1016/    1BCD : BA                             phi   R10
(1) 1017/    1BCE : F8 A3                          ldi   255&scratch
(1) 1018/    1BD0 : AA                             plo   R10
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 54 - 10/29/2020 11:41:47


(1) 1019/    1BD1 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1020/    1BD3 : 5A                             str   R10
(1) 1021/    1BD4 : F8 1C                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1022/    1BD6 : BA                             phi   R10
(1) 1023/    1BD7 : F8 B2                          ldi   255&(scratch+15)
(1) 1024/    1BD9 : AA                             plo   R10
(1) 1025/    1BDA : F8 00                          ldi   0                     ; set carry forward
(1) 1026/    1BDC : AE                             plo   R14
(1) 1027/    1BDD : F8 10                          ldi   16                    ; setup count
(1) 1028/    1BDF : AC                             plo   R12
(1) 1029/    1BE0 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1030/    1BE1 : 52                             str   r2                    ; in memory for add
(1) 1031/    1BE2 : 0A                             ldn   R10                    ; get bcd digit
(1) 1032/    1BE3 : F4                             add                         ; add in carry
(1) 1033/    1BE4 : 52                             str   r2                    ; place into memory
(1) 1034/    1BE5 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1035/    1BE6 : F4                             add                         ; digit now doubled with carry
(1) 1036/    1BE7 : 5A                             str   R10                    ; put it back
(1) 1037/    1BE8 : FF 0A                          smi   10
(1) 1038/    1BEA : CB 1B F1                       lbnf  atof_no4              ; jump if below 10
(1) 1039/    1BED : 5A                             str   R10                    ; store value - 10
(1) 1040/    1BEE : F8 01                          ldi   1                     ; carry set to 1
(1) 1041/    1BF0 : C8                             lskp                        ; skip next instruction
(1) 1042/    1BF1 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1043/    1BF3 : AE                             plo   R14
(1) 1044/    1BF4 : 2A                             dec   R10                    ; move to previous digit
(1) 1045/    1BF5 : 2C                             dec   R12                    ; decrement digit count
(1) 1046/    1BF6 : 8C                             glo   R12                    ; see if done
(1) 1047/    1BF7 : CA 1B E0                       lbnz  atof_lp4              ; jump if not
(1) 1048/    1BFA : F8 1C                          ldi   scratch>>8	       ; point to first digit
(1) 1049/    1BFC : BA                             phi   R10
(1) 1050/    1BFD : F8 A3                          ldi   255&scratch
(1) 1051/    1BFF : AA                             plo   R10
(1) 1052/    1C00 : 0A                             ldn   R10                    ; retrieve it
(1) 1053/    1C01 : C2 1C 08                       lbz   atof_nc4              ; jump if no carry
(1) 1054/    1C04 : 89                             glo   F9                    ; add in the carry
(1) 1055/    1C05 : F9 01                          ori   1
(1) 1056/    1C07 : A9                             plo   F9
(1) 1057/    1C08 : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1058/    1C09 : FC 01                          adi   1
(1) 1059/    1C0B : BC                             phi   R12
(1) 1060/    1C0C : C0 1B C2                       lbr   atof_lp3              ; loop until full
(1) 1061/    1C0F : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1062/    1C10 : 52                             str   r2                    ; into memory
(1) 1063/    1C11 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1064/    1C13 : F7                             sm
(1) 1065/    1C14 : FC 7F                          adi   127                   ; add in bias
(1) 1066/    1C16 : BD                             phi   R13                    ; set aside
(1) 1067/    1C17 : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1068/    1C18 : A9                             plo   F9
(1) 1069/    1C19 : 88                             glo   r8
(1) 1070/    1C1A : B9                             phi   F9
(1) 1071/    1C1B : 98                             ghi   r8
(1) 1072/    1C1C : FE                             shl                         ; shift out high bit
(1) 1073/    1C1D : A8                             plo   r8
(1) 1074/    1C1E : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1075/    1C1F : F6                             shr
(1) 1076/    1C20 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1077/    1C21 : 88                             glo   r8                    ; get mantissa
(1) 1078/    1C22 : 76                             shrc                        ; shift in bit 0 of exponent
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 55 - 10/29/2020 11:41:47


(1) 1079/    1C23 : A8                             plo   r8                    ; and write it
(1) 1080/    1C24 : 60                             irx                         ; point to sign
(1) 1081/    1C25 : 98                             ghi   r8                    ; high byte
(1) 1082/    1C26 : F1                             or                          ; set sign
(1) 1083/    1C27 : B8                             phi   r8                    ; done with base conversion
(1) 1084/    1C28 : 0F                             ldn   R15                    ; get next byte
(1) 1085/    1C29 : FF 65                          smi   'e'                   ; check for exponents
(1) 1086/    1C2B : C2 1C 34                       lbz   atof_exp
(1) 1087/    1C2E : 0F                             ldn   R15
(1) 1088/    1C2F : FF 45                          smi   'E'
(1) 1089/    1C31 : CA 1C 92                       lbnz  atof_end
(1) 1090/    1C34 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1091/    1C35 : 0F                             ldn   R15                    ; check for sign
(1) 1092/    1C36 : FF 2D                          smi   '-'
(1) 1093/    1C38 : C2 1C 45                       lbz   atof_n
(1) 1094/    1C3B : 0F                             ldn   R15
(1) 1095/    1C3C : FF 2B                          smi   '+'
(1) 1096/    1C3E : C2 1C 42                       lbz   atof_p
(1) 1097/    1C41 : 2F                             dec   R15                    ; positive if no sign
(1) 1098/    1C42 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1099/    1C44 : C8                             lskp
(1) 1100/    1C45 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1101/    1C47 : BC                             phi   R12                    ; place into sign variable
(1) 1102/    1C48 : 1F                             inc   R15                    ; move past sign
(1) 1103/    1C49 : F8 00                          ldi   0                     ; setup intial count
(1) 1104/    1C4B : AC                             plo   R12
(1) 1105/    1C4C : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1106/    1C4D : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1107/    1C50 : CB 1C 62                       lbnf  atof_dn5              ; jump if not
(1) 1108/    1C53 : 8C                             glo   R12                    ; make copy of exponent
(1) 1109/    1C54 : 52                             str   r2
(1) 1110/    1C55 : F6                             shr                         ; multiply by 2
(1) 1111/    1C56 : F6                             shr                         ; by 4
(1) 1112/    1C57 : F4                             add                         ; by 5
(1) 1113/    1C58 : F6                             shr                         ; by 10
(1) 1114/    1C59 : 52                             str   r2                    ; put here for add
(1) 1115/    1C5A : 4F                             lda   R15                    ; recover number
(1) 1116/    1C5B : FF 30                          smi   '0'                   ; convert to binary
(1) 1117/    1C5D : F4                             add                         ; add with total
(1) 1118/    1C5E : AC                             plo   R12                    ; copy back to R12
(1) 1119/    1C5F : C0 1C 4C                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1120/    1C62 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1121/    1C63 : C2 1C 92                       lbz   atof_end              ; jump if so
(1) 1122/    1C66 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1123/    1C67 : 8C                             glo   R12                    ; save count
(1) 1124/    1C68 : 73                             stxd
(1) 1125/    1C69 : 9C                             ghi   R12                    ; save sign
(1) 1126/    1C6A : 73                             stxd
(1) 1127/    1C6B : 8F                             glo   R15
(1) 1128/    1C6C : 73                             stxd
(1) 1129/    1C6D : 9F                             ghi   R15
(1) 1130/    1C6E : 73                             stxd
(1) 1131/    1C6F : F8 41                          ldi   041h                  ; setup 10.0
(1) 1132/    1C71 : BA                             phi   R10
(1) 1133/    1C72 : F8 20                          ldi   020h
(1) 1134/    1C74 : AA                             plo   R10
(1) 1135/    1C75 : F8 00                          ldi   0
(1) 1136/    1C77 : BB                             phi   FB
(1) 1137/    1C78 : AB                             plo   FB
(1) 1138/    1C79 : 9C                             ghi   R12
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(LCC1802fp.inc) - Page 56 - 10/29/2020 11:41:47


(1) 1139/    1C7A : C2 1C 83                       lbz   atof_div              ; jump if negative
(1) 1140/    1C7D : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1141/    1C80 : C0 1C 86                       lbr   atof_go5              ; clean up call
(1) 1142/    1C83 :                     atof_div:  				;18-02-09 moved label off macro statement
(1) 1143/    1C83 : (MACRO)                        Ccall fp_div                 ; divide by 10
(1) 1144/    1C86 : 60                  atof_go5:  irx                         ; recover variables
(1) 1145/    1C87 : 72                             ldxa
(1) 1146/    1C88 : BF                             phi   R15
(1) 1147/    1C89 : 72                             ldxa
(1) 1148/    1C8A : AF                             plo   R15
(1) 1149/    1C8B : 72                             ldxa
(1) 1150/    1C8C : BC                             phi   R12
(1) 1151/    1C8D : F0                             ldx
(1) 1152/    1C8E : AC                             plo   R12
(1) 1153/    1C8F : C0 1C 62                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1154/    1C92 :                     atof_end:
(1) 1155/    1C92 : 12                  	   inc	r2	;wjr release work area
(1) 1156/    1C93 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1157/    1C98 : (MACRO)             	   popr R12	;wjr
(1) 1158/    1C9D : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1159/    1CA2 : (MACRO)             	   Cretn
(1) 1160/    1CA3 : 00 00               scratch:   db	00,00
    1575/    1CA5 :                     	include IO1802.inc
(1)    1/    1CA5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    1CA5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    1CA5 :                     ;18-02-23 changed label + to $$no0 in _inp: to eliminate this style of temporary
(1)    4/    1CA5 :                     	align 64
(1)    5/    1CC0 :                     ;;function_start IO1802.inc void function(void)
(1)    6/    1CC0 :                     _putc:
(1)    7/    1CC0 :                     _out5:	
(1)    8/    1CC0 : 8C                  	glo	regArg1
(1)    9/    1CC1 : 22                  	dec	sp
(1)   10/    1CC2 : 52                  	str	sp
(1)   11/    1CC3 : 65                  	out	5
(1)   12/    1CC4 : (MACRO)             	Cretn
(1)   13/    1CC5 :                     _inp:		;raw port input
(1)   14/    1CC5 :                     		;stores a small tailored program on the stack and executes it
(1)   15/    1CC5 : 22                  	dec	sp	;work backwards
(1)   16/    1CC6 : F8 D3               	ldi	0xD3	;return instruction
(1)   17/    1CC8 : 73                  	stxd		
(1)   18/    1CC9 : 8C                  	glo	regarg1	;get the port number
(1)   19/    1CCA : FA 07               	ani	0x07	;clean it
(1)   20/    1CCC : 32 DC               	bz	$$no0	; inp(0) isn't valid
(1)   21/    1CCE : F9 68               	ori	0x68	;make it an input instruction
(1)   22/    1CD0 : 73                  	stxd		;store it for execution
(1)   23/    1CD1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   24/    1CD5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   25/    1CD6 : D8                  	sep	rt1	;execute it
(1)   26/    1CD7 :                     ;we will come back to here with the input byte in D
(1)   27/    1CD7 : 12                  	inc	sp	;step over the work area
(1)   28/    1CD8 : AF                  	plo	retVal	;save it to return
(1)   29/    1CD9 : F8 00               	ldi	0
(1)   30/    1CDB : BF                  	phi	retval	;clear top byte
(1)   31/    1CDC : 12                  $$no0	inc	sp	;need to get rid of the 6x instruction
(1)   32/    1CDD : 12                  	inc	sp	;and the D3
(1)   33/    1CDE : (MACRO)             	Cretn		;and we're done
(1)   34/    1CDF :                     	
(1)   35/    1CDF :                     _out:		;raw port output
(1)   36/    1CDF :                     		;stores a small tailored program on the stack and executes it
(1)   37/    1CDF :                     		;this could be bolder:
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm(IO1802.inc) - Page 57 - 10/29/2020 11:41:47


(1)   38/    1CDF :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   39/    1CDF :                     		;then SEP sp
(1)   40/    1CDF :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   41/    1CDF :                     		;saves 6 instructions but it's a bit tricky.
(1)   42/    1CDF : 22                  	dec	sp	;work backwards
(1)   43/    1CE0 : F8 D3               	ldi	0xD3	;return instruction
(1)   44/    1CE2 : 73                  	stxd		
(1)   45/    1CE3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   46/    1CE7 : 8C                  	glo	regarg1	;get the port number
(1)   47/    1CE8 : FA 07               	ani	0x07	;clean it
(1)   48/    1CEA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   49/    1CEC : 73                  	stxd		;store it for execution
(1)   50/    1CED : 8D                  	glo	regarg2	;get the byte to be written
(1)   51/    1CEE : 52                  	str	sp	;store it where sp points
(1)   52/    1CEF : D8                  	sep	rt1	;execute it
(1)   53/    1CF0 :                     ;we will come back to here with sp stepped up by one
(1)   54/    1CF0 : 12                  	inc	sp	;need to get rid of the 6x instruction
(1)   55/    1CF1 : 12                  	inc	sp	;and the D3
(1)   56/    1CF2 : (MACRO)             	Cretn		;and we're done
(1)   57/    1CF3 :                     ;;function_end IO1802.inc
(1)   58/    1CF3 :                     
(1)   59/    1CF3 :                     	
(1)   60/    1CF3 :                     	
(1)   61/    1CF3 :                     
    1576/    1CF3 :                     	include LCC1802finale.inc
(1)    1/    1CF3 :                     ;LCC1802finale.inc is the last code processed by the assembler
(1)    2/    1CF3 :                     ;20-05-23 finale used to include comx/comx_final.inc with  comx load feature
(1)    3/    1CF3 :                     ;20-06-11 renamed to basic_final to reflect this is a final addition to add BASIC routine
(1)    4/    1CF3 :                     
(1)    5/    1CF3 : =>UNDEFINED           IFDEF LCCCX
(1)    6/    1CF3 :                         include devkit/system/basic_final.inc
(1)    7/    1CF3 : [5]                   ENDIF
    1577/    1CF3 :                     
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 58 - 10/29/2020 11:41:47


  Symbol Table (* = unused):
  --------------------------

 ADD_A1NZ :                    180A C |  ADD_A2NZ :                    181B C |
 ADD_FNL :                     18BF C |  ADD_LP1 :                     1862 C |
 ADD_LP1DN :                   1877 C |  ADD_NM :                      1886 C |
 ADD_NO :                      18A8 C |  ADD_NS :                      1850 C |
 ADD_NX :                      18EE C |  ADD_NZ :                      18E0 C |
 AGAIN201 :                    1345 C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
 ATOF_DIV :                    1C83 C |  ATOF_DN3 :                    1BA5 C |
 ATOF_DN4 :                    1C0F C |  ATOF_DN5 :                    1C62 C |
 ATOF_END :                    1C92 C |  ATOF_EXP :                    1C34 C |
 ATOF_GO1 :                    1B2D C |  ATOF_GO5 :                    1C86 C |
 ATOF_LP1 :                    1B33 C |  ATOF_LP2 :                    1B89 C |
 ATOF_LP3 :                    1BC2 C |  ATOF_LP4 :                    1BE0 C |
 ATOF_LP5 :                    1C4C C |  ATOF_LPX :                    1B74 C |
 ATOF_N :                      1C45 C |  ATOF_NC4 :                    1C08 C |
 ATOF_NDP :                    1B6B C |  ATOF_NM :                     1B23 C |
 ATOF_NO1 :                    1B64 C |  ATOF_NO4 :                    1BF1 C |
 ATOF_NZ :                     1BBF C |  ATOF_P :                      1C42 C |
*BIGENDIAN :                      0 - |  BITLOOP166 :                  0F43 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECK_SUB204 :                1496 C |  CKNEXT166 :                   0F92 C |
 CKTOP166 :                    0F2E C |  CLRLP166 :                    0F1F C |
 CODELOC :                        0 - |  COMPUTEQUOT201 :              135B C |
*CONSTPI :        3.141592653589793 - |  CPUSPEED :                  186A00 - |
*CSEG :                           1 - |  CVFI4 :                       1700 C |
 CVIF4 :                       1600 C | *DATE :                "10/29/2020" - |
 DCKLP166 :                    0F46 C |  DIV_A1NZ :                    190C C |
 DIV_A2NZ :                    192A C |  DIV_GO :                      198E C |
 DIV_GO1 :                     197B C |  DIV_LP :                      1968 C |
 DIV_NOPE :                    19C9 C |  DIV_Z :                       19DB C |
 DNOADD166 :                   0F4E C |  DONE166 :                     0F9C C |
 DONE202 :                     13BC C |  DONE205 :                     1576 C |
 DONE211 :                     166F C |  DONE212 :                     1761 C |
 DSHLP166 :                    0F62 C |  ENDLP203 :                    1461 C |
 F7 :                             7 - |  F9 :                             9 - |
 FAILS :                       176E C | *FALSE :                          0 - |
 FB :                            0B - |  FP_ADD :                      17F1 C |
 FP_ADD_12 :                   178C C |  FP_ATOF :                     1B0F C |
 FP_DIV :                      18FB C |  FP_GETEXP :                   17DF C |
 FP_GETSGN :                   17EA C |  FP_MUL :                      19EB C |
 FP_SC_CLN :                   17C0 C |  FP_SC_UP :                    17B0 C |
 FP_SHL_1 :                    177F C |  FP_SHR_1 :                    1772 C |
 FP_SHR_FD :                   17A3 C |  FP_SUB :                      18F4 C |
*FULLPMMU :                       1 - |  F_ISNUM :                     1762 C |
*HAS64 :                          0 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *L1 :                           0A8 C |
 L100 :                        0B79 C |  L101 :                        0B8B C |
 L102 :                        0BA3 C |  L103 :                        0BCC C |
 L104 :                        0BE6 C |  L105 :                        0BEA C |
 L106 :                        0C1D C |  L107 :                        0CD0 C |
 L109 :                        0C43 C |  L11 :                         113C C |
 L111 :                        0C6D C |  L112 :                        0CCB C |
 L113 :                        0CD0 C |  L114 :                        0D03 C |
 L116 :                        0CE7 C |  L118 :                        0B11 C |
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 59 - 10/29/2020 11:41:47


 L119 :                        0B2C C |  L12 :                         1104 C |
 L120 :                        0AFD C | *L122 :                        0B5E C |
*L123 :                        0D6A C |  L124 :                        103E C |
 L125 :                        0D67 C | *L126 :                        0D67 C |
*L128 :                        0DD5 C |  L129 :                        0D9A C |
 L13 :                         10AC C |  L130 :                        0DB8 C |
 L132 :                        0DD1 C | *L133 :                        0E2E C |
 L134 :                        0E0D C |  L135 :                        0E19 C |
*L137 :                        0E69 C |  L138 :                        0E59 C |
 L139 :                        0E5D C |  L14 :                         1055 C |
*L141 :                        0FE1 C | *L15 :                          211 C |
 L16 :                          0C6 C | *L17 :                          1FB C |
 L2 :                          1190 C |  L20 :                          1FB C |
 L24 :                          1A0 C |  L25 :                          1A8 C |
*L27 :                          26E C |  L28 :                          22C C |
*L29 :                          24F C |  L3 :                            18 C |
 L32 :                         1052 C |  L33 :                         1050 C |
 L34 :                          2F3 C |  L35 :                          28F C |
*L36 :                          2E4 C |  L38 :                          2E7 C |
 L39 :                          2D9 C | *L4 :                            3C C |
 L42 :                          2CC C |  L43 :                          2D2 C |
 L44 :                          2E4 C | *L46 :                          313 C |
 L47 :                          309 C |  L48 :                          30B C |
*L50 :                          33F C |  L51 :                          328 C |
 L52 :                          33B C | *L55 :                          602 C |
 L56 :                          44D C |  L57 :                          458 C |
 L58 :                         104C C |  L59 :                         1048 C |
 L60 :                          458 C |  L62 :                          498 C |
 L64 :                          5F6 C | *L66 :                          78E C |
 L67 :                          6D0 C |  L68 :                          6E0 C |
 L69 :                          6E9 C |  L7 :                            52 C |
 L70 :                          76B C |  L72 :                          6F0 C |
*L73 :                          6F0 C |  L75 :                          6FB C |
 L76 :                          75A C |  L79 :                          724 C |
*L8 :                            67 C | *L80 :                          863 C |
 L81 :                          821 C | *L83 :                          8B4 C |
*L84 :                          90A C | *L85 :                          96F C |
*L86 :                          9DD C |  L87 :                          9B7 C |
 L88 :                          9DD C | *L89 :                         0A42 C |
*L90 :                         0D24 C |  L91 :                         0A91 C |
 L92 :                         0D20 C |  L94 :                         0AAB C |
 L95 :                         0D20 C |  L97 :                         0D03 C |
 L98 :                         0D20 C |  LCC1802INIT :                 11BD C |
*LISTON :                         1 - |  LOOP203 :                     140F C |
 LSH212 :                      172B C | *MACEXP :                         7 - |
 MEMADDR :                       0E - |  MLOOP204 :                    1477 C |
 MOMCPU :                      1802 - | *MOMCPUNAME :                "1802" - |
 MSLF199 :                     1222 C |  MULRDONE200 :                 1324 C |
 MULRLP200 :                   1304 C |  MULRNOADD200 :                1316 C |
 MULRSHFT200 :                 131C C |  MUL_DN :                      1AB7 C |
 MUL_GO1 :                     1A3F C |  MUL_LP1 :                     1A2F C |
 MUL_LP2 :                     1ACA C |  MUL_LP2A :                    1ADD C |
 MUL_LP3 :                     1AE6 C |  MUL_LP3A :                    1AF9 C |
 MUL_LP4 :                     1B0A C |  MUL_NO :                      1A8C C |
 MUL_NXT1 :                    1AE1 C | *NESTMAX :                      100 - |
 NEY0Y201 :                    1374 C |  NO0281 :                      1CDC C |
 NORESTORE203 :                145D C |  NXT211 :                      1630 C |
 OUT201 :                      1382 C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      176B C |
 POS1202 :                     139A C |  POS1205 :                     1526 C |
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 60 - 10/29/2020 11:41:47


 POS2202 :                     13AA C |  POS2205 :                     154D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                           0A - |  R11 :                           0B - |
 R12 :                           0C - |  R13 :                           0D - |
 R14 :                           0E - |  R15 :                           0F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                       0C - |
 REGARG2 :                       0D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                        0F - |
*RL0 :                            1 - |  RL10 :                          0B - |
 RL12 :                          0D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                         0D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                         0E - |  SCRATCH :                     1CA3 C |
 SETSGN211 :                   1668 C |  SGNPOS211 :                   1639 C |
 SHDN211 :                     165F C |  SHIFT204 :                    14AE C |
 SHL211 :                      164B C |  SHR212 :                      1719 C |
 SIGN212 :                     173B C |  SP :                             2 - |
 SUBOVHD :                       1B - |  TESTEXIT201 :                 136A C |
*TIME :                  "11:41:46" - | *TRUE :                           1 - |
 UPNXT166 :                    0F7B C |  VERSION :                     142F - |
*Z80SYNTAX :                      0 - |  _00000189 :                   11D7 C |
 _CALL :                       1201 C |  _DIE189 :                     11DA C |
 _DIVI2 :                      138B C |  _DIVI4 :                      1500 C |
 _DIVU2 :                      1325 C |  _DIVU4 :                      1400 C |
 _DOWN :                       1002 C |  _DUBDABX :                    0F00 C |
*_EXIT :                       0D41 C |  _FTOA :                        38C C |
*_INP :                        1CC5 C |  _ITOA :                        627 C |
 _LTOA :                        7A9 C |  _MAIN :                          3 C |
*_MEMCMP :                     0D6F C | *_MEMCPY :                     0DEA C |
*_MEMSET :                     0E3E C | *_MODI2 :                      11EA C |
*_MODI4 :                      1583 C | *_MODU2 :                      11E2 C |
*_MODU4 :                      1577 C |  _MULT_NUMS :                   36C C |
*_MULU2 :                      1300 C | *_MULU4 :                      1466 C |
*_NSTDLIBINCLUDER :            0E74 C | *_ONEMS :                      1220 C |
 _OUT :                        1CDF C | *_OUT4 :                       11F2 C |
*_OUT5 :                       1CC0 C |  _PRINT :                       220 C |
 _PRINTF :                     0A47 C |  _PRINTFLT :                    913 C |
 _PRINTINT :                    87B C |  _PRINTLINT :                   8BD C |
 _PRINTSTR :                    319 C | *_PUTC :                       1CC0 C |
 _PUTX :                        9E2 C |  _PUTXN :                       978 C |
 _QUEENS :                      0B2 C |  _RETURN :                     1211 C |
 _ROUND_NUMS :                  34C C |  _ROWS :                       0FF2 C |
*_SETQOFF :                    11E0 C | *_SETQON :                     11DE C |
*_STRCMP :                     0FCA C |  _STRCPY :                     0FC0 C |
 _STRLEN :                      2FE C | *_STRNCMP :                     278 C |
 _UP :                         1020 C |  _X :                          0FE2 C |
 __STRCMPGT :                  0FDF C |  __STRCMPLP :                  0FCF C |
 __STRCMPNE :                  0FDA C |  __STRCPY :                    0FC4 C |

    338 symbols
     80 unused symbols

 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 61 - 10/29/2020 11:41:47


  Defined Macros:
  ---------------

ALU1                                  | ALU2                                 
ALU2I                                 | ALU2RRS                              
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CCALLD                                | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | GLOBSS                               
INC4                                  | INCM                                 
JCF4                                  | JCI1I                                
JCI2                                  | JCI2I                                
JCI4                                  | JCU1                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI1                                
JEQI2                                 | JEQI4                                
JEQU1I                                | JEQU2I                               
JNEU1                                 | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | ORGC                                 
ORGD                                  | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
TESTSUB                               | ZEXT                                 
 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 62 - 10/29/2020 11:41:47


ZEXT4                                 |

    115 macros

 AS V1.42 Beta [Bld 172] - Source File 8q.olasm - Page 63 - 10/29/2020 11:41:47


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.13 seconds assembly time

   4553 lines source file
  12160 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
