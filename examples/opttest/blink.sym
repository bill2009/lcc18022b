segment data
export PIN4
global PIN4 type=unsigned int sclass=auto scope=GLOBAL flags=0 ref=0.000000
defconst unsigned.1 0
export mysetqOn
segment text
function mysetqOn type=void function(void) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
blockbeg off=0
blockend off=0
;void mysetqOn(){
blink.c:13.15:
;	asm("	seq\n");
blink.c:14.0:
;}
blink.c:15.0:
 1:
maxoff=0
export main
function main type=void function(void) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=4
blockbeg off=0
blockbeg off=0
blockend off=0
blockend off=0
;{
blink.c:17.0:
 2. ADDRGP2 4
1' JUMPV #2
 3:
;	while(1){
blink.c:18.9:
;		mysetqOn();
blink.c:19.2:
 2. ADDRGP2 mysetqOn
1' CALLV #2 {void function(void)}
;		delay(500);
blink.c:20.2:
 2. CNSTU2 500
1' ARGU2 #2 2 1
4. ADDRGP2 delay
3' CALLV #4 {void function(unsigned long)}
;		setqOff();
blink.c:21.2:
 2. ADDRGP2 setqOff
1' CALLI1 #2 {int function}
;		delay(500);
blink.c:22.2:
 2. CNSTU2 500
1' ARGU2 #2 2 1
4. ADDRGP2 delay
3' CALLV #4 {void function(unsigned long)}
;	}
blink.c:23.1:
 4:
;	while(1){
blink.c:18.7:
 2. ADDRGP2 3
1' JUMPV #2
;}
blink.c:24.0:
 2:
maxoff=0
export delay
function delay type=void function(unsigned long) sclass=auto scope=GLOBAL flags=0 ref=20.000000 ncalls=1
caller howlong type=unsigned long sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee howlong type=unsigned long sclass=register scope=PARAM flags=0 offset=0 ref=10.000000
blockbeg off=0
local i type=unsigned long sclass=register scope=LOCAL flags=0 offset=0 ref=21.000000
blockbeg off=2
blockend off=2
blockend off=2
 2. ADDRFP2 howlong
4. ADDRFP2 howlong
3. INDIRU2 #4
1' ASGNU2 #2 #3 2 1
;void delay(uint16_t howlong){
blink.c:26.28:
;	for (i=1;i!=howlong;i++){
blink.c:28.6:
 2. ADDRLP2 i
3. CNSTU2 1
1' ASGNU2 #2 #3 2 1
 2. ADDRGP2 10
1' JUMPV #2
 7:
blink.c:28.25:
;		oneMs();
blink.c:29.2:
 2. ADDRGP2 oneMs
1' CALLI1 #2 {int function}
;	}
blink.c:30.1:
 8:
;	for (i=1;i!=howlong;i++){
blink.c:28.21:
 2. ADDRLP2 count=2 i
4. INDIRU2 #2
5. CNSTU2 1
3. ADDU2 #4 #5
1' ASGNU2 #2 #3 2 1
 10:
blink.c:28.10:
 3. ADDRLP2 i
2. INDIRU2 #3
5. ADDRFP2 howlong
4. INDIRU2 #5
1' NEU2 #2 #4 7
;}
blink.c:31.0:
 6:
maxoff=2
export olduinoincluder
function olduinoincluder type=void function(void) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
blockbeg off=0
blockend off=0
;void olduinoincluder(){
blink.c:32.22:
;	asm("\tinclude olduino.inc\n");
blink.c:33.0:
;}
blink.c:39.0:
 11:
maxoff=0

import oneMs
import setqOff
import digitalRead
import digitalWrite
progend
