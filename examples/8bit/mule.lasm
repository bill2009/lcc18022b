; generated by lcc-xr18CX $Version: 5.2 - XR18CX $ on Wed Jan 27 10:36:30 2021

SP:	equ	2 
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802proloCX.inc
	listing on
	orgc
;;function_start _main void function(void)
_main: 
	reserve 14
;{
;	float frog=-1.234;
	ld4 RL10,'D',(L2),0
	st4 RL10,'O',sp,(8+1)
;D*E*A*D  RL10
;	printf("test frog=%f\n",frog);
	ldaD R12,L3
	ld4 RL10,'O',sp,(8+1)
	st4 RL10,'O',sp,(4+1)
;D*E*A*D  RL10
	Ccall _printf
;}
L1:
	release 14
	Cretn

;;function_end$$ _main
;;function_start _strncmp long int function(pointer to const char,pointer to const char,unsigned long)
_strncmp:		
	reserve 6
	pushr R6
	pushr R7
	ld4 RL6,'O',sp,(16+1)
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L8
L5:
;	if (*s1 != *s2)
	ldn1 R11,R12	
	zExt R11 
	ldn1 R10,R13	
	zExt R10 
	jeqI2 R11,R10,L9
;D*E*A*D  R11
;D*E*A*D  R10
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? (int16_t)-1 : (int16_t)+1);
	ldn1 R11,R12	
	zExt R11 
	ldn1 R10,R13	
	zExt R10 
	jcI2 R11,R10,lbdf,L12
;D*E*A*D  R11
;D*E*A*D  R10
	ldI4 RL10,-1 
	st4 RL10,'O',sp,(4+1)
;D*E*A*D  RL10
	lbr L13
L12:
	ldI4 RL10,1 
	st4 RL10,'O',sp,(4+1)
;D*E*A*D  RL10
L13:
	ld4 RL10,'O',sp,(4+1)
	cpy4 rp1p2,RL10
;D*E*A*D  RL10
	lbr L4
L9:
;	else if (*s1 == '\0')
	ldn1 R11,R12
	jnzU1 R11,L14
;D*E*A*D  R11
;	    return 0;
	ldI4 RL10,0 
	cpy4 rp1p2,RL10
;D*E*A*D  RL10
	lbr L4
L14:
L6:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	ldI4 RL10,1 
	alu4 RL6,RL6,RL10,sm,smb
;D*E*A*D  RL6
;D*E*A*D  RL10
L8:
	ldI4 RL10,0 
	jneU4 RL6,RL10,L5
;    return 0;
	ldI4 RL10,0 
	cpy4 rp1p2,RL10
;D*E*A*D  RL10
L4:
	popr R7
	popr R6
	release 6
	Cretn

;;function_end$$ _strncmp
;;function_start _strlen unsigned long function(pointer to char)
_strlen:		
	pushr R6
	pushr R7
;{
;	uint16_t slen = 0 ;
	ldI4 RL6,0 
	lbr L18
L17:
;	while (*str != 0) {
;      slen++ ;
	ldI4 RL10,1 
	alu4 RL6,RL6,RL10,add,adc
;D*E*A*D  RL10
;      str++ ;
	incm R12,1
;   }
L18:
;	while (*str != 0) {
	ldn1 R11,R12
	jnzU1 R11,L17
;D*E*A*D  R11
;   return slen;
	cpy4 rp1p2,RL6
;D*E*A*D  RL6
L16:
	popr R7
	popr R6
	Cretn

;;function_end$$ _strlen
;;function_start _printstr void function(pointer to char)
_printstr:		
	pushr R7
	reserve 4
	cpy2 R7,R12
;void printstr(char *ptr){
	lbr L22
L21:
;    while(*ptr){
;		putc(*ptr++); //jan 29
	ldaD R12,7
	cpy2 R11,R7 
	incm R7,1
	ldn1 R13,R11	
;D*E*A*D  R11
	zExt R13 
	Ccall _out
;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
 nop1806
 nop1806
 nop1806
;	}
L22:
;    while(*ptr){
	ldn1 R11,R7
	jnzU1 R11,L21
;D*E*A*D  R11
;}
L20:
	release 4
	popr R7
	Cretn

;;function_end$$ _printstr
	orgc
	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
	orgc
;;function_start _ftoa pointer to char function(float,pointer to char,unsigned long)
_ftoa:		
	reserve 62
	pushr R6
	pushr R7
	reserve 12
	cpy4 RL6,RL12
;{
;   char *output = outbfr ;
	ld2 R11,'O',sp,(84+1) 
	st2 R11,'O',sp,(76+1)
;D*E*A*D  R11
;	flt=-1.234;
	ld4 RL6,'D',(L2),0
;   if (flt < 0.0) {
	ld4 RL10,'D',(L28),0
	jcF4 RL6,RL10,lbdf,L26
;D*E*A*D  RL10
;      *output++ = '-' ;
	ld2 R11,'O',sp,(76+1) 
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(76+1)
;D*E*A*D  R10
	str1I 45,R11
;D*E*A*D  R11
;      flt *= -1.0 ;
	ld4 RL8,'D',(L29),0
	cpy4 RL10,RL6
;D*E*A*D  RL6
	Ccall fp_mul 
	cpy4 RL6,RL8
;D*E*A*D  RL8
;   } else {
	lbr L27
L26:
;      if (use_leading_plus) {
	lbr L30
;         *output++ = '+' ;
	ld2 R11,'O',sp,(76+1) 
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(76+1)
;D*E*A*D  R10
	str1I 43,R11
;D*E*A*D  R11
;      }
L30:
;   }
L27:
;   if (dec_digits < (uint16_t)8) {
	ld4 RL10,'O',sp,(88+1)
	ldI4 RL8,8 
	jcU4 RL10,RL8,lbdf,L32
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL6
;D*E*A*D  RL6
	ld4 RL10,'O',sp,(88+1)
	shl4I RL10,2
	cpy2 R11,RL10 
;D*E*A*D  RL10
	ld4 RL10,'O',R11,(_round_nums)
;D*E*A*D  R11
	Ccall fp_add 
	cpy4 RL6,RL8
;D*E*A*D  RL8
;   }
L32:
;	mult=mult_nums[dec_digits];
	ld4 RL10,'O',sp,(88+1)
	shl4I RL10,2
	cpy2 R11,RL10 
;D*E*A*D  RL10
	ld4 RL10,'O',R11,(_mult_nums)
;D*E*A*D  R11
	st4 RL10,'O',sp,(68+1)
;D*E*A*D  RL10
;   wholeNum = flt;
	cpy4 RL8,RL6
	ccall cvfi4
	st4 RL8,'O',sp,(72+1)
;D*E*A*D  RL8
;   printlint(wholeNum);
	ld4 Rp1p2,'O',sp,(72+1)
	Ccall _printlint
;   decimalNum = ((flt - wholeNum) * mult);
	cpy4 RL8,RL6
;D*E*A*D  RL6
	st4 RL8,'O',sp,(16+1)
;D*E*A*D  RL8
	ld4 RL8,'O',sp,(72+1)
	Ccall cvif4
	cpy4 RL10,RL8
;D*E*A*D  RL8
	ld4 RL8,'O',sp,(16+1)
	Ccall fp_sub 
	ld4 RL10,'O',sp,(68+1)
	Ccall fp_mul 
	ccall cvfi4
	st4 RL8,'O',sp,(64+1)
;D*E*A*D  RL8
;   strcpy(output,dubdabx(wholeNum,output,1));
	ld4 Rp1p2,'O',sp,(72+1)
	ld2 R11,'O',sp,(76+1) 
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	ldI4 RL10,1 
	st4 RL10,'O',sp,(8+1)
;D*E*A*D  RL10
	Ccall _dubdabx
	cpy2 R11,R15 
	ld2 R12,'O',sp,(76+1) 
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _strcpy
;   output+=strlen(output);
	ld2 R12,'O',sp,(76+1) 
	Ccall _strlen
	cpy2 R11,RL12 
	alu2RRS R11,R11,'O',sp,(76+1),add,adc
	st2 R11,'O',sp,(76+1)
;D*E*A*D  R11
;   if (dec_digits > (uint16_t)0) {
	ld4 RL10,'O',sp,(88+1)
	ldI4 RL8,0 
	jeqI4 RL10,RL8,L34
;D*E*A*D  RL10
;D*E*A*D  RL8
;		*output++ = '.' ;
	ld2 R11,'O',sp,(76+1) 
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(76+1)
;D*E*A*D  R10
	str1I 46,R11
;D*E*A*D  R11
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
	ld4 Rp1p2,'O',sp,(64+1)
	ld2 R11,'O',sp,(76+1) 
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	ld4 RL10,'O',sp,(88+1)
	st4 RL10,'O',sp,(8+1)
;D*E*A*D  RL10
	Ccall _dubdabx
	cpy2 R11,R15 
	ld2 R12,'O',sp,(76+1) 
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _strcpy
;	}
L34:
;   return outbfr;
	ld2 R15,'O',sp,(84+1) 
L25:
	release 12
	popr R7
	popr R6
	release 62
	Cretn

;;function_end$$ _ftoa
;;function_start _itoa pointer to char function(long int,pointer to char)
_itoa:		
	reserve 18
	pushr R6
	pushr R7
	reserve 4
	st2 R12,'O',sp,(28+1)
	inc memaddr				
	str2 R13,memaddr
;char * itoa(int16_t s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	uint16_t flag=0;
	ldI4 RL10,0 
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(32+1) 
	st2 R11,'O',sp,(10+1)
;D*E*A*D  R11
;	if (s<0){
	ld4 RL10,'O',sp,(28+1)
	ldI4 RL8,0 
	jcI4 RL10,RL8,lbdf,L37
;D*E*A*D  RL10
;D*E*A*D  RL8
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(10+1) 
	str1I 45,R11
;D*E*A*D  R11
	ld2 R11,'O',sp,(10+1) 
	incm R11,1
	st2 R11,'O',sp,(10+1)
;D*E*A*D  R11
;		n=-s;
	ld4 RL10,'O',sp,(28+1)
	negI4 RL10,RL10 
	st4 RL10,'O',sp,(20+1)
;D*E*A*D  RL10
;	} else{
	lbr L38
L37:
;		n=s;
	ld4 RL10,'O',sp,(28+1)
	st4 RL10,'O',sp,(20+1)
;D*E*A*D  RL10
;	}
L38:
;	k=10000;
	ldI4 RL6,10000 
	lbr L40
L39:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ldI4 RL10,0 
	st4 RL10,'O',sp,(16+1)
;D*E*A*D  RL10
	lbr L45
L42:
L43:
	ld4 RL10,'O',sp,(16+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(16+1)
;D*E*A*D  RL10
	ld4 RL10,'O',sp,(20+1)
	alu4 RL10,RL10,RL6,sm,smb
	st4 RL10,'O',sp,(20+1)
;D*E*A*D  RL10
L45:
	ld4 RL10,'O',sp,(20+1)
	jcU4 RL10,RL6,lbdf,L42 
;		if (flag || r>0||k==1){
	ldI4 RL10,0 
	ld4 RL8,'O',sp,(12+1)
	jneU4 RL8,RL10,L49
	ld4 RL8,'O',sp,(16+1)
	jneU4 RL8,RL10,L49
	ldI4 RL10,1 
	jneU4 RL6,RL10,L46
L49:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(10+1) 
	st2 R11,'O',sp,(8+1)
;D*E*A*D  R11
	ld4 RL8,'O',sp,(16+1)
	ldI4 RL10,48 
	alu4 RL10,RL8,RL10,add,adc
;D*E*A*D  RL8
	cpy1 R11,RL10
;D*E*A*D  RL10
	ld2 R10,'O',sp,(8+1) 
	str1 R11,R10
;D*E*A*D  R11
;D*E*A*D  R10
	ld2 R11,'O',sp,(10+1) 
	incm R11,1
	st2 R11,'O',sp,(10+1)
;D*E*A*D  R11
;			flag='y';
	ldI4 RL10,121 
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;		}
L46:
;		k=k/10;
	cpy4 RL8,RL6
;D*E*A*D  RL6
	ldI4 RL10,10 
	Ccall _divu4
	cpy4 RL6,RL8
;D*E*A*D  RL8
;	}
L40:
;	while(k>0){
	ldI4 RL10,0 
	jneU4 RL6,RL10,L39
;	*bptr='\0';
	ld2 R11,'O',sp,(10+1) 
	str1I 0,R11
;D*E*A*D  R11
;	return buffer;
	ld2 R15,'O',sp,(32+1) 
L36:
	release 4
	popr R7
	popr R6
	release 18
	Cretn

;;function_end$$ _itoa
;;function_start _ltoa pointer to char function(long long int,pointer to char)
_ltoa:		
	reserve 2
	pushr R6
	pushr R7
	reserve 12
	cpy4 RL6,RL12
;D*E*A*D  RL12
;char * ltoa(int32_t s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R11,'O',sp,(24+1) 
	st2 R11,'O',sp,(16+1)
;D*E*A*D  R11
;	if (s<0){
	ldI4 RL10,0 
	jcI4 RL6,RL10,lbdf,L51
;D*E*A*D  RL10
;		*bptr++='-';
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	str1I 45,R11
;D*E*A*D  R11
;		s=-s;
	negI4 RL6,RL6 
;	}
L51:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6
;D*E*A*D  RL6
	ld2 R11,'O',sp,(16+1) 
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	ldI4 RL10,1 
	st4 RL10,'O',sp,(8+1)
;D*E*A*D  RL10
	Ccall _dubdabx
	cpy2 R11,R15 
	ld2 R12,'O',sp,(16+1) 
	cpy2 R13,R11 
;D*E*A*D  R11
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(24+1) 
L50:
	release 12
	popr R7
	popr R6
	release 2
	Cretn

;;function_end$$ _ltoa
;;function_start _printint void function(long int)
_printint:		
	reserve 14
	st2 R12,'O',sp,(16+1)
	inc memaddr				
	str2 R13,memaddr
;void printint(int16_t s){ //print an integer
;	itoa(s,buffer);
	ld4 Rp1p2,'O',sp,(16+1)
	ldA2 R11,'O',sp,(6+1)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(6+1)
	Ccall _printstr
;}
L53:
	release 14
	Cretn

;;function_end$$ _printint
;;function_start _printlint void function(long long int)
_printlint:		
	reserve 18
	st2 R12,'O',sp,(20+1)
	inc memaddr				
	str2 R13,memaddr
;void printlint(int32_t s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(20+1)
	ldA2 R11,'O',sp,(6+1)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	Ccall _ltoa
	cpy2 R11,R15 
	cpy2 R12,R11 
;D*E*A*D  R11
	Ccall _printstr
;}
L54:
	release 18
	Cretn

;;function_end$$ _printlint
;;function_start _printflt void function(float)
_printflt:		
	reserve 32
	st2 R12,'O',sp,(34+1)
	inc memaddr				
	str2 R13,memaddr
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,3));
	ld4 Rp1p2,'O',sp,(34+1)
	ldA2 R11,'O',sp,(12+1)
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
	ldI4 RL10,3 
	st4 RL10,'O',sp,(8+1)
;D*E*A*D  RL10
	Ccall _ftoa
	cpy2 R11,R15 
	cpy2 R12,R11 
;D*E*A*D  R11
	Ccall _printstr
;}
L55:
	release 32
	Cretn

;;function_end$$ _printflt
;;function_start _putxn void function(unsigned char)
_putxn:		
	reserve 4
	st1 R12,'O',sp,(6+1)
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(6+1)
	jcI1I R11,10,lbdf,L57
;D*E*A*D  R11
;		putc(x+'0');
	ldaD R12,7
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	ldA2 R13,'O',R11,(48)
;D*E*A*D  R11
	Ccall _out
;	} else {
	lbr L58
L57:
;		putc(x+'A'-10);
	ldaD R12,7
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	ldA2 R11,'O',R11,(65)
	alu2I R13,R11,10,smi,smbi
;D*E*A*D  R11
	Ccall _out
;	}
L58:
;}
L56:
	release 4
	Cretn

;;function_end$$ _putxn
;;function_start _putx void function(unsigned char)
_putx:		
	reserve 4
	st1 R12,'O',sp,(6+1)
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	shrI2I R11,4
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(6+1)
	zExt R11 
	alu2I R11,R11,15,ani,ani
	
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putxn
;}
L59:
	release 4
	Cretn

;;function_end$$ _putx
;;function_start _printf void function(pointer to char,...)
_printf:		
	reserve 10
	pushr R6
	pushr R7
	reserve 4
	st2 R12,'O',sp,(20+1)
	inc memaddr				
	str2 R13,memaddr
;void printf(char *pptr,...){ //limited implementation of printf
;	register char* ptr=pptr; //try to save on loads/spills
	ld2 R7,'O',sp,(20+1) 
;	int16_t argslot=0;	//used to align longs
	ldI4 RL10,0 
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;	int16_t * this=(int16_t *)&pptr;
	ldA2 R11,'O',sp,(20+1)
	st2 R11,'O',sp,(16+1)
;D*E*A*D  R11
;	this++; argslot++; //advance argument pointer and slot #
	ld2 R11,'O',sp,(16+1) 
	incm R11,4
	st2 R11,'O',sp,(16+1)
;D*E*A*D  R11
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
	lbr L62
L61:
;    while(*ptr) {
;		c=*ptr; ptr++;
	ldn1 R6,R7
	incm R7,1
;		if (c!='%'){
	jeqU1I R6,37,L64
;			putc(c);
	ldaD R12,7
	cpy1 R13,R6
;D*E*A*D  R6
	zExt R13 
	Ccall _out
;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
 nop1806
 nop1806
 nop1806
;		} else{
	lbr L65
L64:
;			c=*ptr;ptr++;
	ldn1 R6,R7
	incm R7,1
;			switch (c){
	cpy1 R11,R6
	zExt R11 
	st2 R11,'O',sp,(9+1)
	jcI2I R11,99,lbnf,L88  
	jnI2I R11,108,lbnf,L89
	shl2I R11,1
	ld2 R11,'O',R11,(L90-198) 
	jumpv R11
;D*E*A*D  R11
	orgc
L90:
	dw L72
	dw L70
	dw L67
	dw L83
	dw L67
	dw L67
	dw L70
	dw L67
	dw L67
	dw L76
	orgc
L88:
	ld2 R11,'O',sp,(9+1) 
	jeqU2I R11,88,L75
;D*E*A*D  R11
	lbr L67
L89:
	ld2 R11,'O',sp,(9+1) 
	ldaD R10,115
	jeqI2 R11,R10,L71
	jcI2 R11,R10,lbnf,L67
;D*E*A*D  R11
;D*E*A*D  R10
L92:
	ld2 R11,'O',sp,(9+1) 
	jeqU2I R11,120,L75
;D*E*A*D  R11
	lbr L67
L70:
;					printint(*this++);
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,4
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	ld4 Rp1p2,'O',R11,0
;D*E*A*D  R11
	Ccall _printint
;					argslot+=1; //next argument slot
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;					break;
	lbr L68
L71:
;					printstr((char*) *this++);
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,4
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	cpy2 R11,RL10 
;D*E*A*D  RL10
	cpy2 R12,R11 
;D*E*A*D  R11
	Ccall _printstr
;					argslot+=1; //next argument slot
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;					break;
	lbr L68
L72:
;					if (*ptr=='x'){ //if there's an x
	ldn1 R11,R7
	jneU1I R11,120,L73	
;D*E*A*D  R11
;						ptr++; //skip over the x
	incm R7,1
;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,4
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	cpy2 R11,RL10 
;D*E*A*D  RL10
	alu2I R11,R11,255,ani,ani 
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					} else{
	lbr L74
L73:
;						putc((unsigned int) *this++);		//print as char
	ldaD R12,7
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,4
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	cpy2 R13,RL10 
;D*E*A*D  RL10
	Ccall _out
;					}
L74:
;					argslot+=1; //next argument slot
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;					break;
	lbr L68
L75:
;					putx(((uint16_t) *this)>>8);
	ld2 R11,'O',sp,(16+1) 
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	shrU4I RL10,8
	cpy1 R11,RL10
;D*E*A*D  RL10
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					putx(((uint16_t) *this++)&255);
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,4
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	ldI4 RL8,255 
	alu4 RL10,RL10,RL8,and,and
;D*E*A*D  RL8
	cpy1 R11,RL10
;D*E*A*D  RL10
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;					argslot+=1; //next argument slot
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;					break;
	lbr L68
L76:
;					if (*ptr){ //as long as there's something there
	ldn1 R11,R7
	jzU1 R11,L77
;D*E*A*D  R11
;						xord=*ptr++;
	cpy2 R11,R7 
	incm R7,1
	ldA2 R10,'O',sp,(11+1)
	ldn R11
	str R10
;D*E*A*D  R10
;						if (argslot&1) {
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,and,and
;D*E*A*D  RL8
	ldI4 RL8,0 
	jeqI4 RL10,RL8,L79
;D*E*A*D  RL10
;D*E*A*D  RL8
;							this++;
	ld2 R11,'O',sp,(16+1) 
	incm R11,4
	st2 R11,'O',sp,(16+1)
;D*E*A*D  R11
;							argslot++;
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;						}
L79:
;						if(xord=='d'){
	ld1 R11,'O',sp,(11+1)
	jneU1I R11,100,L81	
;D*E*A*D  R11
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld2 R11,'O',sp,(16+1) 
	ld4 Rp1p2,'O',R11,0
;D*E*A*D  R11
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	ld2 R11,'O',sp,(16+1) 
	ldA2 R11,'O',R11,(8)
	st2 R11,'O',sp,(16+1)
;D*E*A*D  R11
;						} else{
	lbr L82
L81:
;							putx(((uint16_t) *this)>>8);
	ld2 R11,'O',sp,(16+1) 
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	shrU4I RL10,8
	cpy1 R11,RL10
;D*E*A*D  RL10
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((uint16_t) *this++)&255);
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,4
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	ldI4 RL8,255 
	alu4 RL10,RL10,RL8,and,and
;D*E*A*D  RL8
	cpy1 R11,RL10
;D*E*A*D  RL10
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((uint16_t) *this)>>8);
	ld2 R11,'O',sp,(16+1) 
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	shrU4I RL10,8
	cpy1 R11,RL10
;D*E*A*D  RL10
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;							putx(((uint16_t) *this++)&255);
	ld2 R11,'O',sp,(16+1) 
	cpy2 R10,R11
	incm R10,4
	st2 R10,'O',sp,(16+1)
;D*E*A*D  R10
	ld4 RL10,'O',R11,0
;D*E*A*D  R11
	ldI4 RL8,255 
	alu4 RL10,RL10,RL8,and,and
;D*E*A*D  RL8
	cpy1 R11,RL10
;D*E*A*D  RL10
	cpy1 R12,R11
;D*E*A*D  R11
	zExt R12 
	Ccall _putx
;						}
L82:
;						argslot+=2;
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,2 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;						break;
	lbr L68
L77:
L83:
;					if (*ptr){ //as long as there's something there
	ldn1 R11,R7
	jzU1 R11,L84
;D*E*A*D  R11
;						if (argslot&1) { //adjust alignment
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,and,and
;D*E*A*D  RL8
	ldI4 RL8,0 
	jeqI4 RL10,RL8,L86
;D*E*A*D  RL10
;D*E*A*D  RL8
;							this++;
	ld2 R11,'O',sp,(16+1) 
	incm R11,4
	st2 R11,'O',sp,(16+1)
;D*E*A*D  R11
;							argslot++;
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;						}
L86:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld2 R11,'O',sp,(16+1) 
	ld4 Rp1p2,'O',R11,0
;D*E*A*D  R11
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	ld2 R11,'O',sp,(16+1) 
	ldA2 R11,'O',R11,(8)
	st2 R11,'O',sp,(16+1)
;D*E*A*D  R11
;						argslot+=2;
	ld4 RL10,'O',sp,(12+1)
	ldI4 RL8,2 
	alu4 RL10,RL10,RL8,add,adc
;D*E*A*D  RL8
	st4 RL10,'O',sp,(12+1)
;D*E*A*D  RL10
;						break;
	lbr L68
L84:
L67:
;					putc('%');putc(c);
	ldaD R12,7
	ldaD R13,37
	Ccall _out
	ldaD R12,7
	cpy1 R13,R6
;D*E*A*D  R6
	zExt R13 
	Ccall _out
;			} //switch
L68:
;		} //%
L65:
;	} //while
L62:
;    while(*ptr) {
	ldn1 R11,R7
	jnzU1 R11,L61
;D*E*A*D  R11
;} //prtf
L60:
	release 4
	popr R7
	popr R6
	release 10
	Cretn

;;function_end$$ _printf
;;function_start _exit void function(long int)
_exit:		
	reserve 8
	st2 R12,'O',sp,(10+1)
	inc memaddr				
	str2 R13,memaddr
;D*E*A*D  memaddr
;void exit(int16_t code){
;	printf("exit %d\n",code);
	ldaD R12,L94
	ld4 RL10,'O',sp,(10+1)
	st4 RL10,'O',sp,(4+1)
;D*E*A*D  RL10
	Ccall _printf
L95:
;	while(1);
L96:
	lbr L95
;}
L93:
	release 8
	Cretn

;;function_end$$ _exit
;;function_start _memcmp int function(pointer to const void,pointer to const void,unsigned long)
_memcmp:		
	reserve 6
	pushr R6
	pushr R7
	ld4 RL6,'O',sp,(16+1)
;int memcmp(const void *Ptr1, const void *Ptr2, uint16_t Count){
;    int v = 0;
	st2I 0,'O',sp,(8+1)
;    p1 = (unsigned char *)Ptr1;
	st2 R12,'O',sp,(6+1)
;    p2 = (unsigned char *)Ptr2;
	st2 R13,'O',sp,(4+1)
	lbr L100
L99:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	ld2 R11,'O',sp,(6+1) 
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(6+1)
;D*E*A*D  R10
	ld2 R10,'O',sp,(4+1) 
	cpy2 R9,R10
	incm R9,1
	st2 R9,'O',sp,(4+1)
;D*E*A*D  R9
	ldn1 R11,R11	
	zExt R11 
	ldn1 R10,R10	
	zExt R10 
	alu2 R11,R11,R10,sm,smb
;D*E*A*D  R10
	st2 R11,'O',sp,(8+1)
;D*E*A*D  R11
;    }
L100:
;    while(Count-- > 0 && v == 0) {
	cpy4 RL10,RL6
;D*E*A*D  RL6
	ldI4 RL8,1 
	alu4 RL6,RL10,RL8,sm,smb
;D*E*A*D  RL8
	ldI4 RL8,0 
	jeqI4 RL10,RL8,L102
;D*E*A*D  RL10
;D*E*A*D  RL8
	ld2 R11,'O',sp,(8+1) 
	jzU2 R11,L99
;D*E*A*D  R11
L102:
;    return v;
	ld2 R15,'O',sp,(8+1) 
L98:
	popr R7
	popr R6
	release 6
	Cretn

;;function_end$$ _memcmp
;;function_start _memcpy pointer to void function(pointer to void,pointer to const void,unsigned long)
_memcpy:		
	reserve 4
	pushr R6
	pushr R7
	ld4 RL6,'O',sp,(14+1)
;void* memcpy(void* dest, const void* src, uint16_t count) {
;        char* dst8 = (char*)dest;
	st2 R12,'O',sp,(6+1)
;        char* src8 = (char*)src;
	st2 R13,'O',sp,(4+1)
	lbr L105
L104:
;        while (count--) {
;            *dst8++ = *src8++;
	ld2 R11,'O',sp,(6+1) 
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(6+1)
;D*E*A*D  R10
	ld2 R10,'O',sp,(4+1) 
	cpy2 R9,R10
;D*E*A*D  R10
	incm R9,1
	st2 R9,'O',sp,(4+1)
;D*E*A*D  R9
	ldn R10
	str R11
;D*E*A*D  R11
;        }
L105:
;        while (count--) {
	cpy4 RL10,RL6
;D*E*A*D  RL6
	ldI4 RL8,1 
	alu4 RL6,RL10,RL8,sm,smb
;D*E*A*D  RL10
;D*E*A*D  RL8
	ldI4 RL8,0 
	jneU4 RL10,RL8,L104
;        return dest;
	cpy2 R15,R12 
L103:
	popr R7
	popr R6
	release 4
	Cretn

;;function_end$$ _memcpy
;;function_start _memset pointer to void function(pointer to void,long int,unsigned long)
_memset:		
	reserve 2
	pushr R6
	pushr R7
	ld4 RL6,'O',sp,(12+1)
;{
;    unsigned char* p=s;
	st2 R12,'O',sp,(4+1)
	lbr L109
L108:
;    while(n){
;        *p = (unsigned char)c;
	ld2 R11,'O',sp,(4+1) 
	str1 RL6,R11
;D*E*A*D  RL6
;D*E*A*D  R11
;        p++;
	ld2 R11,'O',sp,(4+1) 
	incm R11,1
	st2 R11,'O',sp,(4+1)
;D*E*A*D  R11
;        n--;
	ld4 RL10,'O',sp,(16+1)
	ldI4 RL8,1 
	alu4 RL10,RL10,RL8,sm,smb
;D*E*A*D  RL8
	st4 RL10,'O',sp,(16+1)
;D*E*A*D  RL10
;	}
L109:
;    while(n){
	ld4 RL10,'O',sp,(16+1)
	ldI4 RL8,0 
	jneU4 RL10,RL8,L108
;    return s;
	cpy2 R15,R12 
L107:
	popr R7
	popr R6
	release 2
	Cretn

;;function_end$$ _memset
;;function_start _nstdlibincluder void function(void)
_nstdlibincluder:		
;void nstdlibincluder(){
;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
	include nstdlib.inc
;}
L111:
	Cretn

;;function_end$$ _nstdlibincluder
	orgc
L94:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L29:
	dd 0xbf800000
	align 4
L28:
	dd 0x0
L3:
	db 116
	db 101
	db 115
	db 116
	db 32
	db 102
	db 114
	db 111
	db 103
	db 61
	db 37
	db 102
	db 10
	db 0
	align 4
L2:
	dd 0xbf9df3b6
	include lcc1802epiloCX.inc
	include LCC1802fp.inc
	include IO1802.inc
	include LCC1802finale.inc
