 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 1 - 1/27/2021 10:36:34


       1/       0 :                     ; generated by lcc-xr18CX $Version: 5.2 - XR18CX $ on Wed Jan 27 10:36:30 2021
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 
       4/       0 : =0EH                memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =0FH                retVal:	equ	15
       7/       0 : =0CH                regArg1: equ	12
       8/       0 : =0DH                regArg2: equ	13
(1) 1169/    4401 :                     	listing	on
(1) 1170/    4401 : C0 5F 0C            	lbr	lcc1802init
(1) 1171/    4404 :                     	
(1) 1172/    4404 :                     
      11/    4404 :                     	listing on
      12/    4404 : (MACRO)             	orgc
      13/    4404 :                     ;;function_start _main void function(void)
      14/    4404 :                     _main: 
      15/    4404 : (MACRO)             	reserve 14
      16/    440E :                     ;{
      17/    440E :                     ;	float frog=-1.234;
      18/    440E : (MACRO)             	ld4 RL10,'D',(L2),0
      19/    441C : (MACRO)             	st4 RL10,'O',sp,(8+1)
      20/    442F :                     ;D*E*A*D  RL10
      21/    442F :                     ;	printf("test frog=%f\n",frog);
      22/    442F : (MACRO)             	ldaD R12,L3
      23/    4435 : (MACRO)             	ld4 RL10,'O',sp,(8+1)
      24/    4445 : (MACRO)             	st4 RL10,'O',sp,(4+1)
      25/    4458 :                     ;D*E*A*D  RL10
      26/    4458 : (MACRO)             	Ccall _printf
      27/    445C :                     ;}
      28/    445C :                     L1:
      29/    445C : (MACRO)             	release 14
      30/    4464 : (MACRO)             	Cretn
      31/    4466 :                     
      32/    4466 :                     ;;function_end$$ _main
      33/    4466 :                     ;;function_start _strncmp long int function(pointer to const char,pointer to const char,unsigned long)
      34/    4466 :                     _strncmp:		
      35/    4466 : (MACRO)             	reserve 6
      36/    446C : (MACRO)             	pushr R6
      37/    4470 : (MACRO)             	pushr R7
      38/    4474 : (MACRO)             	ld4 RL6,'O',sp,(16+1)
      39/    4484 :                     ;{
      40/    4484 :                     ;    for ( ; n > 0; s1++, s2++, --n)
      41/    4484 : C0 45 56            	lbr L8
      42/    4487 :                     L5:
      43/    4487 :                     ;	if (*s1 != *s2)
      44/    4487 : (MACRO)             	ldn1 R11,R12	
      45/    4489 : (MACRO)             	zExt R11 
      46/    448C : (MACRO)             	ldn1 R10,R13	
      47/    448E : (MACRO)             	zExt R10 
      48/    4491 : (MACRO)             	jeqI2 R11,R10,L9
      49/    449F :                     ;D*E*A*D  R11
      50/    449F :                     ;D*E*A*D  R10
      51/    449F :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? (int16_t)-1 : (int16_t)+1);
      52/    449F : (MACRO)             	ldn1 R11,R12	
      53/    44A1 : (MACRO)             	zExt R11 
      54/    44A4 : (MACRO)             	ldn1 R10,R13	
      55/    44A6 : (MACRO)             	zExt R10 
      56/    44A9 : (MACRO)             	jcI2 R11,R10,lbdf,L12
      57/    44BB :                     ;D*E*A*D  R11
      58/    44BB :                     ;D*E*A*D  R10
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 2 - 1/27/2021 10:36:34


      59/    44BB : (MACRO)             	ldI4 RL10,-1 
      60/    44C7 : (MACRO)             	st4 RL10,'O',sp,(4+1)
      61/    44DA :                     ;D*E*A*D  RL10
      62/    44DA : C0 44 FC            	lbr L13
      63/    44DD :                     L12:
      64/    44DD : (MACRO)             	ldI4 RL10,1 
      65/    44E9 : (MACRO)             	st4 RL10,'O',sp,(4+1)
      66/    44FC :                     ;D*E*A*D  RL10
      67/    44FC :                     L13:
      68/    44FC : (MACRO)             	ld4 RL10,'O',sp,(4+1)
      69/    450C : (MACRO)             	cpy4 rp1p2,RL10
      70/    4514 :                     ;D*E*A*D  RL10
      71/    4514 : C0 45 95            	lbr L4
      72/    4517 :                     L9:
      73/    4517 :                     ;	else if (*s1 == '\0')
      74/    4517 : 0C                  	ldn    R12
      75/    4518 : CA 45 32            	lbnz   L14
      76/    451B :                     ;	    return 0;
      77/    451B : (MACRO)             	ldI4 RL10,0 
      78/    4527 : (MACRO)             	cpy4 rp1p2,RL10
      79/    452F :                     ;D*E*A*D  RL10
      80/    452F : C0 45 95            	lbr L4
      81/    4532 :                     L14:
      82/    4532 :                     L6:
      83/    4532 :                     ;    for ( ; n > 0; s1++, s2++, --n)
      84/    4532 : (MACRO)             	incm R12,1
      85/    4533 : (MACRO)             	incm R13,1
      86/    4534 : (MACRO)             	ldI4 RL10,1 
      87/    4540 : (MACRO)             	alu4 RL6,RL6,RL10,sm,smb
      88/    4556 :                     ;D*E*A*D  RL6
      89/    4556 :                     ;D*E*A*D  RL10
      90/    4556 :                     L8:
      91/    4556 : (MACRO)             	ldI4 RL10,0 
      92/    4562 : (MACRO)             	jneU4 RL6,RL10,L5
      93/    4581 :                     ;    return 0;
      94/    4581 : (MACRO)             	ldI4 RL10,0 
      95/    458D : (MACRO)             	cpy4 rp1p2,RL10
      96/    4595 :                     ;D*E*A*D  RL10
      97/    4595 :                     L4:
      98/    4595 : (MACRO)             	popr R7
      99/    459A : (MACRO)             	popr R6
     100/    459F : (MACRO)             	release 6
     101/    45A5 : (MACRO)             	Cretn
     102/    45A7 :                     
     103/    45A7 :                     ;;function_end$$ _strncmp
     104/    45A7 :                     ;;function_start _strlen unsigned long function(pointer to char)
     105/    45A7 :                     _strlen:		
     106/    45A7 : (MACRO)             	pushr R6
     107/    45AB : (MACRO)             	pushr R7
     108/    45AF :                     ;{
     109/    45AF :                     ;	uint16_t slen = 0 ;
     110/    45AF : (MACRO)             	ldI4 RL6,0 
     111/    45BB : C0 45 E1            	lbr L18
     112/    45BE :                     L17:
     113/    45BE :                     ;	while (*str != 0) {
     114/    45BE :                     ;      slen++ ;
     115/    45BE : (MACRO)             	ldI4 RL10,1 
     116/    45CA : (MACRO)             	alu4 RL6,RL6,RL10,add,adc
     117/    45E0 :                     ;D*E*A*D  RL10
     118/    45E0 :                     ;      str++ ;
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 3 - 1/27/2021 10:36:34


     119/    45E0 : (MACRO)             	incm R12,1
     120/    45E1 :                     ;   }
     121/    45E1 :                     L18:
     122/    45E1 :                     ;	while (*str != 0) {
     123/    45E1 : 0C                  	ldn    R12
     124/    45E2 : CA 45 BE            	lbnz   L17
     125/    45E5 :                     ;   return slen;
     126/    45E5 : (MACRO)             	cpy4 rp1p2,RL6
     127/    45ED :                     ;D*E*A*D  RL6
     128/    45ED :                     L16:
     129/    45ED : (MACRO)             	popr R7
     130/    45F2 : (MACRO)             	popr R6
     131/    45F7 : (MACRO)             	Cretn
     132/    45F9 :                     
     133/    45F9 :                     ;;function_end$$ _strlen
     134/    45F9 :                     ;;function_start _printstr void function(pointer to char)
     135/    45F9 :                     _printstr:		
     136/    45F9 : (MACRO)             	pushr R7
     137/    45FD : (MACRO)             	reserve 4
     138/    4601 : (MACRO)             	cpy2 R7,R12
     139/    4605 :                     ;void printstr(char *ptr){
     140/    4605 : C0 46 1C            	lbr L22
     141/    4608 :                     L21:
     142/    4608 :                     ;    while(*ptr){
     143/    4608 :                     ;		putc(*ptr++); //jan 29
     144/    4608 : (MACRO)             	ldaD R12,7
     145/    460E : (MACRO)             	cpy2 R11,R7 
     146/    4612 : (MACRO)             	incm R7,1
     147/    4613 : (MACRO)             	ldn1 R13,R11	
     148/    4615 :                     ;D*E*A*D  R11
     149/    4615 : (MACRO)             	zExt R13 
     150/    4618 : (MACRO)             	Ccall _out
     151/    461C :                     ;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
     152/    461C : (MACRO)              nop1806
     153/    461C : (MACRO)              nop1806
     154/    461C : (MACRO)              nop1806
     155/    461C :                     ;	}
     156/    461C :                     L22:
     157/    461C :                     ;    while(*ptr){
     158/    461C : 07                  	ldn    R7
     159/    461D : CA 46 08            	lbnz   L21
     160/    4620 :                     ;}
     161/    4620 :                     L20:
     162/    4620 : (MACRO)             	release 4
     163/    4624 : (MACRO)             	popr R7
     164/    4629 : (MACRO)             	Cretn
     165/    462B :                     
     166/    462B :                     ;;function_end$$ _printstr
     167/    462B : (MACRO)             	orgc
     168/    462B :                     	align 4
     169/    462C :                     _round_nums:
     170/    462C : 3F 00 00 00         	dd 0x3f000000
     171/    4630 : 3D 4C CC CD         	dd 0x3d4ccccd
     172/    4634 : 3B A3 D7 0A         	dd 0x3ba3d70a
     173/    4638 : 3A 03 12 6F         	dd 0x3a03126f
     174/    463C : 38 51 B7 17         	dd 0x3851b717
     175/    4640 : 36 A7 C5 AC         	dd 0x36a7c5ac
     176/    4644 : 35 06 37 BD         	dd 0x350637bd
     177/    4648 : 33 56 BF 95         	dd 0x3356bf95
     178/    464C :                     	align 4
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 4 - 1/27/2021 10:36:34


     179/    464C :                     _mult_nums:
     180/    464C : 3F 80 00 00         	dd 0x3f800000
     181/    4650 : 41 20 00 00         	dd 0x41200000
     182/    4654 : 42 C8 00 00         	dd 0x42c80000
     183/    4658 : 44 7A 00 00         	dd 0x447a0000
     184/    465C : 46 1C 40 00         	dd 0x461c4000
     185/    4660 : 47 C3 50 00         	dd 0x47c35000
     186/    4664 : 49 74 24 00         	dd 0x49742400
     187/    4668 : 4B 18 96 80         	dd 0x4b189680
     188/    466C : (MACRO)             	orgc
     189/    466C :                     ;;function_start _ftoa pointer to char function(float,pointer to char,unsigned long)
     190/    466C :                     _ftoa:		
     191/    466C : (MACRO)             	reserve 62
     192/    4676 : (MACRO)             	pushr R6
     193/    467A : (MACRO)             	pushr R7
     194/    467E : (MACRO)             	reserve 12
     195/    4688 : (MACRO)             	cpy4 RL6,RL12
     196/    4690 :                     ;{
     197/    4690 :                     ;   char *output = outbfr ;
     198/    4690 : (MACRO)             	ld2 R11,'O',sp,(84+1) 
     199/    469C : (MACRO)             	st2 R11,'O',sp,(76+1)
     200/    46A9 :                     ;D*E*A*D  R11
     201/    46A9 :                     ;	flt=-1.234;
     202/    46A9 : (MACRO)             	ld4 RL6,'D',(L2),0
     203/    46B7 :                     ;   if (flt < 0.0) {
     204/    46B7 : (MACRO)             	ld4 RL10,'D',(L28),0
     205/    46C5 : (MACRO)             	jcF4 RL6,RL10,lbdf,L26
     206/    470A :                     ;D*E*A*D  RL10
     207/    470A :                     ;      *output++ = '-' ;
     208/    470A : (MACRO)             	ld2 R11,'O',sp,(76+1) 
     209/    4716 : (MACRO)             	cpy2 R10,R11
     210/    471A : (MACRO)             	incm R10,1
     211/    471B : (MACRO)             	st2 R10,'O',sp,(76+1)
     212/    4728 :                     ;D*E*A*D  R10
     213/    4728 : (MACRO)             	str1I 45,R11
     214/    472B :                     ;D*E*A*D  R11
     215/    472B :                     ;      flt *= -1.0 ;
     216/    472B : (MACRO)             	ld4 RL8,'D',(L29),0
     217/    4739 : (MACRO)             	cpy4 RL10,RL6
     218/    4741 :                     ;D*E*A*D  RL6
     219/    4741 : (MACRO)             	Ccall fp_mul 
     220/    4745 : (MACRO)             	cpy4 RL6,RL8
     221/    474D :                     ;D*E*A*D  RL8
     222/    474D :                     ;   } else {
     223/    474D : C0 47 74            	lbr L27
     224/    4750 :                     L26:
     225/    4750 :                     ;      if (use_leading_plus) {
     226/    4750 : C0 47 74            	lbr L30
     227/    4753 :                     ;         *output++ = '+' ;
     228/    4753 : (MACRO)             	ld2 R11,'O',sp,(76+1) 
     229/    475F : (MACRO)             	cpy2 R10,R11
     230/    4763 : (MACRO)             	incm R10,1
     231/    4764 : (MACRO)             	st2 R10,'O',sp,(76+1)
     232/    4771 :                     ;D*E*A*D  R10
     233/    4771 : (MACRO)             	str1I 43,R11
     234/    4774 :                     ;D*E*A*D  R11
     235/    4774 :                     ;      }
     236/    4774 :                     L30:
     237/    4774 :                     ;   }
     238/    4774 :                     L27:
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 5 - 1/27/2021 10:36:34


     239/    4774 :                     ;   if (dec_digits < (uint16_t)8) {
     240/    4774 : (MACRO)             	ld4 RL10,'O',sp,(88+1)
     241/    4784 : (MACRO)             	ldI4 RL8,8 
     242/    4790 : (MACRO)             	jcU4 RL10,RL8,lbdf,L32
     243/    47A5 :                     ;      flt += round_nums[dec_digits] ;
     244/    47A5 : (MACRO)             	cpy4 RL8,RL6
     245/    47AD :                     ;D*E*A*D  RL6
     246/    47AD : (MACRO)             	ld4 RL10,'O',sp,(88+1)
     247/    47BD : (MACRO)             	shl4I RL10,2
     248/    47D5 : (MACRO)             	cpy2 R11,RL10 
     249/    47D9 :                     ;D*E*A*D  RL10
     250/    47D9 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums)
     251/    47E9 :                     ;D*E*A*D  R11
     252/    47E9 : (MACRO)             	Ccall fp_add 
     253/    47ED : (MACRO)             	cpy4 RL6,RL8
     254/    47F5 :                     ;D*E*A*D  RL8
     255/    47F5 :                     ;   }
     256/    47F5 :                     L32:
     257/    47F5 :                     ;	mult=mult_nums[dec_digits];
     258/    47F5 : (MACRO)             	ld4 RL10,'O',sp,(88+1)
     259/    4805 : (MACRO)             	shl4I RL10,2
     260/    481D : (MACRO)             	cpy2 R11,RL10 
     261/    4821 :                     ;D*E*A*D  RL10
     262/    4821 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums)
     263/    4831 :                     ;D*E*A*D  R11
     264/    4831 : (MACRO)             	st4 RL10,'O',sp,(68+1)
     265/    4844 :                     ;D*E*A*D  RL10
     266/    4844 :                     ;   wholeNum = flt;
     267/    4844 : (MACRO)             	cpy4 RL8,RL6
     268/    484C : (MACRO)             	ccall cvfi4
     269/    4850 : (MACRO)             	st4 RL8,'O',sp,(72+1)
     270/    4863 :                     ;D*E*A*D  RL8
     271/    4863 :                     ;   printlint(wholeNum);
     272/    4863 : (MACRO)             	ld4 Rp1p2,'O',sp,(72+1)
     273/    4873 : (MACRO)             	Ccall _printlint
     274/    4877 :                     ;   decimalNum = ((flt - wholeNum) * mult);
     275/    4877 : (MACRO)             	cpy4 RL8,RL6
     276/    487F :                     ;D*E*A*D  RL6
     277/    487F : (MACRO)             	st4 RL8,'O',sp,(16+1)
     278/    4892 :                     ;D*E*A*D  RL8
     279/    4892 : (MACRO)             	ld4 RL8,'O',sp,(72+1)
     280/    48A2 : (MACRO)             	Ccall cvif4
     281/    48A6 : (MACRO)             	cpy4 RL10,RL8
     282/    48AE :                     ;D*E*A*D  RL8
     283/    48AE : (MACRO)             	ld4 RL8,'O',sp,(16+1)
     284/    48BE : (MACRO)             	Ccall fp_sub 
     285/    48C2 : (MACRO)             	ld4 RL10,'O',sp,(68+1)
     286/    48D2 : (MACRO)             	Ccall fp_mul 
     287/    48D6 : (MACRO)             	ccall cvfi4
     288/    48DA : (MACRO)             	st4 RL8,'O',sp,(64+1)
     289/    48ED :                     ;D*E*A*D  RL8
     290/    48ED :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
     291/    48ED : (MACRO)             	ld4 Rp1p2,'O',sp,(72+1)
     292/    48FD : (MACRO)             	ld2 R11,'O',sp,(76+1) 
     293/    4909 : (MACRO)             	st2 R11,'O',sp,(4+1)
     294/    4916 :                     ;D*E*A*D  R11
     295/    4916 : (MACRO)             	ldI4 RL10,1 
     296/    4922 : (MACRO)             	st4 RL10,'O',sp,(8+1)
     297/    4935 :                     ;D*E*A*D  RL10
     298/    4935 : (MACRO)             	Ccall _dubdabx
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 6 - 1/27/2021 10:36:34


     299/    4939 : (MACRO)             	cpy2 R11,R15 
     300/    493D : (MACRO)             	ld2 R12,'O',sp,(76+1) 
     301/    4949 : (MACRO)             	cpy2 R13,R11 
     302/    494D :                     ;D*E*A*D  R11
     303/    494D : (MACRO)             	Ccall _strcpy
     304/    4951 :                     ;   output+=strlen(output);
     305/    4951 : (MACRO)             	ld2 R12,'O',sp,(76+1) 
     306/    495D : (MACRO)             	Ccall _strlen
     307/    4961 : (MACRO)             	cpy2 R11,RL12 
     308/    4965 : (MACRO)             	alu2RRS R11,R11,'O',sp,(76+1),add,adc
     309/    4976 : (MACRO)             	st2 R11,'O',sp,(76+1)
     310/    4983 :                     ;D*E*A*D  R11
     311/    4983 :                     ;   if (dec_digits > (uint16_t)0) {
     312/    4983 : (MACRO)             	ld4 RL10,'O',sp,(88+1)
     313/    4993 : (MACRO)             	ldI4 RL8,0 
     314/    499F : (MACRO)             	jeqI4 RL10,RL8,L34
     315/    49BB :                     ;D*E*A*D  RL10
     316/    49BB :                     ;D*E*A*D  RL8
     317/    49BB :                     ;		*output++ = '.' ;
     318/    49BB : (MACRO)             	ld2 R11,'O',sp,(76+1) 
     319/    49C7 : (MACRO)             	cpy2 R10,R11
     320/    49CB : (MACRO)             	incm R10,1
     321/    49CC : (MACRO)             	st2 R10,'O',sp,(76+1)
     322/    49D9 :                     ;D*E*A*D  R10
     323/    49D9 : (MACRO)             	str1I 46,R11
     324/    49DC :                     ;D*E*A*D  R11
     325/    49DC :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
     326/    49DC : (MACRO)             	ld4 Rp1p2,'O',sp,(64+1)
     327/    49EC : (MACRO)             	ld2 R11,'O',sp,(76+1) 
     328/    49F8 : (MACRO)             	st2 R11,'O',sp,(4+1)
     329/    4A05 :                     ;D*E*A*D  R11
     330/    4A05 : (MACRO)             	ld4 RL10,'O',sp,(88+1)
     331/    4A15 : (MACRO)             	st4 RL10,'O',sp,(8+1)
     332/    4A28 :                     ;D*E*A*D  RL10
     333/    4A28 : (MACRO)             	Ccall _dubdabx
     334/    4A2C : (MACRO)             	cpy2 R11,R15 
     335/    4A30 : (MACRO)             	ld2 R12,'O',sp,(76+1) 
     336/    4A3C : (MACRO)             	cpy2 R13,R11 
     337/    4A40 :                     ;D*E*A*D  R11
     338/    4A40 : (MACRO)             	Ccall _strcpy
     339/    4A44 :                     ;	}
     340/    4A44 :                     L34:
     341/    4A44 :                     ;   return outbfr;
     342/    4A44 : (MACRO)             	ld2 R15,'O',sp,(84+1) 
     343/    4A50 :                     L25:
     344/    4A50 : (MACRO)             	release 12
     345/    4A58 : (MACRO)             	popr R7
     346/    4A5D : (MACRO)             	popr R6
     347/    4A62 : (MACRO)             	release 62
     348/    4A6A : (MACRO)             	Cretn
     349/    4A6C :                     
     350/    4A6C :                     ;;function_end$$ _ftoa
     351/    4A6C :                     ;;function_start _itoa pointer to char function(long int,pointer to char)
     352/    4A6C :                     _itoa:		
     353/    4A6C : (MACRO)             	reserve 18
     354/    4A76 : (MACRO)             	pushr R6
     355/    4A7A : (MACRO)             	pushr R7
     356/    4A7E : (MACRO)             	reserve 4
     357/    4A82 : (MACRO)             	st2 R12,'O',sp,(28+1)
     358/    4A8F : 1E                  	inc memaddr				
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 7 - 1/27/2021 10:36:34


     359/    4A90 : (MACRO)             	str2 R13,memaddr
     360/    4A96 :                     ;char * itoa(int16_t s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     361/    4A96 :                     ;	uint16_t flag=0;
     362/    4A96 : (MACRO)             	ldI4 RL10,0 
     363/    4AA2 : (MACRO)             	st4 RL10,'O',sp,(12+1)
     364/    4AB5 :                     ;D*E*A*D  RL10
     365/    4AB5 :                     ;	char * bptr; bptr=buffer;
     366/    4AB5 : (MACRO)             	ld2 R11,'O',sp,(32+1) 
     367/    4AC1 : (MACRO)             	st2 R11,'O',sp,(10+1)
     368/    4ACE :                     ;D*E*A*D  R11
     369/    4ACE :                     ;	if (s<0){
     370/    4ACE : (MACRO)             	ld4 RL10,'O',sp,(28+1)
     371/    4ADE : (MACRO)             	ldI4 RL8,0 
     372/    4AEA : (MACRO)             	jcI4 RL10,RL8,lbdf,L37
     373/    4B06 :                     ;D*E*A*D  RL10
     374/    4B06 :                     ;D*E*A*D  RL8
     375/    4B06 :                     ;		*bptr='-';bptr++;
     376/    4B06 : (MACRO)             	ld2 R11,'O',sp,(10+1) 
     377/    4B12 : (MACRO)             	str1I 45,R11
     378/    4B15 :                     ;D*E*A*D  R11
     379/    4B15 : (MACRO)             	ld2 R11,'O',sp,(10+1) 
     380/    4B21 : (MACRO)             	incm R11,1
     381/    4B22 : (MACRO)             	st2 R11,'O',sp,(10+1)
     382/    4B2F :                     ;D*E*A*D  R11
     383/    4B2F :                     ;		n=-s;
     384/    4B2F : (MACRO)             	ld4 RL10,'O',sp,(28+1)
     385/    4B3F : (MACRO)             	negI4 RL10,RL10 
     386/    4B5F : (MACRO)             	st4 RL10,'O',sp,(20+1)
     387/    4B72 :                     ;D*E*A*D  RL10
     388/    4B72 :                     ;	} else{
     389/    4B72 : C0 4B 98            	lbr L38
     390/    4B75 :                     L37:
     391/    4B75 :                     ;		n=s;
     392/    4B75 : (MACRO)             	ld4 RL10,'O',sp,(28+1)
     393/    4B85 : (MACRO)             	st4 RL10,'O',sp,(20+1)
     394/    4B98 :                     ;D*E*A*D  RL10
     395/    4B98 :                     ;	}
     396/    4B98 :                     L38:
     397/    4B98 :                     ;	k=10000;
     398/    4B98 : (MACRO)             	ldI4 RL6,10000 
     399/    4BA4 : C0 4D B5            	lbr L40
     400/    4BA7 :                     L39:
     401/    4BA7 :                     ;	while(k>0){
     402/    4BA7 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     403/    4BA7 : (MACRO)             	ldI4 RL10,0 
     404/    4BB3 : (MACRO)             	st4 RL10,'O',sp,(16+1)
     405/    4BC6 :                     ;D*E*A*D  RL10
     406/    4BC6 : C0 4C 47            	lbr L45
     407/    4BC9 :                     L42:
     408/    4BC9 :                     L43:
     409/    4BC9 : (MACRO)             	ld4 RL10,'O',sp,(16+1)
     410/    4BD9 : (MACRO)             	ldI4 RL8,1 
     411/    4BE5 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     412/    4BFB :                     ;D*E*A*D  RL8
     413/    4BFB : (MACRO)             	st4 RL10,'O',sp,(16+1)
     414/    4C0E :                     ;D*E*A*D  RL10
     415/    4C0E : (MACRO)             	ld4 RL10,'O',sp,(20+1)
     416/    4C1E : (MACRO)             	alu4 RL10,RL10,RL6,sm,smb
     417/    4C34 : (MACRO)             	st4 RL10,'O',sp,(20+1)
     418/    4C47 :                     ;D*E*A*D  RL10
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 8 - 1/27/2021 10:36:34


     419/    4C47 :                     L45:
     420/    4C47 : (MACRO)             	ld4 RL10,'O',sp,(20+1)
     421/    4C57 : (MACRO)             	jcU4 RL10,RL6,lbdf,L42 
     422/    4C6C :                     ;		if (flag || r>0||k==1){
     423/    4C6C : (MACRO)             	ldI4 RL10,0 
     424/    4C78 : (MACRO)             	ld4 RL8,'O',sp,(12+1)
     425/    4C88 : (MACRO)             	jneU4 RL8,RL10,L49
     426/    4CA7 : (MACRO)             	ld4 RL8,'O',sp,(16+1)
     427/    4CB7 : (MACRO)             	jneU4 RL8,RL10,L49
     428/    4CD6 : (MACRO)             	ldI4 RL10,1 
     429/    4CE2 : (MACRO)             	jneU4 RL6,RL10,L46
     430/    4D01 :                     L49:
     431/    4D01 :                     ;			*bptr=('0'+r);bptr++;
     432/    4D01 : (MACRO)             	ld2 R11,'O',sp,(10+1) 
     433/    4D0D : (MACRO)             	st2 R11,'O',sp,(8+1)
     434/    4D1A :                     ;D*E*A*D  R11
     435/    4D1A : (MACRO)             	ld4 RL8,'O',sp,(16+1)
     436/    4D2A : (MACRO)             	ldI4 RL10,48 
     437/    4D36 : (MACRO)             	alu4 RL10,RL8,RL10,add,adc
     438/    4D4C :                     ;D*E*A*D  RL8
     439/    4D4C : (MACRO)             	cpy1 R11,RL10
     440/    4D4E :                     ;D*E*A*D  RL10
     441/    4D4E : (MACRO)             	ld2 R10,'O',sp,(8+1) 
     442/    4D5A : (MACRO)             	str1 R11,R10
     443/    4D5C :                     ;D*E*A*D  R11
     444/    4D5C :                     ;D*E*A*D  R10
     445/    4D5C : (MACRO)             	ld2 R11,'O',sp,(10+1) 
     446/    4D68 : (MACRO)             	incm R11,1
     447/    4D69 : (MACRO)             	st2 R11,'O',sp,(10+1)
     448/    4D76 :                     ;D*E*A*D  R11
     449/    4D76 :                     ;			flag='y';
     450/    4D76 : (MACRO)             	ldI4 RL10,121 
     451/    4D82 : (MACRO)             	st4 RL10,'O',sp,(12+1)
     452/    4D95 :                     ;D*E*A*D  RL10
     453/    4D95 :                     ;		}
     454/    4D95 :                     L46:
     455/    4D95 :                     ;		k=k/10;
     456/    4D95 : (MACRO)             	cpy4 RL8,RL6
     457/    4D9D :                     ;D*E*A*D  RL6
     458/    4D9D : (MACRO)             	ldI4 RL10,10 
     459/    4DA9 : (MACRO)             	Ccall _divu4
     460/    4DAD : (MACRO)             	cpy4 RL6,RL8
     461/    4DB5 :                     ;D*E*A*D  RL8
     462/    4DB5 :                     ;	}
     463/    4DB5 :                     L40:
     464/    4DB5 :                     ;	while(k>0){
     465/    4DB5 : (MACRO)             	ldI4 RL10,0 
     466/    4DC1 : (MACRO)             	jneU4 RL6,RL10,L39
     467/    4DE0 :                     ;	*bptr='\0';
     468/    4DE0 : (MACRO)             	ld2 R11,'O',sp,(10+1) 
     469/    4DEC : (MACRO)             	str1I 0,R11
     470/    4DEF :                     ;D*E*A*D  R11
     471/    4DEF :                     ;	return buffer;
     472/    4DEF : (MACRO)             	ld2 R15,'O',sp,(32+1) 
     473/    4DFB :                     L36:
     474/    4DFB : (MACRO)             	release 4
     475/    4DFF : (MACRO)             	popr R7
     476/    4E04 : (MACRO)             	popr R6
     477/    4E09 : (MACRO)             	release 18
     478/    4E11 : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 9 - 1/27/2021 10:36:34


     479/    4E13 :                     
     480/    4E13 :                     ;;function_end$$ _itoa
     481/    4E13 :                     ;;function_start _ltoa pointer to char function(long long int,pointer to char)
     482/    4E13 :                     _ltoa:		
     483/    4E13 : (MACRO)             	reserve 2
     484/    4E15 : (MACRO)             	pushr R6
     485/    4E19 : (MACRO)             	pushr R7
     486/    4E1D : (MACRO)             	reserve 12
     487/    4E27 : (MACRO)             	cpy4 RL6,RL12
     488/    4E2F :                     ;D*E*A*D  RL12
     489/    4E2F :                     ;char * ltoa(int32_t s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     490/    4E2F :                     ;	char* bptr=buffer;
     491/    4E2F : (MACRO)             	ld2 R11,'O',sp,(24+1) 
     492/    4E3B : (MACRO)             	st2 R11,'O',sp,(16+1)
     493/    4E48 :                     ;D*E*A*D  R11
     494/    4E48 :                     ;	if (s<0){
     495/    4E48 : (MACRO)             	ldI4 RL10,0 
     496/    4E54 : (MACRO)             	jcI4 RL6,RL10,lbdf,L51
     497/    4E70 :                     ;D*E*A*D  RL10
     498/    4E70 :                     ;		*bptr++='-';
     499/    4E70 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     500/    4E7C : (MACRO)             	cpy2 R10,R11
     501/    4E80 : (MACRO)             	incm R10,1
     502/    4E81 : (MACRO)             	st2 R10,'O',sp,(16+1)
     503/    4E8E :                     ;D*E*A*D  R10
     504/    4E8E : (MACRO)             	str1I 45,R11
     505/    4E91 :                     ;D*E*A*D  R11
     506/    4E91 :                     ;		s=-s;
     507/    4E91 : (MACRO)             	negI4 RL6,RL6 
     508/    4EB1 :                     ;	}
     509/    4EB1 :                     L51:
     510/    4EB1 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
     511/    4EB1 : (MACRO)             	cpy4 Rp1p2,RL6
     512/    4EB9 :                     ;D*E*A*D  RL6
     513/    4EB9 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     514/    4EC5 : (MACRO)             	st2 R11,'O',sp,(4+1)
     515/    4ED2 :                     ;D*E*A*D  R11
     516/    4ED2 : (MACRO)             	ldI4 RL10,1 
     517/    4EDE : (MACRO)             	st4 RL10,'O',sp,(8+1)
     518/    4EF1 :                     ;D*E*A*D  RL10
     519/    4EF1 : (MACRO)             	Ccall _dubdabx
     520/    4EF5 : (MACRO)             	cpy2 R11,R15 
     521/    4EF9 : (MACRO)             	ld2 R12,'O',sp,(16+1) 
     522/    4F05 : (MACRO)             	cpy2 R13,R11 
     523/    4F09 :                     ;D*E*A*D  R11
     524/    4F09 : (MACRO)             	Ccall _strcpy
     525/    4F0D :                     ;	return buffer;
     526/    4F0D : (MACRO)             	ld2 R15,'O',sp,(24+1) 
     527/    4F19 :                     L50:
     528/    4F19 : (MACRO)             	release 12
     529/    4F21 : (MACRO)             	popr R7
     530/    4F26 : (MACRO)             	popr R6
     531/    4F2B : (MACRO)             	release 2
     532/    4F2D : (MACRO)             	Cretn
     533/    4F2F :                     
     534/    4F2F :                     ;;function_end$$ _ltoa
     535/    4F2F :                     ;;function_start _printint void function(long int)
     536/    4F2F :                     _printint:		
     537/    4F2F : (MACRO)             	reserve 14
     538/    4F39 : (MACRO)             	st2 R12,'O',sp,(16+1)
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 10 - 1/27/2021 10:36:34


     539/    4F46 : 1E                  	inc memaddr				
     540/    4F47 : (MACRO)             	str2 R13,memaddr
     541/    4F4D :                     ;void printint(int16_t s){ //print an integer
     542/    4F4D :                     ;	itoa(s,buffer);
     543/    4F4D : (MACRO)             	ld4 Rp1p2,'O',sp,(16+1)
     544/    4F5D : (MACRO)             	ldA2 R11,'O',sp,(6+1)
     545/    4F65 : (MACRO)             	st2 R11,'O',sp,(4+1)
     546/    4F72 :                     ;D*E*A*D  R11
     547/    4F72 : (MACRO)             	Ccall _itoa
     548/    4F76 :                     ;	printstr(buffer);
     549/    4F76 : (MACRO)             	ldA2 R12,'O',sp,(6+1)
     550/    4F7E : (MACRO)             	Ccall _printstr
     551/    4F82 :                     ;}
     552/    4F82 :                     L53:
     553/    4F82 : (MACRO)             	release 14
     554/    4F8A : (MACRO)             	Cretn
     555/    4F8C :                     
     556/    4F8C :                     ;;function_end$$ _printint
     557/    4F8C :                     ;;function_start _printlint void function(long long int)
     558/    4F8C :                     _printlint:		
     559/    4F8C : (MACRO)             	reserve 18
     560/    4F96 : (MACRO)             	st2 R12,'O',sp,(20+1)
     561/    4FA3 : 1E                  	inc memaddr				
     562/    4FA4 : (MACRO)             	str2 R13,memaddr
     563/    4FAA :                     ;void printlint(int32_t s){ //print a long integer
     564/    4FAA :                     ;	printstr(ltoa(s,buffer));
     565/    4FAA : (MACRO)             	ld4 Rp1p2,'O',sp,(20+1)
     566/    4FBA : (MACRO)             	ldA2 R11,'O',sp,(6+1)
     567/    4FC2 : (MACRO)             	st2 R11,'O',sp,(4+1)
     568/    4FCF :                     ;D*E*A*D  R11
     569/    4FCF : (MACRO)             	Ccall _ltoa
     570/    4FD3 : (MACRO)             	cpy2 R12,R15 
     571/    4FD7 : (MACRO)             	Ccall _printstr
     572/    4FDB :                     ;}
     573/    4FDB :                     L54:
     574/    4FDB : (MACRO)             	release 18
     575/    4FE3 : (MACRO)             	Cretn
     576/    4FE5 :                     
     577/    4FE5 :                     ;;function_end$$ _printlint
     578/    4FE5 :                     ;;function_start _printflt void function(float)
     579/    4FE5 :                     _printflt:		
     580/    4FE5 : (MACRO)             	reserve 32
     581/    4FEF : (MACRO)             	st2 R12,'O',sp,(34+1)
     582/    4FFC : 1E                  	inc memaddr				
     583/    4FFD : (MACRO)             	str2 R13,memaddr
     584/    5003 :                     ;void printflt(float s){ //print a float
     585/    5003 :                     ;	printstr(ftoa(s,buffer,3));
     586/    5003 : (MACRO)             	ld4 Rp1p2,'O',sp,(34+1)
     587/    5013 : (MACRO)             	ldA2 R11,'O',sp,(12+1)
     588/    501B : (MACRO)             	st2 R11,'O',sp,(4+1)
     589/    5028 :                     ;D*E*A*D  R11
     590/    5028 : (MACRO)             	ldI4 RL10,3 
     591/    5034 : (MACRO)             	st4 RL10,'O',sp,(8+1)
     592/    5047 :                     ;D*E*A*D  RL10
     593/    5047 : (MACRO)             	Ccall _ftoa
     594/    504B : (MACRO)             	cpy2 R12,R15 
     595/    504F : (MACRO)             	Ccall _printstr
     596/    5053 :                     ;}
     597/    5053 :                     L55:
     598/    5053 : (MACRO)             	release 32
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 11 - 1/27/2021 10:36:34


     599/    505B : (MACRO)             	Cretn
     600/    505D :                     
     601/    505D :                     ;;function_end$$ _printflt
     602/    505D :                     ;;function_start _putxn void function(unsigned char)
     603/    505D :                     _putxn:		
     604/    505D : (MACRO)             	reserve 4
     605/    5061 : (MACRO)             	st1 R12,'O',sp,(6+1)
     606/    506B :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     607/    506B :                     ;	if (x<10){
     608/    506B : (MACRO)             	ld1 R11,'O',sp,(6+1)
     609/    5075 : (MACRO)             	jcI1I R11,10,lbdf,L57
     610/    507B :                     ;D*E*A*D  R11
     611/    507B :                     ;		putc(x+'0');
     612/    507B : (MACRO)             	ldaD R12,7
     613/    5081 : (MACRO)             	ld1 R11,'O',sp,(6+1)
     614/    508B : (MACRO)             	zExt R11 
     615/    508E : (MACRO)             	ldA2 R13,'O',R11,(48)
     616/    5096 :                     ;D*E*A*D  R11
     617/    5096 : (MACRO)             	Ccall _out
     618/    509A :                     ;	} else {
     619/    509A : C0 50 C4            	lbr L58
     620/    509D :                     L57:
     621/    509D :                     ;		putc(x+'A'-10);
     622/    509D : (MACRO)             	ldaD R12,7
     623/    50A3 : (MACRO)             	ld1 R11,'O',sp,(6+1)
     624/    50AD : (MACRO)             	zExt R11 
     625/    50B0 : (MACRO)             	ldA2 R11,'O',R11,(65)
     626/    50B8 : (MACRO)             	alu2I R13,R11,10,smi,smbi
     627/    50C0 :                     ;D*E*A*D  R11
     628/    50C0 : (MACRO)             	Ccall _out
     629/    50C4 :                     ;	}
     630/    50C4 :                     L58:
     631/    50C4 :                     ;}
     632/    50C4 :                     L56:
     633/    50C4 : (MACRO)             	release 4
     634/    50C8 : (MACRO)             	Cretn
     635/    50CA :                     
     636/    50CA :                     ;;function_end$$ _putxn
     637/    50CA :                     ;;function_start _putx void function(unsigned char)
     638/    50CA :                     _putx:		
     639/    50CA : (MACRO)             	reserve 4
     640/    50CE : (MACRO)             	st1 R12,'O',sp,(6+1)
     641/    50D8 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     642/    50D8 :                     ;	putxn(x>>4);
     643/    50D8 : (MACRO)             	ld1 R11,'O',sp,(6+1)
     644/    50E2 : (MACRO)             	zExt R11 
     645/    50E5 : (MACRO)             	shrI2I R11,4
     646/    5105 : (MACRO)             	cpy1 R12,R11
     647/    5107 :                     ;D*E*A*D  R11
     648/    5107 : (MACRO)             	zExt R12 
     649/    510A : (MACRO)             	Ccall _putxn
     650/    510E :                     ;	putxn(x & 0x0F);
     651/    510E : (MACRO)             	ld1 R11,'O',sp,(6+1)
     652/    5118 : (MACRO)             	zExt R11 
     653/    511B : (MACRO)             	alu2I R11,R11,15,ani,ani
     654/    5123 :                     	
     655/    5123 : (MACRO)             	cpy1 R12,R11
     656/    5125 :                     ;D*E*A*D  R11
     657/    5125 : (MACRO)             	zExt R12 
     658/    5128 : (MACRO)             	Ccall _putxn
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 12 - 1/27/2021 10:36:34


     659/    512C :                     ;}
     660/    512C :                     L59:
     661/    512C : (MACRO)             	release 4
     662/    5130 : (MACRO)             	Cretn
     663/    5132 :                     
     664/    5132 :                     ;;function_end$$ _putx
     665/    5132 :                     ;;function_start _printf void function(pointer to char,...)
     666/    5132 :                     _printf:		
     667/    5132 : (MACRO)             	reserve 10
     668/    513C : (MACRO)             	pushr R6
     669/    5140 : (MACRO)             	pushr R7
     670/    5144 : (MACRO)             	reserve 4
     671/    5148 : (MACRO)             	st2 R12,'O',sp,(20+1)
     672/    5155 : 1E                  	inc memaddr				
     673/    5156 : (MACRO)             	str2 R13,memaddr
     674/    515C :                     ;void printf(char *pptr,...){ //limited implementation of printf
     675/    515C :                     ;	register char* ptr=pptr; //try to save on loads/spills
     676/    515C : (MACRO)             	ld2 R7,'O',sp,(20+1) 
     677/    5168 :                     ;	int16_t argslot=0;	//used to align longs
     678/    5168 : (MACRO)             	ldI4 RL10,0 
     679/    5174 : (MACRO)             	st4 RL10,'O',sp,(12+1)
     680/    5187 :                     ;D*E*A*D  RL10
     681/    5187 :                     ;	int16_t * this=(int16_t *)&pptr;
     682/    5187 : (MACRO)             	ldA2 R11,'O',sp,(20+1)
     683/    518F : (MACRO)             	st2 R11,'O',sp,(16+1)
     684/    519C :                     ;D*E*A*D  R11
     685/    519C :                     ;	this++; argslot++; //advance argument pointer and slot #
     686/    519C : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     687/    51A8 : (MACRO)             	incm R11,4
     688/    51AC : (MACRO)             	st2 R11,'O',sp,(16+1)
     689/    51B9 :                     ;D*E*A*D  R11
     690/    51B9 : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     691/    51C9 : (MACRO)             	ldI4 RL8,1 
     692/    51D5 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     693/    51EB :                     ;D*E*A*D  RL8
     694/    51EB : (MACRO)             	st4 RL10,'O',sp,(12+1)
     695/    51FE :                     ;D*E*A*D  RL10
     696/    51FE : C0 5A 90            	lbr L62
     697/    5201 :                     L61:
     698/    5201 :                     ;    while(*ptr) {
     699/    5201 :                     ;		c=*ptr; ptr++;
     700/    5201 : (MACRO)             	ldn1 R6,R7
     701/    5203 : (MACRO)             	incm R7,1
     702/    5204 :                     ;		if (c!='%'){
     703/    5204 : (MACRO)             	jeqU1I R6,37,L64
     704/    520A :                     ;			putc(c);
     705/    520A : (MACRO)             	ldaD R12,7
     706/    5210 : (MACRO)             	cpy1 R13,R6
     707/    5212 :                     ;D*E*A*D  R6
     708/    5212 : (MACRO)             	zExt R13 
     709/    5215 : (MACRO)             	Ccall _out
     710/    5219 :                     ;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
     711/    5219 : (MACRO)              nop1806
     712/    5219 : (MACRO)              nop1806
     713/    5219 : (MACRO)              nop1806
     714/    5219 :                     ;		} else{
     715/    5219 : C0 5A 90            	lbr L65
     716/    521C :                     L64:
     717/    521C :                     ;			c=*ptr;ptr++;
     718/    521C : (MACRO)             	ldn1 R6,R7
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 13 - 1/27/2021 10:36:34


     719/    521E : (MACRO)             	incm R7,1
     720/    521F :                     ;			switch (c){
     721/    521F : (MACRO)             	cpy1 R11,R6
     722/    5221 : (MACRO)             	zExt R11 
     723/    5224 : (MACRO)             	st2 R11,'O',sp,(9+1)
     724/    5231 : (MACRO)             	jcI2I R11,99,lbnf,L88  
     725/    5242 : (MACRO)             	jnI2I R11,108,lbnf,L89
     726/    5253 : (MACRO)             	shl2I R11,1
     727/    5259 : (MACRO)             	ld2 R11,'O',R11,(L90-198) 
     728/    5265 : (MACRO)             	jumpv R11
     729/    526F :                     ;D*E*A*D  R11
     730/    526F : (MACRO)             	orgc
     731/    526F :                     L90:
     732/    526F : 53 ED               	dw L72
     733/    5271 : 52 EB               	dw L70
     734/    5273 : 5A 71               	dw L67
     735/    5275 : 59 28               	dw L83
     736/    5277 : 5A 71               	dw L67
     737/    5279 : 5A 71               	dw L67
     738/    527B : 52 EB               	dw L70
     739/    527D : 5A 71               	dw L67
     740/    527F : 5A 71               	dw L67
     741/    5281 : 55 F3               	dw L76
     742/    5283 : (MACRO)             	orgc
     743/    5283 :                     L88:
     744/    5283 : (MACRO)             	ld2 R11,'O',sp,(9+1) 
     745/    528F : (MACRO)             	jeqU2I R11,88,L75
     746/    529B :                     ;D*E*A*D  R11
     747/    529B : C0 5A 71            	lbr L67
     748/    529E :                     L89:
     749/    529E : (MACRO)             	ld2 R11,'O',sp,(9+1) 
     750/    52AA : (MACRO)             	ldaD R10,115
     751/    52B0 : (MACRO)             	jeqI2 R11,R10,L71
     752/    52BE : (MACRO)             	jcI2 R11,R10,lbnf,L67
     753/    52D0 :                     ;D*E*A*D  R11
     754/    52D0 :                     ;D*E*A*D  R10
     755/    52D0 :                     L92:
     756/    52D0 : (MACRO)             	ld2 R11,'O',sp,(9+1) 
     757/    52DC : (MACRO)             	jeqU2I R11,120,L75
     758/    52E8 :                     ;D*E*A*D  R11
     759/    52E8 : C0 5A 71            	lbr L67
     760/    52EB :                     L70:
     761/    52EB :                     ;					printint(*this++);
     762/    52EB : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     763/    52F7 : (MACRO)             	cpy2 R10,R11
     764/    52FB : (MACRO)             	incm R10,4
     765/    52FF : (MACRO)             	st2 R10,'O',sp,(16+1)
     766/    530C :                     ;D*E*A*D  R10
     767/    530C : (MACRO)             	ld4 Rp1p2,'O',R11,0
     768/    531C :                     ;D*E*A*D  R11
     769/    531C : (MACRO)             	Ccall _printint
     770/    5320 :                     ;					argslot+=1; //next argument slot
     771/    5320 : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     772/    5330 : (MACRO)             	ldI4 RL8,1 
     773/    533C : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     774/    5352 :                     ;D*E*A*D  RL8
     775/    5352 : (MACRO)             	st4 RL10,'O',sp,(12+1)
     776/    5365 :                     ;D*E*A*D  RL10
     777/    5365 :                     ;					break;
     778/    5365 : C0 5A 90            	lbr L68
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 14 - 1/27/2021 10:36:34


     779/    5368 :                     L71:
     780/    5368 :                     ;					printstr((char*) *this++);
     781/    5368 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     782/    5374 : (MACRO)             	cpy2 R10,R11
     783/    5378 : (MACRO)             	incm R10,4
     784/    537C : (MACRO)             	st2 R10,'O',sp,(16+1)
     785/    5389 :                     ;D*E*A*D  R10
     786/    5389 : (MACRO)             	ld4 RL10,'O',R11,0
     787/    5399 :                     ;D*E*A*D  R11
     788/    5399 : (MACRO)             	cpy2 R11,RL10 
     789/    539D :                     ;D*E*A*D  RL10
     790/    539D : (MACRO)             	cpy2 R12,R11 
     791/    53A1 :                     ;D*E*A*D  R11
     792/    53A1 : (MACRO)             	Ccall _printstr
     793/    53A5 :                     ;					argslot+=1; //next argument slot
     794/    53A5 : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     795/    53B5 : (MACRO)             	ldI4 RL8,1 
     796/    53C1 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     797/    53D7 :                     ;D*E*A*D  RL8
     798/    53D7 : (MACRO)             	st4 RL10,'O',sp,(12+1)
     799/    53EA :                     ;D*E*A*D  RL10
     800/    53EA :                     ;					break;
     801/    53EA : C0 5A 90            	lbr L68
     802/    53ED :                     L72:
     803/    53ED :                     ;					if (*ptr=='x'){ //if there's an x
     804/    53ED : (MACRO)             	ldn1 R11,R7
     805/    53EF : (MACRO)             	jneU1I R11,120,L73	
     806/    53F5 :                     ;D*E*A*D  R11
     807/    53F5 :                     ;						ptr++; //skip over the x
     808/    53F5 : (MACRO)             	incm R7,1
     809/    53F6 :                     ;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
     810/    53F6 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     811/    5402 : (MACRO)             	cpy2 R10,R11
     812/    5406 : (MACRO)             	incm R10,4
     813/    540A : (MACRO)             	st2 R10,'O',sp,(16+1)
     814/    5417 :                     ;D*E*A*D  R10
     815/    5417 : (MACRO)             	ld4 RL10,'O',R11,0
     816/    5427 :                     ;D*E*A*D  R11
     817/    5427 : (MACRO)             	cpy2 R11,RL10 
     818/    542B :                     ;D*E*A*D  RL10
     819/    542B : (MACRO)             	alu2I R11,R11,255,ani,ani 
     820/    5433 : (MACRO)             	cpy1 R12,R11
     821/    5435 :                     ;D*E*A*D  R11
     822/    5435 : (MACRO)             	zExt R12 
     823/    5438 : (MACRO)             	Ccall _putx
     824/    543C :                     ;					} else{
     825/    543C : C0 54 7E            	lbr L74
     826/    543F :                     L73:
     827/    543F :                     ;						putc((unsigned int) *this++);		//print as char
     828/    543F : (MACRO)             	ldaD R12,7
     829/    5445 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     830/    5451 : (MACRO)             	cpy2 R10,R11
     831/    5455 : (MACRO)             	incm R10,4
     832/    5459 : (MACRO)             	st2 R10,'O',sp,(16+1)
     833/    5466 :                     ;D*E*A*D  R10
     834/    5466 : (MACRO)             	ld4 RL10,'O',R11,0
     835/    5476 :                     ;D*E*A*D  R11
     836/    5476 : (MACRO)             	cpy2 R13,RL10 
     837/    547A :                     ;D*E*A*D  RL10
     838/    547A : (MACRO)             	Ccall _out
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 15 - 1/27/2021 10:36:34


     839/    547E :                     ;					}
     840/    547E :                     L74:
     841/    547E :                     ;					argslot+=1; //next argument slot
     842/    547E : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     843/    548E : (MACRO)             	ldI4 RL8,1 
     844/    549A : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     845/    54B0 :                     ;D*E*A*D  RL8
     846/    54B0 : (MACRO)             	st4 RL10,'O',sp,(12+1)
     847/    54C3 :                     ;D*E*A*D  RL10
     848/    54C3 :                     ;					break;
     849/    54C3 : C0 5A 90            	lbr L68
     850/    54C6 :                     L75:
     851/    54C6 :                     ;					putx(((uint16_t) *this)>>8);
     852/    54C6 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     853/    54D2 : (MACRO)             	ld4 RL10,'O',R11,0
     854/    54E2 :                     ;D*E*A*D  R11
     855/    54E2 : (MACRO)             	shrU4I RL10,8
     856/    5542 : (MACRO)             	cpy1 R11,RL10
     857/    5544 :                     ;D*E*A*D  RL10
     858/    5544 : (MACRO)             	cpy1 R12,R11
     859/    5546 :                     ;D*E*A*D  R11
     860/    5546 : (MACRO)             	zExt R12 
     861/    5549 : (MACRO)             	Ccall _putx
     862/    554D :                     ;					putx(((uint16_t) *this++)&255);
     863/    554D : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     864/    5559 : (MACRO)             	cpy2 R10,R11
     865/    555D : (MACRO)             	incm R10,4
     866/    5561 : (MACRO)             	st2 R10,'O',sp,(16+1)
     867/    556E :                     ;D*E*A*D  R10
     868/    556E : (MACRO)             	ld4 RL10,'O',R11,0
     869/    557E :                     ;D*E*A*D  R11
     870/    557E : (MACRO)             	ldI4 RL8,255 
     871/    558A : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     872/    55A0 :                     ;D*E*A*D  RL8
     873/    55A0 : (MACRO)             	cpy1 R11,RL10
     874/    55A2 :                     ;D*E*A*D  RL10
     875/    55A2 : (MACRO)             	cpy1 R12,R11
     876/    55A4 :                     ;D*E*A*D  R11
     877/    55A4 : (MACRO)             	zExt R12 
     878/    55A7 : (MACRO)             	Ccall _putx
     879/    55AB :                     ;					argslot+=1; //next argument slot
     880/    55AB : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     881/    55BB : (MACRO)             	ldI4 RL8,1 
     882/    55C7 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     883/    55DD :                     ;D*E*A*D  RL8
     884/    55DD : (MACRO)             	st4 RL10,'O',sp,(12+1)
     885/    55F0 :                     ;D*E*A*D  RL10
     886/    55F0 :                     ;					break;
     887/    55F0 : C0 5A 90            	lbr L68
     888/    55F3 :                     L76:
     889/    55F3 :                     ;					if (*ptr){ //as long as there's something there
     890/    55F3 : 07                  	ldn   R7
     891/    55F4 : C2 59 28            	lbz   L77
     892/    55F7 :                     ;						xord=*ptr++;
     893/    55F7 : (MACRO)             	cpy2 R11,R7 
     894/    55FB : (MACRO)             	incm R7,1
     895/    55FC : (MACRO)             	ldA2 R10,'O',sp,(11+1)
     896/    5604 : 0B                  	ldn R11
     897/    5605 : 5A                  	str R10
     898/    5606 :                     ;D*E*A*D  R10
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 16 - 1/27/2021 10:36:34


     899/    5606 :                     ;						if (argslot&1) {
     900/    5606 : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     901/    5616 : (MACRO)             	ldI4 RL8,1 
     902/    5622 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     903/    5638 :                     ;D*E*A*D  RL8
     904/    5638 : (MACRO)             	ldI4 RL8,0 
     905/    5644 : (MACRO)             	jeqI4 RL10,RL8,L79
     906/    5660 :                     ;D*E*A*D  RL10
     907/    5660 :                     ;D*E*A*D  RL8
     908/    5660 :                     ;							this++;
     909/    5660 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     910/    566C : (MACRO)             	incm R11,4
     911/    5670 : (MACRO)             	st2 R11,'O',sp,(16+1)
     912/    567D :                     ;D*E*A*D  R11
     913/    567D :                     ;							argslot++;
     914/    567D : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     915/    568D : (MACRO)             	ldI4 RL8,1 
     916/    5699 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     917/    56AF :                     ;D*E*A*D  RL8
     918/    56AF : (MACRO)             	st4 RL10,'O',sp,(12+1)
     919/    56C2 :                     ;D*E*A*D  RL10
     920/    56C2 :                     ;						}
     921/    56C2 :                     L79:
     922/    56C2 :                     ;						if(xord=='d'){
     923/    56C2 : (MACRO)             	ld1 R11,'O',sp,(11+1)
     924/    56CC : (MACRO)             	jneU1I R11,100,L81	
     925/    56D2 :                     ;D*E*A*D  R11
     926/    56D2 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     927/    56D2 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     928/    56DE : (MACRO)             	ld4 Rp1p2,'O',R11,0
     929/    56EE :                     ;D*E*A*D  R11
     930/    56EE : (MACRO)             	Ccall _printlint
     931/    56F2 :                     ;							this+=2;				// and advances it 4 bytes
     932/    56F2 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     933/    56FE : (MACRO)             	ldA2 R11,'O',R11,(8)
     934/    5706 : (MACRO)             	st2 R11,'O',sp,(16+1)
     935/    5713 :                     ;D*E*A*D  R11
     936/    5713 :                     ;						} else{
     937/    5713 : C0 58 E0            	lbr L82
     938/    5716 :                     L81:
     939/    5716 :                     ;							putx(((uint16_t) *this)>>8);
     940/    5716 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     941/    5722 : (MACRO)             	ld4 RL10,'O',R11,0
     942/    5732 :                     ;D*E*A*D  R11
     943/    5732 : (MACRO)             	shrU4I RL10,8
     944/    5792 : (MACRO)             	cpy1 R11,RL10
     945/    5794 :                     ;D*E*A*D  RL10
     946/    5794 : (MACRO)             	cpy1 R12,R11
     947/    5796 :                     ;D*E*A*D  R11
     948/    5796 : (MACRO)             	zExt R12 
     949/    5799 : (MACRO)             	Ccall _putx
     950/    579D :                     ;							putx(((uint16_t) *this++)&255);
     951/    579D : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     952/    57A9 : (MACRO)             	cpy2 R10,R11
     953/    57AD : (MACRO)             	incm R10,4
     954/    57B1 : (MACRO)             	st2 R10,'O',sp,(16+1)
     955/    57BE :                     ;D*E*A*D  R10
     956/    57BE : (MACRO)             	ld4 RL10,'O',R11,0
     957/    57CE :                     ;D*E*A*D  R11
     958/    57CE : (MACRO)             	ldI4 RL8,255 
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 17 - 1/27/2021 10:36:34


     959/    57DA : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     960/    57F0 :                     ;D*E*A*D  RL8
     961/    57F0 : (MACRO)             	cpy1 R11,RL10
     962/    57F2 :                     ;D*E*A*D  RL10
     963/    57F2 : (MACRO)             	cpy1 R12,R11
     964/    57F4 :                     ;D*E*A*D  R11
     965/    57F4 : (MACRO)             	zExt R12 
     966/    57F7 : (MACRO)             	Ccall _putx
     967/    57FB :                     ;							putx(((uint16_t) *this)>>8);
     968/    57FB : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     969/    5807 : (MACRO)             	ld4 RL10,'O',R11,0
     970/    5817 :                     ;D*E*A*D  R11
     971/    5817 : (MACRO)             	shrU4I RL10,8
     972/    5877 : (MACRO)             	cpy1 R11,RL10
     973/    5879 :                     ;D*E*A*D  RL10
     974/    5879 : (MACRO)             	cpy1 R12,R11
     975/    587B :                     ;D*E*A*D  R11
     976/    587B : (MACRO)             	zExt R12 
     977/    587E : (MACRO)             	Ccall _putx
     978/    5882 :                     ;							putx(((uint16_t) *this++)&255);
     979/    5882 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
     980/    588E : (MACRO)             	cpy2 R10,R11
     981/    5892 : (MACRO)             	incm R10,4
     982/    5896 : (MACRO)             	st2 R10,'O',sp,(16+1)
     983/    58A3 :                     ;D*E*A*D  R10
     984/    58A3 : (MACRO)             	ld4 RL10,'O',R11,0
     985/    58B3 :                     ;D*E*A*D  R11
     986/    58B3 : (MACRO)             	ldI4 RL8,255 
     987/    58BF : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     988/    58D5 :                     ;D*E*A*D  RL8
     989/    58D5 : (MACRO)             	cpy1 R11,RL10
     990/    58D7 :                     ;D*E*A*D  RL10
     991/    58D7 : (MACRO)             	cpy1 R12,R11
     992/    58D9 :                     ;D*E*A*D  R11
     993/    58D9 : (MACRO)             	zExt R12 
     994/    58DC : (MACRO)             	Ccall _putx
     995/    58E0 :                     ;						}
     996/    58E0 :                     L82:
     997/    58E0 :                     ;						argslot+=2;
     998/    58E0 : (MACRO)             	ld4 RL10,'O',sp,(12+1)
     999/    58F0 : (MACRO)             	ldI4 RL8,2 
    1000/    58FC : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
    1001/    5912 :                     ;D*E*A*D  RL8
    1002/    5912 : (MACRO)             	st4 RL10,'O',sp,(12+1)
    1003/    5925 :                     ;D*E*A*D  RL10
    1004/    5925 :                     ;						break;
    1005/    5925 : C0 5A 90            	lbr L68
    1006/    5928 :                     L77:
    1007/    5928 :                     L83:
    1008/    5928 :                     ;					if (*ptr){ //as long as there's something there
    1009/    5928 : 07                  	ldn   R7
    1010/    5929 : C2 5A 71            	lbz   L84
    1011/    592C :                     ;						if (argslot&1) { //adjust alignment
    1012/    592C : (MACRO)             	ld4 RL10,'O',sp,(12+1)
    1013/    593C : (MACRO)             	ldI4 RL8,1 
    1014/    5948 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
    1015/    595E :                     ;D*E*A*D  RL8
    1016/    595E : (MACRO)             	ldI4 RL8,0 
    1017/    596A : (MACRO)             	jeqI4 RL10,RL8,L86
    1018/    5986 :                     ;D*E*A*D  RL10
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 18 - 1/27/2021 10:36:34


    1019/    5986 :                     ;D*E*A*D  RL8
    1020/    5986 :                     ;							this++;
    1021/    5986 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
    1022/    5992 : (MACRO)             	incm R11,4
    1023/    5996 : (MACRO)             	st2 R11,'O',sp,(16+1)
    1024/    59A3 :                     ;D*E*A*D  R11
    1025/    59A3 :                     ;							argslot++;
    1026/    59A3 : (MACRO)             	ld4 RL10,'O',sp,(12+1)
    1027/    59B3 : (MACRO)             	ldI4 RL8,1 
    1028/    59BF : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
    1029/    59D5 :                     ;D*E*A*D  RL8
    1030/    59D5 : (MACRO)             	st4 RL10,'O',sp,(12+1)
    1031/    59E8 :                     ;D*E*A*D  RL10
    1032/    59E8 :                     ;						}
    1033/    59E8 :                     L86:
    1034/    59E8 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
    1035/    59E8 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
    1036/    59F4 : (MACRO)             	ld4 Rp1p2,'O',R11,0
    1037/    5A04 :                     ;D*E*A*D  R11
    1038/    5A04 : (MACRO)             	Ccall _printflt
    1039/    5A08 :                     ;						this+=2;				// and advances it 4 bytes
    1040/    5A08 : (MACRO)             	ld2 R11,'O',sp,(16+1) 
    1041/    5A14 : (MACRO)             	ldA2 R11,'O',R11,(8)
    1042/    5A1C : (MACRO)             	st2 R11,'O',sp,(16+1)
    1043/    5A29 :                     ;D*E*A*D  R11
    1044/    5A29 :                     ;						argslot+=2;
    1045/    5A29 : (MACRO)             	ld4 RL10,'O',sp,(12+1)
    1046/    5A39 : (MACRO)             	ldI4 RL8,2 
    1047/    5A45 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
    1048/    5A5B :                     ;D*E*A*D  RL8
    1049/    5A5B : (MACRO)             	st4 RL10,'O',sp,(12+1)
    1050/    5A6E :                     ;D*E*A*D  RL10
    1051/    5A6E :                     ;						break;
    1052/    5A6E : C0 5A 90            	lbr L68
    1053/    5A71 :                     L84:
    1054/    5A71 :                     L67:
    1055/    5A71 :                     ;					putc('%');putc(c);
    1056/    5A71 : (MACRO)             	ldaD R12,7
    1057/    5A77 : (MACRO)             	ldaD R13,37
    1058/    5A7D : (MACRO)             	Ccall _out
    1059/    5A81 : (MACRO)             	ldaD R12,7
    1060/    5A87 : (MACRO)             	cpy1 R13,R6
    1061/    5A89 :                     ;D*E*A*D  R6
    1062/    5A89 : (MACRO)             	zExt R13 
    1063/    5A8C : (MACRO)             	Ccall _out
    1064/    5A90 :                     ;			} //switch
    1065/    5A90 :                     L68:
    1066/    5A90 :                     ;		} //%
    1067/    5A90 :                     L65:
    1068/    5A90 :                     ;	} //while
    1069/    5A90 :                     L62:
    1070/    5A90 :                     ;    while(*ptr) {
    1071/    5A90 : 07                  	ldn    R7
    1072/    5A91 : CA 52 01            	lbnz   L61
    1073/    5A94 :                     ;} //prtf
    1074/    5A94 :                     L60:
    1075/    5A94 : (MACRO)             	release 4
    1076/    5A98 : (MACRO)             	popr R7
    1077/    5A9D : (MACRO)             	popr R6
    1078/    5AA2 : (MACRO)             	release 10
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 19 - 1/27/2021 10:36:34


    1079/    5AAA : (MACRO)             	Cretn
    1080/    5AAC :                     
    1081/    5AAC :                     ;;function_end$$ _printf
    1082/    5AAC :                     ;;function_start _exit void function(long int)
    1083/    5AAC :                     _exit:		
    1084/    5AAC : (MACRO)             	reserve 8
    1085/    5AB4 : (MACRO)             	st2 R12,'O',sp,(10+1)
    1086/    5AC1 : 1E                  	inc memaddr				
    1087/    5AC2 : (MACRO)             	str2 R13,memaddr
    1088/    5AC8 :                     ;D*E*A*D  memaddr
    1089/    5AC8 :                     ;void exit(int16_t code){
    1090/    5AC8 :                     ;	printf("exit %d\n",code);
    1091/    5AC8 : (MACRO)             	ldaD R12,L94
    1092/    5ACE : (MACRO)             	ld4 RL10,'O',sp,(10+1)
    1093/    5ADE : (MACRO)             	st4 RL10,'O',sp,(4+1)
    1094/    5AF1 :                     ;D*E*A*D  RL10
    1095/    5AF1 : (MACRO)             	Ccall _printf
    1096/    5AF5 :                     L95:
    1097/    5AF5 :                     ;	while(1);
    1098/    5AF5 :                     L96:
    1099/    5AF5 : C0 5A F5            	lbr L95
    1100/    5AF8 :                     ;}
    1101/    5AF8 :                     L93:
    1102/    5AF8 : (MACRO)             	release 8
    1103/    5B00 : (MACRO)             	Cretn
    1104/    5B02 :                     
    1105/    5B02 :                     ;;function_end$$ _exit
    1106/    5B02 :                     ;;function_start _memcmp int function(pointer to const void,pointer to const void,unsigned long)
    1107/    5B02 :                     _memcmp:		
    1108/    5B02 : (MACRO)             	reserve 6
    1109/    5B08 : (MACRO)             	pushr R6
    1110/    5B0C : (MACRO)             	pushr R7
    1111/    5B10 : (MACRO)             	ld4 RL6,'O',sp,(16+1)
    1112/    5B20 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, uint16_t Count){
    1113/    5B20 :                     ;    int v = 0;
    1114/    5B20 : (MACRO)             	st2I 0,'O',sp,(8+1)
    1115/    5B2F :                     ;    p1 = (unsigned char *)Ptr1;
    1116/    5B2F : (MACRO)             	st2 R12,'O',sp,(6+1)
    1117/    5B3C :                     ;    p2 = (unsigned char *)Ptr2;
    1118/    5B3C : (MACRO)             	st2 R13,'O',sp,(4+1)
    1119/    5B49 : C0 5B A9            	lbr L100
    1120/    5B4C :                     L99:
    1121/    5B4C :                     ;    while(Count-- > 0 && v == 0) {
    1122/    5B4C :                     ;        v = *(p1++) - *(p2++);
    1123/    5B4C : (MACRO)             	ld2 R11,'O',sp,(6+1) 
    1124/    5B58 : (MACRO)             	cpy2 R10,R11
    1125/    5B5C : (MACRO)             	incm R10,1
    1126/    5B5D : (MACRO)             	st2 R10,'O',sp,(6+1)
    1127/    5B6A :                     ;D*E*A*D  R10
    1128/    5B6A : (MACRO)             	ld2 R10,'O',sp,(4+1) 
    1129/    5B76 : (MACRO)             	cpy2 R9,R10
    1130/    5B7A : (MACRO)             	incm R9,1
    1131/    5B7B : (MACRO)             	st2 R9,'O',sp,(4+1)
    1132/    5B88 :                     ;D*E*A*D  R9
    1133/    5B88 : (MACRO)             	ldn1 R11,R11	
    1134/    5B8A : (MACRO)             	zExt R11 
    1135/    5B8D : (MACRO)             	ldn1 R10,R10	
    1136/    5B8F : (MACRO)             	zExt R10 
    1137/    5B92 : (MACRO)             	alu2 R11,R11,R10,sm,smb
    1138/    5B9C :                     ;D*E*A*D  R10
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 20 - 1/27/2021 10:36:34


    1139/    5B9C : (MACRO)             	st2 R11,'O',sp,(8+1)
    1140/    5BA9 :                     ;D*E*A*D  R11
    1141/    5BA9 :                     ;    }
    1142/    5BA9 :                     L100:
    1143/    5BA9 :                     ;    while(Count-- > 0 && v == 0) {
    1144/    5BA9 : (MACRO)             	cpy4 RL10,RL6
    1145/    5BB1 :                     ;D*E*A*D  RL6
    1146/    5BB1 : (MACRO)             	ldI4 RL8,1 
    1147/    5BBD : (MACRO)             	alu4 RL6,RL10,RL8,sm,smb
    1148/    5BD3 :                     ;D*E*A*D  RL8
    1149/    5BD3 : (MACRO)             	ldI4 RL8,0 
    1150/    5BDF : (MACRO)             	jeqI4 RL10,RL8,L102
    1151/    5BFB :                     ;D*E*A*D  RL10
    1152/    5BFB :                     ;D*E*A*D  RL8
    1153/    5BFB : (MACRO)             	ld2 R11,'O',sp,(8+1) 
    1154/    5C07 : (MACRO)             	jzU2 R11,L99
    1155/    5C0F :                     ;D*E*A*D  R11
    1156/    5C0F :                     L102:
    1157/    5C0F :                     ;    return v;
    1158/    5C0F : (MACRO)             	ld2 R15,'O',sp,(8+1) 
    1159/    5C1B :                     L98:
    1160/    5C1B : (MACRO)             	popr R7
    1161/    5C20 : (MACRO)             	popr R6
    1162/    5C25 : (MACRO)             	release 6
    1163/    5C2B : (MACRO)             	Cretn
    1164/    5C2D :                     
    1165/    5C2D :                     ;;function_end$$ _memcmp
    1166/    5C2D :                     ;;function_start _memcpy pointer to void function(pointer to void,pointer to const void,unsigned long)
    1167/    5C2D :                     _memcpy:		
    1168/    5C2D : (MACRO)             	reserve 4
    1169/    5C31 : (MACRO)             	pushr R6
    1170/    5C35 : (MACRO)             	pushr R7
    1171/    5C39 : (MACRO)             	ld4 RL6,'O',sp,(14+1)
    1172/    5C49 :                     ;void* memcpy(void* dest, const void* src, uint16_t count) {
    1173/    5C49 :                     ;        char* dst8 = (char*)dest;
    1174/    5C49 : (MACRO)             	st2 R12,'O',sp,(6+1)
    1175/    5C56 :                     ;        char* src8 = (char*)src;
    1176/    5C56 : (MACRO)             	st2 R13,'O',sp,(4+1)
    1177/    5C63 : C0 5C A4            	lbr L105
    1178/    5C66 :                     L104:
    1179/    5C66 :                     ;        while (count--) {
    1180/    5C66 :                     ;            *dst8++ = *src8++;
    1181/    5C66 : (MACRO)             	ld2 R11,'O',sp,(6+1) 
    1182/    5C72 : (MACRO)             	cpy2 R10,R11
    1183/    5C76 : (MACRO)             	incm R10,1
    1184/    5C77 : (MACRO)             	st2 R10,'O',sp,(6+1)
    1185/    5C84 :                     ;D*E*A*D  R10
    1186/    5C84 : (MACRO)             	ld2 R10,'O',sp,(4+1) 
    1187/    5C90 : (MACRO)             	cpy2 R9,R10
    1188/    5C94 :                     ;D*E*A*D  R10
    1189/    5C94 : (MACRO)             	incm R9,1
    1190/    5C95 : (MACRO)             	st2 R9,'O',sp,(4+1)
    1191/    5CA2 :                     ;D*E*A*D  R9
    1192/    5CA2 : 0A                  	ldn R10
    1193/    5CA3 : 5B                  	str R11
    1194/    5CA4 :                     ;D*E*A*D  R11
    1195/    5CA4 :                     ;        }
    1196/    5CA4 :                     L105:
    1197/    5CA4 :                     ;        while (count--) {
    1198/    5CA4 : (MACRO)             	cpy4 RL10,RL6
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 21 - 1/27/2021 10:36:34


    1199/    5CAC :                     ;D*E*A*D  RL6
    1200/    5CAC : (MACRO)             	ldI4 RL8,1 
    1201/    5CB8 : (MACRO)             	alu4 RL6,RL10,RL8,sm,smb
    1202/    5CCE :                     ;D*E*A*D  RL10
    1203/    5CCE :                     ;D*E*A*D  RL8
    1204/    5CCE : (MACRO)             	ldI4 RL8,0 
    1205/    5CDA : (MACRO)             	jneU4 RL10,RL8,L104
    1206/    5CF9 :                     ;        return dest;
    1207/    5CF9 : (MACRO)             	cpy2 R15,R12 
    1208/    5CFD :                     L103:
    1209/    5CFD : (MACRO)             	popr R7
    1210/    5D02 : (MACRO)             	popr R6
    1211/    5D07 : (MACRO)             	release 4
    1212/    5D0B : (MACRO)             	Cretn
    1213/    5D0D :                     
    1214/    5D0D :                     ;;function_end$$ _memcpy
    1215/    5D0D :                     ;;function_start _memset pointer to void function(pointer to void,long int,unsigned long)
    1216/    5D0D :                     _memset:		
    1217/    5D0D : (MACRO)             	reserve 2
    1218/    5D0F : (MACRO)             	pushr R6
    1219/    5D13 : (MACRO)             	pushr R7
    1220/    5D17 : (MACRO)             	ld4 RL6,'O',sp,(12+1)
    1221/    5D27 :                     ;{
    1222/    5D27 :                     ;    unsigned char* p=s;
    1223/    5D27 : (MACRO)             	st2 R12,'O',sp,(4+1)
    1224/    5D34 : C0 5D A4            	lbr L109
    1225/    5D37 :                     L108:
    1226/    5D37 :                     ;    while(n){
    1227/    5D37 :                     ;        *p = (unsigned char)c;
    1228/    5D37 : (MACRO)             	ld2 R11,'O',sp,(4+1) 
    1229/    5D43 : (MACRO)             	str1 RL6,R11
    1230/    5D45 :                     ;D*E*A*D  RL6
    1231/    5D45 :                     ;D*E*A*D  R11
    1232/    5D45 :                     ;        p++;
    1233/    5D45 : (MACRO)             	ld2 R11,'O',sp,(4+1) 
    1234/    5D51 : (MACRO)             	incm R11,1
    1235/    5D52 : (MACRO)             	st2 R11,'O',sp,(4+1)
    1236/    5D5F :                     ;D*E*A*D  R11
    1237/    5D5F :                     ;        n--;
    1238/    5D5F : (MACRO)             	ld4 RL10,'O',sp,(16+1)
    1239/    5D6F : (MACRO)             	ldI4 RL8,1 
    1240/    5D7B : (MACRO)             	alu4 RL10,RL10,RL8,sm,smb
    1241/    5D91 :                     ;D*E*A*D  RL8
    1242/    5D91 : (MACRO)             	st4 RL10,'O',sp,(16+1)
    1243/    5DA4 :                     ;D*E*A*D  RL10
    1244/    5DA4 :                     ;	}
    1245/    5DA4 :                     L109:
    1246/    5DA4 :                     ;    while(n){
    1247/    5DA4 : (MACRO)             	ld4 RL10,'O',sp,(16+1)
    1248/    5DB4 : (MACRO)             	ldI4 RL8,0 
    1249/    5DC0 : (MACRO)             	jneU4 RL10,RL8,L108
    1250/    5DDF :                     ;    return s;
    1251/    5DDF : (MACRO)             	cpy2 R15,R12 
    1252/    5DE3 :                     L107:
    1253/    5DE3 : (MACRO)             	popr R7
    1254/    5DE8 : (MACRO)             	popr R6
    1255/    5DED : (MACRO)             	release 2
    1256/    5DEF : (MACRO)             	Cretn
    1257/    5DF1 :                     
    1258/    5DF1 :                     ;;function_end$$ _memset
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 22 - 1/27/2021 10:36:34


    1259/    5DF1 :                     ;;function_start _nstdlibincluder void function(void)
    1260/    5DF1 :                     _nstdlibincluder:		
    1261/    5DF1 :                     ;void nstdlibincluder(){
    1262/    5DF1 :                     ;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
    1263/    5DF1 :                     	include nstdlib.inc
(1)    1/    5DF1 :                     ;nstdlib.inc includes assembly versions of nstdlib routines strcpy, strcmp
(1)    2/    5DF1 :                     ;Oct 1 first test seems ok
(1)    3/    5DF1 :                     ;20-08-01 moved in dubdabx
(1)    4/    5DF1 : =>UNDEFINED          IFNDEF _DUBDABX		;avoid double define
(1)    5/    5DF1 : =>UNDEFINED           IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)    6/    5DF1 :                        align 256			;wjr 20-05-23
(1)    7/    5E00 :                     _dubdabx:	
(1)    8/    5E00 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)    9/    5E00 :                     ;thanks to Charles Richmond for the suggestion and code
(1)   10/    5E00 :                     ;long interger is passed in rp1p2
(1)   11/    5E00 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)   12/    5E00 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)   13/    5E00 :                     ;r8-11 are used as temps
(1)   14/    5E00 :                     ;r8 is the working pointer
(1)   15/    5E00 :                     ;r15.0 is bit count(32) and the return value register
(1)   16/    5E00 :                     ;r9.0 is digit count
(1)   17/    5E00 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)   18/    5E00 : (MACRO)             	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)   19/    5E0C : (MACRO)             	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)   20/    5E18 : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)   21/    5E1C : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)   22/    5E1E : A9                  	plo r9
(1)   23/    5E1F :                     $$clrlp:	;clear the passed buffer
(1)   24/    5E1F : F8 00               	ldi 0	
(1)   25/    5E21 : 58                  	str r8	;clear a byte
(1)   26/    5E22 : 18                  	inc r8
(1)   27/    5E23 : 29                  	dec r9
(1)   28/    5E24 : 89                  	glo r9	;check the count
(1)   29/    5E25 : 3A 1F               	bnz $$clrlp ;back for more
(1)   30/    5E27 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)   31/    5E2B :                     
(1)   32/    5E2B : F8 20               	ldi 32	;bit count
(1)   33/    5E2D : AF                  	plo r15
(1)   34/    5E2E :                     ;now i'm going to spin off any leading 0's in the binary number
(1)   35/    5E2E :                     $$cktop:
(1)   36/    5E2E : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)   37/    5E2F : FE                  	shl		;check for a 1
(1)   38/    5E30 : 33 43               	bdf $$bitloop	;move on if we have one
(1)   39/    5E32 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)   40/    5E3E : 2F                  	dec r15		;reduce the number of times to shift
(1)   41/    5E3F : 8F                  	glo r15
(1)   42/    5E40 : 3A 2E               	bnz $$cktop	;
(1)   43/    5E42 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)   44/    5E43 :                     $$bitloop:
(1)   45/    5E43 : F8 0A               	ldi 10	;digit count
(1)   46/    5E45 : A9                  	plo r9
(1)   47/    5E46 :                     $$dcklp:
(1)   48/    5E46 : 08                  	ldn r8 	;pick up a digit
(1)   49/    5E47 : FF 05               	smi 5	;see if it's greater than 4
(1)   50/    5E49 : 3B 4E               	bnf $$dnoadd ;if not, bypass add
(1)   51/    5E4B : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)   52/    5E4D : 58                  	str r8	;put it back
(1)   53/    5E4E :                     $$dnoadd:
(1)   54/    5E4E : 18                  	inc r8
(1)   55/    5E4F : 29                  	dec r9	;decrement digit count
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(nstdlib.inc) - Page 23 - 1/27/2021 10:36:34


(1)   56/    5E50 : 89                  	glo r9
(1)   57/    5E51 : 3A 46               	bnz $$dcklp ;and back for next digit
(1)   58/    5E53 :                     	
(1)   59/    5E53 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)   60/    5E5F :                     	
(1)   61/    5E5F : F8 0A               	ldi 10	;load the digit count again
(1)   62/    5E61 : A9                  	plo r9
(1)   63/    5E62 :                     ;r8 is now just past the units location and ready to walk back
(1)   64/    5E62 :                     $$dshlp:
(1)   65/    5E62 : 28                  	dec r8	;walk back from 0's position
(1)   66/    5E63 : 08                  	ldn r8	;get the digit back
(1)   67/    5E64 : 7E                  	shlc	;continue the shift
(1)   68/    5E65 : BF                  	phi r15 ;save it for the carry test
(1)   69/    5E66 : FA 0F               	ani 0x0f ;clear the 10 bit
(1)   70/    5E68 : 58                  	str r8	;put the digit back
(1)   71/    5E69 : 9F                  	ghi r15	;now test for carry
(1)   72/    5E6A : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)   73/    5E6C : 29                  	dec r9	;decrement the digit count
(1)   74/    5E6D : 89                  	glo r9
(1)   75/    5E6E : 3A 62               	bnz $$dshlp ;back for more if needed
(1)   76/    5E70 :                     	
(1)   77/    5E70 : 2F                  	dec r15
(1)   78/    5E71 : 8F                  	glo r15
(1)   79/    5E72 : 3A 43               	bnz $$bitloop
(1)   80/    5E74 :                     	
(1)   81/    5E74 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)   82/    5E78 : F8 0A               	ldi 10		;digit count again
(1)   83/    5E7A : A9                  	plo r9
(1)   84/    5E7B :                     $$upnxt:
(1)   85/    5E7B : 08                  	ldn r8		;get digit
(1)   86/    5E7C : F9 30               	ori 0x30	;make ascii
(1)   87/    5E7E : 58                  	str r8		;put it back
(1)   88/    5E7F : 18                  	inc r8		;next digit
(1)   89/    5E80 : 29                  	dec r9		;counter
(1)   90/    5E81 : 89                  	glo r9
(1)   91/    5E82 : 3A 7B               	bnz $$upnxt	;upgrade all 10 spots
(1)   92/    5E84 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)   93/    5E8C : EE                  	sex memaddr	;set up
(1)   94/    5E8D : F8 0A               	ldi 10		;max number of 0's to skip
(1)   95/    5E8F : F7                  	sm		;desired number of digits to skip
(1)   96/    5E90 : E2                  	sex sp		;reset index register
(1)   97/    5E91 : A9                  	plo r9		;number of leading 0's to skip
(1)   98/    5E92 :                     $$cknext:
(1)   99/    5E92 : 0F                  	ldn r15		;check digit
(1)  100/    5E93 : FF 30               	smi 0x30	;for '0'
(1)  101/    5E95 : 3A 9C               	bnz $$done
(1)  102/    5E97 : 1F                  	inc r15		;next digit
(1)  103/    5E98 : 29                  	dec r9		;reduce count
(1)  104/    5E99 : 89                  	glo r9
(1)  105/    5E9A : 3A 92               	bnz $$cknext
(1)  106/    5E9C :                     $$done:
(1)  107/    5E9C : (MACRO)             	cretn
(1)  108/    5E9E : [5]                   ENDIF	
(1)  109/    5E9E : [4]                  ENDIF
(1)  110/    5E9E :                     
(1)  111/    5E9E :                     ;char * strcpy(char * to, const char *from)
(1)  112/    5E9E :                     	align 64
(1)  113/    5EC0 :                     _strcpy:
(1)  114/    5EC0 :                     ;char *save = to; (to is R12, from is R13)
(1)  115/    5EC0 : 8C                  	glo R12	
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(nstdlib.inc) - Page 24 - 1/27/2021 10:36:34


(1)  116/    5EC1 : AF                  	plo R15
(1)  117/    5EC2 : 9C                  	ghi R12
(1)  118/    5EC3 : BF                  	phi R15
(1)  119/    5EC4 :                     ;for (; (*to = *from) != 0; ++from, ++to);
(1)  120/    5EC4 : 4D                  __strcpy: lda R13
(1)  121/    5EC5 : 5C                  	str R12
(1)  122/    5EC6 : 1C                  	inc R12
(1)  123/    5EC7 : 3A C4               	bnz __strcpy
(1)  124/    5EC9 :                     ;return(save);
(1)  125/    5EC9 : (MACRO)             	cretn
(1)  126/    5ECB :                     ;}
(1)  127/    5ECB :                     
(1)  128/    5ECB :                     
(1)  129/    5ECB :                     ;int strcmp(const char *s1, const char *s2){  s1 will be R12, s2 R13
(1)  130/    5ECB :                     _strcmp:	;entry point from C program
(1)  131/    5ECB :                     ;  int ret = 0;
(1)  132/    5ECB : (MACRO)             	ld2z	R15	;ret is R15
(1)  133/    5ECF :                     ;  while (!(ret = *(unsigned char *) s1 - *(unsigned char *) s2) && *s2) ++s1, ++s2;
(1)  134/    5ECF : 22                  	dec	sp	;make a work area
(1)  135/    5ED0 :                     __strcmplp:
(1)  136/    5ED0 : 4D                  	lda	R13	;get string 2 character
(1)  137/    5ED1 : 52                  	str	sp	;prep for compare
(1)  138/    5ED2 : 4C                  	lda	R12	;get string 1 character
(1)  139/    5ED3 : F7                  	sm		;subtract string 2 char from string 1
(1)  140/    5ED4 : 3A DC               	bnz	__strcmpne ;strings not equal quit
(1)  141/    5ED6 :                     	
(1)  142/    5ED6 : 02                  	ldn	sp	;check string 2 character
(1)  143/    5ED7 : 3A D0               	bnz	__strcmplp ;back for more if not done
(1)  144/    5ED9 : 12                  	inc	sp	;release the work area
(1)  145/    5EDA : (MACRO)             	cretn		;back to caler with 0 in R15
(1)  146/    5EDC :                     	
(1)  147/    5EDC :                     __strcmpne:	;here I know they're not equal
(1)  148/    5EDC : 12                  	inc	sp		;release the work area
(1)  149/    5EDD : 33 E2               	bdf	__strcmpgt	;string1>string2
(1)  150/    5EDF : 2F                  	dec	R15		;string 1<string 2, return -1
(1)  151/    5EE0 : (MACRO)             	cretn
(1)  152/    5EE2 :                     __strcmpgt:
(1)  153/    5EE2 : 1F                  	inc	R15		;string1>string2, return 1
(1)  154/    5EE3 : (MACRO)             	cretn
(1)  155/    5EE5 :                     
    1264/    5EE5 :                     ;}
    1265/    5EE5 :                     L111:
    1266/    5EE5 : (MACRO)             	Cretn
    1267/    5EE7 :                     
    1268/    5EE7 :                     ;;function_end$$ _nstdlibincluder
    1269/    5EE7 : (MACRO)             	orgc
    1270/    5EE7 :                     L94:
    1271/    5EE7 : 65                  	db 101
    1272/    5EE8 : 78                  	db 120
    1273/    5EE9 : 69                  	db 105
    1274/    5EEA : 74                  	db 116
    1275/    5EEB : 20                  	db 32
    1276/    5EEC : 25                  	db 37
    1277/    5EED : 64                  	db 100
    1278/    5EEE : 0A                  	db 10
    1279/    5EEF : 00                  	db 0
    1280/    5EF0 :                     	align 4
    1281/    5EF0 :                     L29:
    1282/    5EF0 : BF 80 00 00         	dd 0xbf800000
    1283/    5EF4 :                     	align 4
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 25 - 1/27/2021 10:36:34


    1284/    5EF4 :                     L28:
    1285/    5EF4 : 00 00 00 00         	dd 0x0
    1286/    5EF8 :                     L3:
    1287/    5EF8 : 74                  	db 116
    1288/    5EF9 : 65                  	db 101
    1289/    5EFA : 73                  	db 115
    1290/    5EFB : 74                  	db 116
    1291/    5EFC : 20                  	db 32
    1292/    5EFD : 66                  	db 102
    1293/    5EFE : 72                  	db 114
    1294/    5EFF : 6F                  	db 111
    1295/    5F00 : 67                  	db 103
    1296/    5F01 : 3D                  	db 61
    1297/    5F02 : 25                  	db 37
    1298/    5F03 : 66                  	db 102
    1299/    5F04 : 0A                  	db 10
    1300/    5F05 : 00                  	db 0
    1301/    5F06 :                     	align 4
    1302/    5F08 :                     L2:
    1303/    5F08 : BF 9D F3 B6         	dd 0xbf9df3b6
    1304/    5F0C :                     	include lcc1802epiloCX.inc
(1)    1/    5F0C :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    5F0C :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    5F0C :                     ;this is the version published with the lcc1802121229 release
(1)    4/    5F0C :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    5F0C :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    5F0C :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    5F0C :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    5F0C :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    5F0C :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    5F0C :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    5F0C :                     ;feb 27 changed stack to start at 7fff
(1)   12/    5F0C :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    5F0C :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    5F0C :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    5F0C :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/    5F0C :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/    5F0C :                     ;16-09-20 allow stack relocation 
(1)   18/    5F0C :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/    5F0C :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/    5F0C :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/    5F0C :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/    5F0C :                     ;17-04-09 don't include call/return for 1806
(1)   23/    5F0C :                     ;17-10-17 SCRT routines changed to clean stack model i.e. push is stxd stxd, pop is inc lda inc ldn
(1)   24/    5F0C :                     ;17-10-19 using CPUSPEED instead of LCC1802CPUSPEED, also STACKLOC instead of LCCSTACKLOC
(1)   25/    5F0C :                     ;17-10-23 extending work area protection from 10-13 above for 1802 as well as 1805
(1)   26/    5F0C : =0EH                rwork:	equ	memAddr	;work register
(1)   27/    5F0C :                     ;17-11-25 conditional include for register saves
(1)   28/    5F0C :                     ;18-01-28 changed onems() to always use 4 instruction loop, accommodate slower CPU speed
(1)   29/    5F0C :                     ;20-04-28 specific version for COMX-35/Crosslib
(1)   30/    5F0C :                     ;20-04-29 saving registers for COMX basic
(1)   31/    5F0C :                     ;20-04-30 changing init for COMX - saving R4&5, using my own SCRT routines.
(1)   32/    5F0C :                     ;20-05-01 saving D around Call/return
(1)   33/    5F0C :                     ;20-05-18 added sex r2 in SCRT return routine
(1)   34/    5F0C :                     ;20-05-23 align for dubdabx - really should move to nstdlib.inc
(1)   35/    5F0C :                     ;20-06-19 changed lbr die to br on return from main
(1)   36/    5F0C :                     ;20-07-10 (Marcel) added orgc at start to solve issue with branches to data area (suggested by Bill)
(1)   37/    5F0C :                     ;20-08-01 dubdabx moved to nstdlib.inc
(1)   38/    5F0C : (MACRO)              orgc
(1)   39/    5F0C :                     ;;function_start lcc1802init.inc void function(void)
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(lcc1802epiloCX.inc) - Page 26 - 1/27/2021 10:36:34


(1)   40/    5F0C :                     lcc1802init:
(1)   41/    5F0C : =>UNDEFINED           IFDEF SAVEREGS
(1)   42/    5F0C :                         include "saveregs.inc"
(1)   43/    5F0C : [41]                  ENDIF
(1)   44/    5F0C : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX - don't set stack or PC, return to BASIC at end
(1)   45/    5F0C : (MACRO)               	pushr 4
(1)   46/    5F10 : (MACRO)               	pushr 5
(1)   47/    5F14 : (MACRO)               	pushr 7			;wjr 20-04-29 save/restore BASIC registers
(1)   48/    5F18 : (MACRO)               	pushr 9	
(1)   49/    5F1C : (MACRO)               	pushr 11
(1)   50/    5F20 : (MACRO)               	pushr 15
(1)   51/    5F24 : (MACRO)             	ldiReg	RCALL,_call
(1)   52/    5F2A : (MACRO)             	ldiReg	RRET,_return
(1)   53/    5F30 : (MACRO)               	Ccall _main		;wjr 20-04-28 start the C program
(1)   54/    5F34 : (MACRO)               	popr  15		;wjr 20-04-29 save/restore BASIC registers
(1)   55/    5F39 : (MACRO)               	popr  11
(1)   56/    5F3E : (MACRO)               	popr  9
(1)   57/    5F43 : (MACRO)               	popr  7
(1)   58/    5F48 : (MACRO)               	popr 5
(1)   59/    5F4D : (MACRO)               	popr 4
(1)   60/    5F52 : (MACRO)               	Cretn			;wjr 20-04-28 hopefully back to COMX Basic
(1)   61/    5F54 : =>FALSE               ELSE
(1)   62/    5F54 :                       IF    MOMCPU<>$1805		;for 1806 use SCAL 
(1)   63/    5F54 :                     	ldiReg	RCALL,_call
(1)   64/    5F54 :                     	ldiReg	RRET,_return
(1)   65/    5F54 :                       ELSE
(1)   66/    5F54 :                     	ldiReg	RCALL,$$_die; _call
(1)   67/    5F54 :                     	ldiReg	RRET,$$_die; _return
(1)   68/    5F54 : [62]                  ENDIF
(1)   69/    5F54 :                     	  IFNDEF  STACKLOC		;wjr 16-09-20 allow stack relocation
(1)   70/    5F54 :                     		ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   71/    5F54 :                     	  ELSEIF				;wjr 16-09-20
(1)   72/    5F54 :                     		ldiReg	SP,STACKLOC	;wjr 16-09-20 start stack as specified
(1)   73/    5F54 : [69]                	  ENDIF				;wjr 16-09-20
(1)   74/    5F54 :                     		sex	SP
(1)   75/    5F54 :                     		ldiReg	RPC,$$_00000
(1)   76/    5F54 :                     		sep	RPC
(1)   77/    5F54 :                     	$$_00000:
(1)   78/    5F54 :                     		Ccall _main	;call the main routine
(1)   79/    5F54 :                     	$$_die:	br	$$_die		;loop here when main returns
(1)   80/    5F54 :                     		db	0xde,0xad
(1)   81/    5F54 : [44]                  ENDIF
(1)   82/    5F54 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   83/    5F54 :                     _setqOn:
(1)   84/    5F54 : 7B                  	seq
(1)   85/    5F55 : (MACRO)             	Cretn
(1)   86/    5F57 :                     _setqOff:
(1)   87/    5F57 : 7A                  	req
(1)   88/    5F58 : (MACRO)             	Cretn
(1)   89/    5F5A : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   90/    5F5A :                     _modU2:	;16 bit unsigned remainder
(1)   91/    5F5A :                     	; just calls the 16 bit division then puts remainder into return value
(1)   92/    5F5A : (MACRO)                 Ccall _divU2
(1)   93/    5F5E : 8C                      glo regArg1
(1)   94/    5F5F : AF                      plo retVal
(1)   95/    5F60 : 9C                      ghi regArg1
(1)   96/    5F61 : BF                      phi retVal
(1)   97/    5F62 : (MACRO)                 Cretn
(1)   98/    5F64 :                         
(1)   99/    5F64 :                     _modI2:	;16 bit signed remainder
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(lcc1802epiloCX.inc) - Page 27 - 1/27/2021 10:36:34


(1)  100/    5F64 :                     	; just calls the 16 bit division then puts remainder into return value
(1)  101/    5F64 : (MACRO)                 Ccall _divI2
(1)  102/    5F68 : 8C                      glo regArg1
(1)  103/    5F69 : AF                      plo retVal
(1)  104/    5F6A : 9C                      ghi regArg1
(1)  105/    5F6B : BF                      phi retVal
(1)  106/    5F6C : (MACRO)                 Cretn
(1)  107/    5F6E : [89]                 ENDIF
(1)  108/    5F6E :                     _out4:	
(1)  109/    5F6E : 8C                  	glo	regArg1
(1)  110/    5F6F : 22                  	dec	sp
(1)  111/    5F70 : 52                  	str	sp
(1)  112/    5F71 : 64                  	out	4
(1)  113/    5F72 : (MACRO)             	Cretn
(1)  114/    5F74 :                     
(1)  115/    5F74 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)  116/    5F74 : =>TRUE                if MOMCPU<>$1805		;for 1806 use SCAL
(1)  117/    5F74 :                     	align 32
(1)  118/    5F80 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)  119/    5F80 : D3                  	sep     R3 ;go to subroutine
(1)  120/    5F81 : E2                  _call:	sex	SP ;make sure X=SP
(1)  121/    5F82 : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  122/    5F82 : BF                  	phi	r15	;save D #wjr 20-05-01
(1)  123/    5F83 : [121]                 ENDIF
(1)  124/    5F83 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)  125/    5F84 : 73                  	stxd
(1)  126/    5F85 : 96                  	ghi	retAddr
(1)  127/    5F86 : 73                  	stxd	
(1)  128/    5F87 : 83                  	glo	RPC ;copy old PC to retAddr
(1)  129/    5F88 : A6                  	plo	retAddr
(1)  130/    5F89 : 93                  	ghi	RPC
(1)  131/    5F8A : B6                  	phi	retAddr
(1)  132/    5F8B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)  133/    5F8C : B3                  	phi	RPC
(1)  134/    5F8D : 46                  	lda	retAddr
(1)  135/    5F8E : A3                  	plo	RPC
(1)  136/    5F8F : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  137/    5F8F : 9F                  	ghi	r15	;save D #wjr 20-05-01
(1)  138/    5F90 : [136]                 ENDIF
(1)  139/    5F90 : 30 80               	br	_call-1
(1)  140/    5F92 :                     
(1)  141/    5F92 :                     ;Standard subroutine return 
(1)  142/    5F92 : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  143/    5F92 :                     	align 16
(1)  144/    5FA0 : [142]                 ENDIF
(1)  145/    5FA0 : D3                  	sep	RPC	;return to the original program
(1)  146/    5FA1 :                     _return: 
(1)  147/    5FA1 : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  148/    5FA1 : BF                  	phi	r15	;save D #wjr 20-05-01
(1)  149/    5FA2 : E2                          sex r2		;fix x register per marcel
(1)  150/    5FA3 : [147]                 ENDIF
(1)  151/    5FA3 : 86                  	glo	retAddr	;transfer the current return address to RPC
(1)  152/    5FA4 : A3                  	plo	RPC
(1)  153/    5FA5 : 96                  	ghi	retAddr
(1)  154/    5FA6 : B3                  	phi	RPC
(1)  155/    5FA7 : 12                  	inc 	SP
(1)  156/    5FA8 : 42                  	lda	SP	;pick up old return address
(1)  157/    5FA9 : B6                  	phi	retAddr
(1)  158/    5FAA : 02                  	ldn	SP
(1)  159/    5FAB : A6                  	plo	retAddr
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(lcc1802epiloCX.inc) - Page 28 - 1/27/2021 10:36:34


(1)  160/    5FAC : =>DEFINED             IFDEF LCCCX			;wjr 20-04-28 setup for COMX
(1)  161/    5FAC : 9F                  	ghi	r15	;save D #wjr 20-05-01
(1)  162/    5FAD : [160]                 ENDIF
(1)  163/    5FAD : 30 A0               	br	_return-1
(1)  164/    5FAF : [116]                ENDIF
(1)  165/    5FAF :                     	align 8
(1)  166/    5FB0 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  167/    5FB0 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  168/    5FB0 :                     ;each loop is 2 instruction times
(1)  169/    5FB0 :                     ;so the number of loops needed is 
(1)  170/    5FB0 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  171/    5FB0 : =>UNDEFINED         	IFNDEF	CPUSPEED
(1)  172/    5FB0 : =186A00H            CPUSPEED EQU 1600000	;1.6MHZ default
(1)  173/    5FB0 : [171]               	ENDIF
(1)  174/    5FB0 : =>FALSE              if MOMCPU=$1805		;for 1806 SCAL
(1)  175/    5FB0 :                     SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  176/    5FB0 : =>TRUE               else
(1)  177/    5FB0 : =1BH                SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  178/    5FB0 : [174]                endif 
(1)  179/    5FB0 : =>TRUE                    IF (CPUSPEED/16000)>=(SUBOVHD+4);fast enough to need more than subroutine overhead
(1)  180/    5FB0 : F8 12               	ldi	(CPUSPEED/1000/16-SUBOVHD)/4
(1)  181/    5FB2 : FF 01               $$mslf:	smi	1
(1)  182/    5FB4 : E2                  	sex	2
(1)  183/    5FB5 : E2                  	sex	2
(1)  184/    5FB6 : 3A B2               	bnz	$$mslf
(1)  185/    5FB8 : [179]                 ENDIF
(1)  186/    5FB8 : (MACRO)             	Cretn
(1)  187/    5FBA :                     
(1)  188/    5FBA :                     
(1)  189/    5FBA : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  190/    5FBA :                     	align 256
(1)  191/    6000 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  192/    6000 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  193/    6000 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  194/    6000 : (MACRO)             	ld2z retval
(1)  195/    6004 :                     $$mulrlp:
(1)  196/    6004 : (MACRO)             	shru2 regarg2
(1)  197/    600A : 3B 16               	bnf $$mulrnoadd
(1)  198/    600C :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  199/    600C : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  200/    6016 :                     $$mulrnoadd:
(1)  201/    6016 : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  202/    6017 : 3A 1C               	bnz $$mulrshft	;nope, continue
(1)  203/    6019 : 8D                  	glo regarg2	;check bottom byte
(1)  204/    601A : 32 24               	bz $$mulrdone
(1)  205/    601C :                     $$mulrshft:
(1)  206/    601C : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  207/    6022 : 30 04               	br $$mulrlp
(1)  208/    6024 :                     $$mulrdone:		;here the product is in retval
(1)  209/    6024 : (MACRO)             	cretn
(1)  210/    6026 :                     
(1)  211/    6026 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  212/    6026 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  213/    6026 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  214/    6026 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  215/    6026 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  216/    6026 :                     	;regarg1 to hold develop remainder, 
(1)  217/    6026 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  218/    6026 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  219/    6026 :                     				;result in D, rwork.hi, DF
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(lcc1802epiloCX.inc) - Page 29 - 1/27/2021 10:36:34


(1)  220/    6026 :                     	glo reg2
(1)  221/    6026 :                     	str sp
(1)  222/    6026 :                     	glo reg1
(1)  223/    6026 :                     	sm
(1)  224/    6026 :                     	plo R11
(1)  225/    6026 :                     	ghi reg2
(1)  226/    6026 :                     	str sp
(1)  227/    6026 :                     	ghi reg1
(1)  228/    6026 :                     	smb
(1)  229/    6026 :                     	endm
(1)  230/    6026 :                     	
(1)  231/    6026 :                     ;	pushf R10	;save R10 & leave stack down 1
(1)  232/    6026 : (MACRO)             	pushr R10	;default push leaves stack clean
(1)  233/    602A : 8B                  	glo R11		;and bottom
(1)  234/    602B : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  235/    602C : (MACRO)             	cpy2 R10,regarg1
(1)  236/    6030 : (MACRO)             	ld2z retval	;quotient
(1)  237/    6034 : (MACRO)             	cpy2 rwork,regarg2
(1)  238/    6038 :                     	
(1)  239/    6038 : (MACRO)             	testsub R10,regarg2
(1)  240/    6041 : 3B 5C               	bnf $$computequot	;DF=0 means it didn't fit
(1)  241/    6043 : BA                  	phi R10	;R10=R10-regarg2
(1)  242/    6044 : 8B                  	glo R11
(1)  243/    6045 : AA                  	plo R10
(1)  244/    6046 :                     	
(1)  245/    6046 :                     $$again:	;this is the divisor doubling phase
(1)  246/    6046 : (MACRO)              	testsub R10,regarg2
(1)  247/    604F : 3B 5C                	bnf $$computequot	;df=0 means it didn't fit
(1)  248/    6051 : BA                  	phi R10	;R10=R10-regarg2
(1)  249/    6052 : 8B                  	glo R11
(1)  250/    6053 : AA                  	plo R10 	
(1)  251/    6054 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  252/    605A : 30 46                	br $$again
(1)  253/    605C :                      	
(1)  254/    605C :                      $$computequot:	;here we're computing the quotient
(1)  255/    605C : (MACRO)              	testsub regarg1,regarg2
(1)  256/    6065 : 3B 6B                	bnf $$testexit
(1)  257/    6067 : BC                   	phi regarg1		;complete the subtraction
(1)  258/    6068 : 8B                   	glo R11
(1)  259/    6069 : AC                   	plo regarg1
(1)  260/    606A : 1F                   	inc retval
(1)  261/    606B :                      $$testexit:
(1)  262/    606B : 9E                   	ghi rwork
(1)  263/    606C : F7                   	sm	;top of regarg2 is still on stack
(1)  264/    606D : 3A 75                	bnz $$ney0y
(1)  265/    606F : 8D                   	glo regarg2
(1)  266/    6070 : 52                   	str sp
(1)  267/    6071 : 8E                   	glo rwork
(1)  268/    6072 : F7                   	sm	;test low order bytes
(1)  269/    6073 : 32 83                	bz	$$out	;if = we're done
(1)  270/    6075 :                      $$ney0y:
(1)  271/    6075 : (MACRO)              	shl2 retval	;double quotient
(1)  272/    607B : (MACRO)              	shrU2 regarg2	;halve divisor
(1)  273/    6081 : 30 5C                	br $$computequot	;continue
(1)  274/    6083 :                      $$out:
(1)  275/    6083 :                      ;here the quotient is in retval, remainder in regarg1
(1)  276/    6083 : 12                    	inc sp	;release work area
(1)  277/    6084 : 02                  	ldn sp	;recover
(1)  278/    6085 : AB                  	plo R11	;bottom byte of R11
(1)  279/    6086 : (MACRO)             	popr R10 ;and all of R10
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(lcc1802epiloCX.inc) - Page 30 - 1/27/2021 10:36:34


(1)  280/    608B : (MACRO)             	cretn	;and we're done
(1)  281/    608D :                     
(1)  282/    608D :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  283/    608D :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  284/    608D :                     _divI2:
(1)  285/    608D : 22                      dec	sp	;leave a work area available
(1)  286/    608E : 9C                      ghi regArg1
(1)  287/    608F : 52                      str sp	;save the sign of the 1st arg
(1)  288/    6090 : FE                      shl
(1)  289/    6091 : 3B 9C                   bnf $$pos1	;if the 1st arg is -v
(1)  290/    6093 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  291/    609C :                     $$pos1: ;1st is now +v, check 2nd
(1)  292/    609C : 9D                      ghi regArg2
(1)  293/    609D : F3                      xor	
(1)  294/    609E : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  295/    609F : 9D                      ghi regArg2
(1)  296/    60A0 : FE                      shl
(1)  297/    60A1 : 3B AC                   bnf $$pos2	;if the 2nd arg is -v
(1)  298/    60A3 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  299/    60AC :                     $$pos2: ; both args now +v
(1)  300/    60AC : 22                      dec sp	;protect workarea on the 1802
(1)  301/    60AD : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  302/    60B1 : 12                      inc sp	;recover work area
(1)  303/    60B2 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  304/    60B2 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  305/    60B3 : FE                      shl
(1)  306/    60B4 : 3B BF                   bnf $$done ;if the signs were different
(1)  307/    60B6 : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  308/    60BF :                     $$done:
(1)  309/    60BF : (MACRO)                 Cretn ;and we're done - I hope!
(1)  310/    60C1 : [189]                ENDIF
(1)  311/    60C1 : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  312/    60C1 :                     	align 256    ;32 bit operations follow
(1)  313/    6100 :                     _divu4:
(1)  314/    6100 :                     ;This is an unsigned 32 bit restoring division
(1)  315/    6100 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  316/    6100 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  317/    6100 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  318/    6100 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  319/    6100 :                     
(1)  320/    6100 : F8 20               	ldi 32		;set loop count
(1)  321/    6102 : AE                  	plo memaddr	;in temp register
(1)  322/    6103 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  323/    610F :                     $$loop:
(1)  324/    610F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  325/    611B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  326/    6127 :                     
(1)  327/    6127 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  328/    613D :                     
(1)  329/    613D : FA 80               	ani 0x80	;check the top bit
(1)  330/    613F : 32 5D               	bz $$norestore	;if it's 0
(1)  331/    6141 : 89                  		glo RL8
(1)  332/    6142 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  333/    6144 : A9                  		plo RL8
(1)  334/    6145 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  335/    615B : 30 61               	br $$endlp 	;else
(1)  336/    615D :                     $$norestore:
(1)  337/    615D : 89                  		glo RL8
(1)  338/    615E : F9 01               		ori 1	;turn on the bottom bit
(1)  339/    6160 : A9                  		plo RL8
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(lcc1802epiloCX.inc) - Page 31 - 1/27/2021 10:36:34


(1)  340/    6161 :                     	;end if
(1)  341/    6161 :                     $$endlp:
(1)  342/    6161 : 2E                  	dec memaddr	;check the cycle count
(1)  343/    6162 : 8E                  	glo memaddr
(1)  344/    6163 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  345/    6165 :                     	
(1)  346/    6165 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  347/    6167 :                     		
(1)  348/    6167 :                     
(1)  349/    6167 :                     _mulu4:
(1)  350/    6167 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  351/    6167 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  352/    6167 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  353/    6167 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  354/    6167 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  355/    6167 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  356/    6167 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  357/    6167 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  358/    6167 :                     	;for 10 we subtract and shift
(1)  359/    6167 :                     	;for 00 and 11 we just shift
(1)  360/    6167 :                     
(1)  361/    6167 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  362/    6173 : F8 20                   ldi 32
(1)  363/    6175 : AE                      plo memaddr		;cycle count
(1)  364/    6176 : FC 00                   adi 0		;clear df
(1)  365/    6178 :                     $$mloop:
(1)  366/    6178 : 89                      glo RL8
(1)  367/    6179 : FA 01                   ani 1		;isolate bottom bit of result
(1)  368/    617B : 3B 97                   bnf	$$check_sub	;
(1)  369/    617D : 3A AF                   bnz	$$shift		;that would be the 11 case
(1)  370/    617F :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  371/    617F : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  372/    6195 : 30 AF                   br $$shift
(1)  373/    6197 :                     $$check_sub:
(1)  374/    6197 : 32 AF                   bz $$shift	;that would be the 00 case
(1)  375/    6199 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  376/    6199 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  377/    61AF :                     $$shift:
(1)  378/    61AF : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  379/    61BD : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  380/    61C9 :                     
(1)  381/    61C9 : 2E                      dec memaddr		;cycle count
(1)  382/    61CA : 8E                      glo memaddr
(1)  383/    61CB : 3A 78                   bnz $$mloop		;repeat cycle once for each bit position
(1)  384/    61CD :                         
(1)  385/    61CD : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  386/    61CF :                     
(1)  387/    61CF :                     	align 256
(1)  388/    6200 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  389/    6200 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  390/    6200 :                     _divI4:
(1)  391/    6200 : 22                      dec	sp	;leave a work area available
(1)  392/    6201 : 98                      ghi RL8-1	;get the top of the dividend
(1)  393/    6202 : 52                      str sp	;save the sign of the 1st arg
(1)  394/    6203 : FE                      shl
(1)  395/    6204 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  396/    6206 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  397/    6226 :                     $$pos1: ;1st is now +v, check 2nd
(1)  398/    6226 : 9A                      ghi RL10-1
(1)  399/    6227 : F3                      xor	
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(lcc1802epiloCX.inc) - Page 32 - 1/27/2021 10:36:34


(1)  400/    6228 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  401/    6229 : 9A                      ghi RL10-1
(1)  402/    622A : FE                      shl
(1)  403/    622B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  404/    622D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  405/    624D :                     $$pos2: ; both args now +v
(1)  406/    624D : 22                      dec sp	;protect workarea on the 1802
(1)  407/    624E : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  408/    6252 : 12                      inc sp	;recover work area
(1)  409/    6253 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  410/    6253 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  411/    6254 : FE                      shl
(1)  412/    6255 : 3B 77                   bnf $$done ;if the signs were different
(1)  413/    6257 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  414/    6277 :                     $$done:
(1)  415/    6277 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  416/    6279 : [311]                ENDIF
(1)  417/    6279 : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  418/    6279 :                     _modU4:	;32 bit unsigned remainder
(1)  419/    6279 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  420/    6279 : (MACRO)                 Ccall _divU4
(1)  421/    627D : (MACRO)                 cpy4 RL8,Rp1p2
(1)  422/    6285 : (MACRO)                 Cretn
(1)  423/    6287 :                         
(1)  424/    6287 :                     _modI4:	;32 bit signed remainder
(1)  425/    6287 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  426/    6287 : (MACRO)                 Ccall _divI4
(1)  427/    628B : (MACRO)                 cpy4 RL8,Rp1p2
(1)  428/    6293 : (MACRO)                 Cretn
(1)  429/    6295 : [417]                ENDIF	
(1)  430/    6295 :                     ;;function_end lcc1802init.inc
(1)  431/    6295 :                     
    1305/    6295 :                     	include LCC1802fp.inc
(1)    1/    6295 :                     ;17-03-06 changing sep rret to cretn, sep rcall to ccall
(1)    2/    6295 :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    3/    6295 :                     ;maybe originally from RCA
(1)    4/    6295 :                     ;these routines use ALL the registers from 6-15!
(1)    5/    6295 :                     ;8-15 were more or less available to start with
(1)    6/    6295 :                     ;it saves 6 when it uses it
(1)    7/    6295 :                     ;I save 7 on entry and restore on exit
(1)    8/    6295 :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    9/    6295 : =0BH                FB	equ	11	;was R9
(1)   10/    6295 : =9H                 F9	equ	9	;was R7
(1)   11/    6295 : =7H                 F7	equ	7	;was RB
(1)   12/    6295 :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   13/    6295 :                     ;18-02-09 moved labels atof_div,div_nope,div_a2nz and others off of macro statement
(1)   14/    6295 :                     ; *** Convert signed long to float
(1)   15/    6295 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   16/    6295 :                     ; *** result in same register
(1)   17/    6295 :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   18/    6295 :                     	align 256
(1)   19/    6300 : F8 00               cvif4:	ldi	0
(1)   20/    6302 : BE                  	phi	memaddr	;sign
(1)   21/    6303 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   22/    6305 : AE                  	plo	memaddr	;
(1)   23/    6306 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   24/    6307 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   25/    6309 : FE                  	shl		;sign bit to df
(1)   26/    630A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   27/    630C : 76                  	shrc		;shift it back so we know byte is non-zerro
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 33 - 1/27/2021 10:36:34


(1)   28/    630D : BE                  	phi	memaddr	;save it
(1)   29/    630E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   30/    632E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   31/    6330 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   32/    6331 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    6333 : 99                  	ghi	RL8	;next byte
(1)   34/    6334 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   35/    6336 : 89                  	glo	RL8	;last byte
(1)   36/    6337 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   37/    6339 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   38/    633A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   39/    633C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   40/    633D : (MACRO)             	shru4	RL8
(1)   41/    6349 : 30 39               	br	$$sgnpos
(1)   42/    634B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   43/    634C : FA 80               	ani	0x80	;isolate it
(1)   44/    634E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   45/    6350 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   46/    6351 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   47/    635D : 30 4B               	br	$$shl
(1)   48/    635F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   49/    6360 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   50/    6361 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   51/    6362 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   52/    6364 : 88                  	glo	RL8-1	;get the byte
(1)   53/    6365 : FA 7F               	ani	0x7f	;clear bit 23
(1)   54/    6367 : A8                  	plo	RL8-1	;put it back
(1)   55/    6368 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   56/    6369 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   57/    636B : 98                  	ghi	RL8-1	;get the sign byte
(1)   58/    636C : F9 80               	ori	0x80	;set the sign bit
(1)   59/    636E : B8                  	phi	RL8-1	;place it
(1)   60/    636F :                     $$done:			;;moved off macro
(1)   61/    636F : (MACRO)             	Cretn		;and we're done
(1)   62/    6371 :                     	
(1)   63/    6371 :                     
(1)   64/    6371 :                     
(1)   65/    6371 :                     ; *** Convert float to signed long
(1)   66/    6371 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   67/    6371 :                     ; *** result in same register
(1)   68/    6371 :                     	align 256
(1)   69/    6400 :                     cvfi4:
(1)   70/    6400 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   71/    6401 : BE                  	phi	memaddr ;save for later
(1)   72/    6402 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   73/    6403 : FE                  	shl		;shift to df
(1)   74/    6404 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   75/    6405 : 7E                  	shlc		;combine with 0
(1)   76/    6406 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   77/    6406 : 22                  	dec	sp
(1)   78/    6407 : 52                  	str	sp
(1)   79/    6408 : F8 96               	ldi	150
(1)   80/    640A : F7                  	sm		;calculate shift count needed
(1)   81/    640B :                     ;*******note - the df flag set here is tested later
(1)   82/    640B : AE                  	plo	memaddr
(1)   83/    640C : 12                  	inc	sp	;release work area
(1)   84/    640D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   85/    640D : F8 00               	ldi	0
(1)   86/    640F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   87/    6410 : 88                  	glo	RL8-1	;get the next byte
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 34 - 1/27/2021 10:36:34


(1)   88/    6411 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   89/    6413 : A8                  	plo	RL8-1	;put it back
(1)   90/    6414 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   91/    6415 : 32 3B               	bz	$$sign
(1)   92/    6417 :                     ;**********note df is set from subtraction before setting mantissa
(1)   93/    6417 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   94/    6419 :                     
(1)   95/    6419 :                     $$shr:			;separated from macro
(1)   96/    6419 : (MACRO)             	shru4	RL8
(1)   97/    6425 : 2E                  	dec	memaddr	;check shift count
(1)   98/    6426 : 8E                  	glo	memaddr
(1)   99/    6427 : 3A 19               	bnz	$$shr	;complete the shift
(1)  100/    6429 : 30 3B               	br	$$sign
(1)  101/    642B :                     
(1)  102/    642B :                     ;handle negative shift as best I can - gigo
(1)  103/    642B :                     $$lsh: 			;separated from macro
(1)  104/    642B : (MACRO)             	shl4	RL8	;shift once
(1)  105/    6437 : 1E                  	inc	memaddr
(1)  106/    6438 : 8E                  	glo	memaddr
(1)  107/    6439 : 3A 2B               	bnz	$$lsh	
(1)  108/    643B :                     	
(1)  109/    643B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  110/    643C : FE                  	shl		;shift sign bit into df
(1)  111/    643D : 3B 61               	bnf	$$done
(1)  112/    643F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  113/    645F : 30 61               	br	$$done	; and return
(1)  114/    6461 :                     
(1)  115/    6461 :                     $$done:			;moved off macro
(1)  116/    6461 : (MACRO)             	Cretn		;and we're done
(1)  117/    6463 :                     
(1)  118/    6463 :                     ; *** Check if character is numeric
(1)  119/    6463 :                     ; *** D - char to check
(1)  120/    6463 :                     ; *** Returns DF=1 if numeric
(1)  121/    6463 :                     ; ***         DF=0 if not
(1)  122/    6463 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  123/    6464 : FF 30                          smi     '0'                 ; check for below zero
(1)  124/    6466 : 3B 6F                          bnf     fails               ; jump if below
(1)  125/    6468 : FF 0A                          smi     10                  ; see if above
(1)  126/    646A : 33 6F                          bdf     fails               ; fails if so
(1)  127/    646C : FF 00               passes:    smi     0                   ; signal success
(1)  128/    646E : C8                             lskp
(1)  129/    646F : FC 00               fails:     adi     0                   ; signal failure
(1)  130/    6471 : 8E                             glo     r14                 ; recover character
(1)  131/    6472 : (MACRO)                        cretn	                ; and return; ******************************* 17-03-06
(1)  132/    6474 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  133/    6474 :                     ; *******************************
(1)  134/    6474 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  135/    6475 : F6                             shr
(1)  136/    6476 : B8                             phi   r8
(1)  137/    6477 : 88                             glo   r8
(1)  138/    6478 : 76                             shrc
(1)  139/    6479 : A8                             plo   r8
(1)  140/    647A : 99                             ghi   F9                    ; shift low word right
(1)  141/    647B : 76                             shrc
(1)  142/    647C : B9                             phi   F9
(1)  143/    647D : 89                             glo   F9
(1)  144/    647E : 76                             shrc
(1)  145/    647F : A9                             plo   F9
(1)  146/    6480 : (MACRO)                        Cretn
(1)  147/    6482 :                     
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 35 - 1/27/2021 10:36:34


(1)  148/    6482 :                     ; ******************************
(1)  149/    6482 :                     ; *** Shift R8:F9 left 1 bit ***
(1)  150/    6482 :                     ; ******************************
(1)  151/    6482 : 89                  fp_shl_1:  glo   F9
(1)  152/    6483 : FE                             shl
(1)  153/    6484 : A9                             plo   F9
(1)  154/    6485 : 99                             ghi   F9
(1)  155/    6486 : 7E                             shlc
(1)  156/    6487 : B9                             phi   F9
(1)  157/    6488 : 88                             glo   r8
(1)  158/    6489 : 7E                             shlc
(1)  159/    648A : A8                             plo   r8
(1)  160/    648B : 98                             ghi   r8
(1)  161/    648C : 7E                             shlc
(1)  162/    648D : B8                             phi   r8
(1)  163/    648E : (MACRO)                        cretn	;17-03-06
(1)  164/    6490 :                     
(1)  165/    6490 :                     ; **********************
(1)  166/    6490 :                     ; *** R8:F9 += RA:FB ***
(1)  167/    6490 :                     ; **********************
(1)  168/    6490 : 8B                  fp_add_12: glo   FB
(1)  169/    6491 : 22                  	   dec r2	;wjr - make a work area
(1)  170/    6492 : 52                             str   r2
(1)  171/    6493 : 89                             glo   F9
(1)  172/    6494 : F4                             add
(1)  173/    6495 : A9                             plo   F9
(1)  174/    6496 : 9B                             ghi   FB
(1)  175/    6497 : 52                             str   r2
(1)  176/    6498 : 99                             ghi   F9
(1)  177/    6499 : 74                             adc
(1)  178/    649A : B9                             phi   F9
(1)  179/    649B : 8A                             glo   R10
(1)  180/    649C : 52                             str   r2
(1)  181/    649D : 88                             glo   r8
(1)  182/    649E : 74                             adc
(1)  183/    649F : A8                             plo   r8
(1)  184/    64A0 : 9A                             ghi   R10
(1)  185/    64A1 : 52                             str   r2
(1)  186/    64A2 : 98                             ghi   r8
(1)  187/    64A3 : 74                             adc
(1)  188/    64A4 : B8                             phi   r8
(1)  189/    64A5 : 12                             inc	r2	;wjr - release work area
(1)  190/    64A6 : (MACRO)                        Cretn
(1)  191/    64A8 :                     
(1)  192/    64A8 :                     ; *******************************
(1)  193/    64A8 :                     ; *** Shift RF:RD right 1 bit ***
(1)  194/    64A8 :                     ; *******************************
(1)  195/    64A8 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  196/    64A9 : F6                             shr
(1)  197/    64AA : BF                             phi   R15
(1)  198/    64AB : 8F                             glo   R15
(1)  199/    64AC : 76                             shrc
(1)  200/    64AD : AF                             plo   R15
(1)  201/    64AE : 9D                             ghi   R13                    ; shift low word right
(1)  202/    64AF : 76                             shrc
(1)  203/    64B0 : BD                             phi   R13
(1)  204/    64B1 : 8D                             glo   R13
(1)  205/    64B2 : 76                             shrc
(1)  206/    64B3 : AD                             plo   R13
(1)  207/    64B4 : (MACRO)                        Cretn
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 36 - 1/27/2021 10:36:34


(1)  208/    64B6 :                     
(1)  209/    64B6 :                     ; *************************************
(1)  210/    64B6 :                     ; *** Scale number to high bit is 1 ***
(1)  211/    64B6 :                     ; *** R8:F9 - Number to scale       ***
(1)  212/    64B6 :                     ; *** RF.1  - Exponent for number   ***
(1)  213/    64B6 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  214/    64B6 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  215/    64B6 :                     ; *************************************
(1)  216/    64B6 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  217/    64B7 : FA 80                          ani   080h                  ; check it
(1)  218/    64B9 : CA 64 C7                       lbnz  fp_sc_cln             ; jump if good
(1)  219/    64BC : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  220/    64C0 : 9F                             ghi   R15                    ; get exp1
(1)  221/    64C1 : FF 01                          smi   1                     ; minus 1
(1)  222/    64C3 : BF                             phi   R15                    ; and put it back
(1)  223/    64C4 : C0 64 B6                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  224/    64C7 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  225/    64C8 : FE                             shl                         ; shift out high 1 bit
(1)  226/    64C9 : A8                             plo   r8                    ; set aside
(1)  227/    64CA : 9F                             ghi   R15                    ; get exponent byte
(1)  228/    64CB : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  229/    64CC : F6                             shr                         ; shift bit 0 into DF
(1)  230/    64CD : 88                             glo   r8                    ; get high byte of mantissa
(1)  231/    64CE : 76                             shrc                        ; shift bit 0 of expnent in
(1)  232/    64CF : A8                             plo   r8                    ; and put it back
(1)  233/    64D0 : 87                             glo   F7                   ; get signs
(1)  234/    64D1 : F6                             shr                         ; get sign 1
(1)  235/    64D2 : 98                             ghi   r8                    ; recover exponent
(1)  236/    64D3 : 76                             shrc                        ; shift in sign
(1)  237/    64D4 : B8                             phi   r8                    ; put it back
(1)  238/    64D5 : 12                             inc	r2	;wjr release work area
(1)  239/    64D6 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  240/    64DB : (MACRO)             	   popr R12	;wjr
(1)  241/    64E0 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  242/    64E5 : (MACRO)                        Cretn                       ; return to caller
(1)  243/    64E7 :                     
(1)  244/    64E7 :                     ; ************************************
(1)  245/    64E7 :                     ; *** Get exponenst from arguments ***
(1)  246/    64E7 :                     ; *** R8:F9 - Arg 1                ***
(1)  247/    64E7 :                     ; *** RA:FB - Arg 2                ***
(1)  248/    64E7 :                     ; *** Returns: RF.1 - exp1         ***
(1)  249/    64E7 :                     ; ***          RF.0 - exp2         ***
(1)  250/    64E7 :                     ; ************************************
(1)  251/    64E7 : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  252/    64E8 : FE                             shl                         ; shift it into DF
(1)  253/    64E9 : 98                             ghi   r8                    ; get top 7 bits
(1)  254/    64EA : 7E                             shlc                        ; shift in first bit
(1)  255/    64EB : BF                             phi   R15                    ; put exp1 into RF.1
(1)  256/    64EC :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  257/    64EC : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  258/    64ED : FE                             shl                         ; shift it into DF
(1)  259/    64EE : 9A                             ghi   R10                    ; get top 7 bits
(1)  260/    64EF : 7E                             shlc                        ; shift in first bit
(1)  261/    64F0 : AF                             plo   R15                    ; put into RF
(1)  262/    64F1 : (MACRO)                        cretn	                  ; return to caller 17-03-06
(1)  263/    64F3 :                     
(1)  264/    64F3 :                     ; ************************************
(1)  265/    64F3 :                     ; *** Get signs from arguments     ***
(1)  266/    64F3 :                     ; *** R8:F9 - Arg 1                ***
(1)  267/    64F3 :                     ; *** RA:FB - Arg 2                ***
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 37 - 1/27/2021 10:36:34


(1)  268/    64F3 :                     ; *** Returns: F7.0 - signs        ***
(1)  269/    64F3 :                     ; ************************************
(1)  270/    64F3 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  271/    64F4 : FE                             shl                         ; shift into DF
(1)  272/    64F5 : 9A                             ghi   R10                    ; get sign of arg2
(1)  273/    64F6 : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  274/    64F7 : 7E                             shlc                        ; now shift in sign of arg2
(1)  275/    64F8 : A7                             plo   F7                    ; save them
(1)  276/    64F9 : (MACRO)                        Cretn                       ; return to caller
(1)  277/    64FB :                     
(1)  278/    64FB :                     ; ***************************************
(1)  279/    64FB :                     ; *** Add 2 SP floating point numbers ***
(1)  280/    64FB :                     ; *** R8:F9 - Arg 1                   ***
(1)  281/    64FB :                     ; *** RA:FB - Arg 2                   ***
(1)  282/    64FB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  283/    64FB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  284/    64FB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  285/    64FB :                     ; ***        F7.0 - signs        ***
(1)  286/    64FB :                     ; ***************************************
(1)  287/    64FB : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  288/    64FC : CA 65 15                       lbnz  add_a1nz
(1)  289/    64FF : 88                             glo   r8
(1)  290/    6500 : CA 65 15                       lbnz  add_a1nz
(1)  291/    6503 : 99                             ghi   F9
(1)  292/    6504 : CA 65 15                       lbnz  add_a1nz
(1)  293/    6507 : 89                             glo   F9
(1)  294/    6508 : CA 65 15                       lbnz  add_a1nz
(1)  295/    650B : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  296/    650C : B8                             phi   r8
(1)  297/    650D : 8A                             glo   R10
(1)  298/    650E : A8                             plo   r8
(1)  299/    650F : 9B                             ghi   FB
(1)  300/    6510 : B9                             phi   F9
(1)  301/    6511 : 8B                             glo   FB
(1)  302/    6512 : A9                             plo   F9
(1)  303/    6513 : (MACRO)                        Cretn                        ; return to caller
(1)  304/    6515 :                     
(1)  305/    6515 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  306/    6516 : CA 65 27                       lbnz  add_a2nz
(1)  307/    6519 : 8A                             glo   R10
(1)  308/    651A : CA 65 27                       lbnz  add_a2nz
(1)  309/    651D : 9B                             ghi   FB
(1)  310/    651E : CA 65 27                       lbnz  add_a2nz
(1)  311/    6521 : 8B                             glo   FB
(1)  312/    6522 : CA 65 27                       lbnz  add_a2nz
(1)  313/    6525 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  314/    6527 :                                
(1)  315/    6527 :                     add_a2nz:  
(1)  316/    6527 : (MACRO)             	   pushr F7	;wjr save c variable register
(1)  317/    652B : (MACRO)             	   pushr R12	;wjr save param regs
(1)  318/    652F : (MACRO)             	   pushr R13	;wjr
(1)  319/    6533 : 22                  	   dec	r2	;wjr - make a work area
(1)  320/    6534 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  321/    6538 : 9F                             ghi   R15
(1)  322/    6539 : 52                             str   r2
(1)  323/    653A : 8F                             glo   R15
(1)  324/    653B : F7                             sm                          ; perfrom exp2 - exp1
(1)  325/    653C : CB 65 5D                       lbnf  add_ns                ; jump if no swap needed
(1)  326/    653F :                     
(1)  327/    653F : 98                             ghi   r8                    ; swap arg1 with arg2
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 38 - 1/27/2021 10:36:34


(1)  328/    6540 : AE                             plo   R14
(1)  329/    6541 : 9A                             ghi   R10
(1)  330/    6542 : B8                             phi   r8
(1)  331/    6543 : 8E                             glo   R14
(1)  332/    6544 : BA                             phi   R10
(1)  333/    6545 : 88                             glo   r8
(1)  334/    6546 : AE                             plo   R14
(1)  335/    6547 : 8A                             glo   R10
(1)  336/    6548 : A8                             plo   r8
(1)  337/    6549 : 8E                             glo   R14
(1)  338/    654A : AA                             plo   R10
(1)  339/    654B : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  340/    654C : AE                             plo   R14
(1)  341/    654D : 9B                             ghi   FB
(1)  342/    654E : B9                             phi   F9
(1)  343/    654F : 8E                             glo   R14
(1)  344/    6550 : BB                             phi   FB
(1)  345/    6551 : 89                             glo   F9
(1)  346/    6552 : AE                             plo   R14
(1)  347/    6553 : 8B                             glo   FB
(1)  348/    6554 : A9                             plo   F9
(1)  349/    6555 : 8E                             glo   R14
(1)  350/    6556 : AB                             plo   FB
(1)  351/    6557 : 9F                             ghi   R15                    ; swap exponents
(1)  352/    6558 : AE                             plo   R14
(1)  353/    6559 : 8F                             glo   R15
(1)  354/    655A : BF                             phi   R15
(1)  355/    655B : 8E                             glo   R14
(1)  356/    655C : AF                             plo   R15
(1)  357/    655D :                     add_ns:    				;moved off macro
(1)  358/    655D : (MACRO)             	   ccall fp_getsgn              ; get signs of arguments
(1)  359/    6561 : F8 00                          ldi   0                     ; setup mantissas
(1)  360/    6563 : B8                             phi   r8
(1)  361/    6564 : BA                             phi   R10
(1)  362/    6565 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  363/    6567 : 52                             str   r2
(1)  364/    6568 : 88                             glo   r8
(1)  365/    6569 : F1                             or
(1)  366/    656A : A8                             plo   r8
(1)  367/    656B : 8A                             glo   R10
(1)  368/    656C : F1                             or
(1)  369/    656D : AA                             plo   R10
(1)  370/    656E : 9F                             ghi   R15                    ; get exp1
(1)  371/    656F : 52                             str   r2                    ; place into memory
(1)  372/    6570 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  373/    6571 : F7                             sm                          ; see if match to exp1
(1)  374/    6572 : C2 65 85                       lbz   add_lp1dn             ; jump if match
(1)  375/    6575 : 8F                             glo   R15                    ; need to increase it
(1)  376/    6576 : FC 01                          adi   1
(1)  377/    6578 : AF                             plo   R15
(1)  378/    6579 : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  379/    657A : F6                             shr
(1)  380/    657B : AA                             plo   R10
(1)  381/    657C : 9B                             ghi   FB
(1)  382/    657D : 76                             shrc
(1)  383/    657E : BB                             phi   FB
(1)  384/    657F : 8B                             glo   FB
(1)  385/    6580 : 76                             shrc
(1)  386/    6581 : AB                             plo   FB
(1)  387/    6582 : C0 65 70                       lbr   add_lp1               ; keep shifting until exponents match
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 39 - 1/27/2021 10:36:34


(1)  388/    6585 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  389/    6586 : 52                             str   r2
(1)  390/    6587 : F6                             shr
(1)  391/    6588 : F3                             xor
(1)  392/    6589 : FA 01                          ani   1                     ; keep only bottom bit
(1)  393/    658B : CA 65 95                       lbnz  add_nm                ; jump if signs do not match
(1)  394/    658E : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  395/    6592 : C0 65 CE                       lbr   add_fnl               ; jump to clean up
(1)  396/    6595 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  397/    6596 : 52                             str   r2
(1)  398/    6597 : 89                             glo   F9
(1)  399/    6598 : F7                             sm
(1)  400/    6599 : AC                             plo   R12                    ; place into RD:RC
(1)  401/    659A : 9B                             ghi   FB
(1)  402/    659B : 52                             str   r2
(1)  403/    659C : 99                             ghi   F9
(1)  404/    659D : 77                             smb
(1)  405/    659E : BC                             phi   R12
(1)  406/    659F : 8A                             glo   R10
(1)  407/    65A0 : 52                             str   r2
(1)  408/    65A1 : 88                             glo   r8
(1)  409/    65A2 : 77                             smb
(1)  410/    65A3 : AD                             plo   R13
(1)  411/    65A4 : 9A                             ghi   R10
(1)  412/    65A5 : 52                             str   r2
(1)  413/    65A6 : 98                             ghi   r8
(1)  414/    65A7 : 77                             smb
(1)  415/    65A8 : BD                             phi   R13
(1)  416/    65A9 : CB 65 B7                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  417/    65AC : 9D                             ghi   R13                    ; transfer result to arg1
(1)  418/    65AD : B8                             phi   r8
(1)  419/    65AE : 8D                             glo   R13
(1)  420/    65AF : A8                             plo   r8
(1)  421/    65B0 : 9C                             ghi   R12
(1)  422/    65B1 : B9                             phi   F9
(1)  423/    65B2 : 8C                             glo   R12
(1)  424/    65B3 : A9                             plo   F9
(1)  425/    65B4 : C0 65 CE                       lbr   add_fnl               ; finalize
(1)  426/    65B7 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  427/    65B8 : 52                             str   r2
(1)  428/    65B9 : 8B                             glo   FB
(1)  429/    65BA : F7                             sm
(1)  430/    65BB : A9                             plo   F9
(1)  431/    65BC : 99                             ghi   F9
(1)  432/    65BD : 52                             str   r2
(1)  433/    65BE : 9B                             ghi   FB
(1)  434/    65BF : 77                             smb
(1)  435/    65C0 : B9                             phi   F9
(1)  436/    65C1 : 88                             glo   r8
(1)  437/    65C2 : 52                             str   r2
(1)  438/    65C3 : 8A                             glo   R10
(1)  439/    65C4 : 77                             smb
(1)  440/    65C5 : A8                             plo   r8
(1)  441/    65C6 : 98                             ghi   r8
(1)  442/    65C7 : 52                             str   r2
(1)  443/    65C8 : 9A                             ghi   R10
(1)  444/    65C9 : 77                             smb
(1)  445/    65CA : B8                             phi   r8
(1)  446/    65CB : 87                             glo   F7                    ; move sign 2 to sign1
(1)  447/    65CC : FE                             shl
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 40 - 1/27/2021 10:36:34


(1)  448/    65CD : A7                             plo   F7
(1)  449/    65CE : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  450/    65CF : CA 65 F0                       lbnz  add_nz                ; jump if not
(1)  451/    65D2 : 88                             glo   r8
(1)  452/    65D3 : CA 65 F0                       lbnz  add_nz
(1)  453/    65D6 : 99                             ghi   F9
(1)  454/    65D7 : CA 65 F0                       lbnz  add_nz
(1)  455/    65DA : 89                             glo   F9
(1)  456/    65DB : CA 65 F0                       lbnz  add_nz
(1)  457/    65DE : 12                             inc	r2	;wjr release work area
(1)  458/    65DF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  459/    65E4 : (MACRO)             	   popr R12	;wjr
(1)  460/    65E9 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  461/    65EE : (MACRO)                        Cretn                       ; return the zero
(1)  462/    65F0 : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  463/    65F1 : C2 65 FF                       lbz   add_nx                ; jump if not
(1)  464/    65F4 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  465/    65F8 : 9F                             ghi   R15                    ; get exp1
(1)  466/    65F9 : FC 01                          adi   1                     ; increment it
(1)  467/    65FB : BF                             phi   R15                    ; and put it back
(1)  468/    65FC : C0 65 F0                       lbr   add_nz                ; keep going until not > 24 bits
(1)  469/    65FF :                     
(1)  470/    65FF : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  471/    6600 : F6                             shr
(1)  472/    6601 : A7                             plo   F7
(1)  473/    6602 : C0 64 B6                       lbr   fp_sc_up              ; scale number and build answer
(1)  474/    6605 :                     
(1)  475/    6605 :                     ; ***************************************
(1)  476/    6605 :                     ; *** sub 2 SP floating point numbers ***
(1)  477/    6605 :                     ; *** R8:F9 - Arg 1                   ***
(1)  478/    6605 :                     ; *** RA:FB - Arg 2                   ***
(1)  479/    6605 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  480/    6605 :                     ; ***************************************
(1)  481/    6605 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  482/    6606 : FB 80                          xri   080h
(1)  483/    6608 : BA                             phi   R10                    ; and put it back
(1)  484/    6609 : C0 64 FB                       lbr   fp_add                ; now just add
(1)  485/    660C :                     
(1)  486/    660C :                     ; ***************************************
(1)  487/    660C :                     ; *** Div 2 SP floating point numbers ***
(1)  488/    660C :                     ; *** R8:F9 - Arg 1                   ***
(1)  489/    660C :                     ; *** RA:FB - Arg 2                   ***
(1)  490/    660C :                     ; *** Returns: R8:F9 - Answer         ***
(1)  491/    660C :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  492/    660C :                     ; ***        RF.1 - exponent of arg2  ***
(1)  493/    660C :                     ; ***        F7.0 - signs        ***
(1)  494/    660C :                     ; ***************************************
(1)  495/    660C : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  496/    660D : CA 66 1E                       lbnz  div_a1nz
(1)  497/    6610 : 88                             glo   r8
(1)  498/    6611 : CA 66 1E                       lbnz  div_a1nz
(1)  499/    6614 : 99                             ghi   F9
(1)  500/    6615 : CA 66 1E                       lbnz  div_a1nz
(1)  501/    6618 : 89                             glo   F9
(1)  502/    6619 : CA 66 1E                       lbnz  div_a1nz
(1)  503/    661C : (MACRO)                        Cretn	                ; just return the zero
(1)  504/    661E : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  505/    661F : CA 66 3D                       lbnz  div_a2nz
(1)  506/    6622 : 8A                             glo   R10
(1)  507/    6623 : CA 66 3D                       lbnz  div_a2nz
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 41 - 1/27/2021 10:36:34


(1)  508/    6626 : 9B                             ghi   FB
(1)  509/    6627 : CA 66 3D                       lbnz  div_a2nz
(1)  510/    662A : 8B                             glo   FB
(1)  511/    662B : CA 66 3D                       lbnz  div_a2nz
(1)  512/    662E : 98                             ghi   r8                    ; need sign of arg1
(1)  513/    662F : FA 80                          ani   080h                  ; want only sign
(1)  514/    6631 : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  515/    6633 : B8                             phi   r8                    ; put into answer
(1)  516/    6634 : F8 80                          ldi   080h                  ; build rest of answer
(1)  517/    6636 : A8                             plo   r8 
(1)  518/    6637 : F8 00                          ldi   0
(1)  519/    6639 : B9                             phi   F9
(1)  520/    663A : A9                             plo   F9
(1)  521/    663B : (MACRO)                        Cretn                  	; and return to caller
(1)  522/    663D :                     
(1)  523/    663D :                     div_a2nz:  				; 18-02-09 moved off of macro
(1)  524/    663D : (MACRO)             	   pushr F7	;wjr save the C variable
(1)  525/    6641 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  526/    6645 : (MACRO)             	   pushr R13	;wjr
(1)  527/    6649 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  528/    664A :                     
(1)  529/    664A : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  530/    664E : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  531/    6652 : 8F                             glo   R15                    ; get exp2
(1)  532/    6653 : FF 7F                          smi   127                   ; remove bias
(1)  533/    6655 : 52                             str   r2                    ; place into memory
(1)  534/    6656 : 9F                             ghi   R15                    ; get exp1
(1)  535/    6657 : FF 7F                          smi   127                   ; remove bias
(1)  536/    6659 : F7                             sm                          ; perform exp1 - exp2
(1)  537/    665A : FC 7F                          adi   127                   ; put bias back in
(1)  538/    665C : 73                             stxd                        ; save onto stack
(1)  539/    665D : 87                             glo   F7                    ; determine sign for answer
(1)  540/    665E : 52                             str   r2
(1)  541/    665F : F6                             shr
(1)  542/    6660 : F3                             xor
(1)  543/    6661 : 73                             stxd                        ; place onto stack
(1)  544/    6662 : F8 00                          ldi   0                     ; setup man
(1)  545/    6664 : BA                             phi   R10
(1)  546/    6665 : 8A                             glo   R10
(1)  547/    6666 : F9 80                          ori   080h
(1)  548/    6668 : AA                             plo   R10
(1)  549/    6669 : F8 00                          ldi   0                     ; setup div
(1)  550/    666B : B8                             phi   r8
(1)  551/    666C : 88                             glo   r8
(1)  552/    666D : F9 80                          ori   080h
(1)  553/    666F : A8                             plo   r8
(1)  554/    6670 : F8 00                          ldi   0                     ; setup result
(1)  555/    6672 : BC                             phi   R12
(1)  556/    6673 : AC                             plo   R12
(1)  557/    6674 : B7                             phi   F7
(1)  558/    6675 : A7                             plo   F7
(1)  559/    6676 : AF                             plo   R15                    ; setup quotient
(1)  560/    6677 : BF                             phi   R15
(1)  561/    6678 : BD                             phi   R13
(1)  562/    6679 : AD                             plo   R13
(1)  563/    667A : F8 80                          ldi   080h
(1)  564/    667C : AF                             plo   R15
(1)  565/    667D : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  566/    667E : CA 66 90                       lbnz  div_go1
(1)  567/    6681 : 88                             glo   r8
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 42 - 1/27/2021 10:36:34


(1)  568/    6682 : CA 66 90                       lbnz  div_go1
(1)  569/    6685 : 99                             ghi   F9
(1)  570/    6686 : CA 66 90                       lbnz  div_go1
(1)  571/    6689 : 89                             glo   F9
(1)  572/    668A : CA 66 90                       lbnz  div_go1
(1)  573/    668D : C0 66 F1                       lbr   div_z
(1)  574/    6690 : 9A                  div_go1:   ghi   R10
(1)  575/    6691 : CA 66 A3                       lbnz  div_go
(1)  576/    6694 : 8A                             glo   R10
(1)  577/    6695 : CA 66 A3                       lbnz  div_go
(1)  578/    6698 : 9B                             ghi   FB
(1)  579/    6699 : CA 66 A3                       lbnz  div_go
(1)  580/    669C : 8B                             glo   FB
(1)  581/    669D : CA 66 A3                       lbnz  div_go
(1)  582/    66A0 : C0 66 F1                       lbr   div_z                 ; nothing more to do
(1)  583/    66A3 : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  584/    66A4 : 52                             str   r2
(1)  585/    66A5 : 89                             glo   F9
(1)  586/    66A6 : F7                             sm
(1)  587/    66A7 : 9B                             ghi   FB
(1)  588/    66A8 : 52                             str   r2
(1)  589/    66A9 : 99                             ghi   F9
(1)  590/    66AA : 77                             smb
(1)  591/    66AB : 8A                             glo   R10
(1)  592/    66AC : 52                             str   r2
(1)  593/    66AD : 88                             glo   r8
(1)  594/    66AE : 77                             smb
(1)  595/    66AF : 9A                             ghi   R10
(1)  596/    66B0 : 52                             str   r2
(1)  597/    66B1 : 98                             ghi   r8
(1)  598/    66B2 : 77                             smb
(1)  599/    66B3 : CB 66 DE                       lbnf  div_nope              ; jump if div was smaller
(1)  600/    66B6 : 8B                             glo   FB                    ; div -= man
(1)  601/    66B7 : 52                             str   r2
(1)  602/    66B8 : 89                             glo   F9
(1)  603/    66B9 : F7                             sm
(1)  604/    66BA : A9                             plo   F9
(1)  605/    66BB : 9B                             ghi   FB
(1)  606/    66BC : 52                             str   r2
(1)  607/    66BD : 99                             ghi   F9
(1)  608/    66BE : 77                             smb
(1)  609/    66BF : B9                             phi   F9
(1)  610/    66C0 : 8A                             glo   R10
(1)  611/    66C1 : 52                             str   r2
(1)  612/    66C2 : 88                             glo   r8
(1)  613/    66C3 : 77                             smb
(1)  614/    66C4 : A8                             plo   r8
(1)  615/    66C5 : 9A                             ghi   R10
(1)  616/    66C6 : 52                             str   r2
(1)  617/    66C7 : 98                             ghi   r8
(1)  618/    66C8 : 77                             smb
(1)  619/    66C9 : B8                             phi   r8
(1)  620/    66CA : 9F                             ghi   R15                    ; merge quotient into result
(1)  621/    66CB : 52                             str   r2
(1)  622/    66CC : 9C                             ghi   R12
(1)  623/    66CD : F1                             or
(1)  624/    66CE : BC                             phi   R12
(1)  625/    66CF : 8F                             glo   R15
(1)  626/    66D0 : 52                             str   r2
(1)  627/    66D1 : 8C                             glo   R12
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 43 - 1/27/2021 10:36:34


(1)  628/    66D2 : F1                             or
(1)  629/    66D3 : AC                             plo   R12
(1)  630/    66D4 : 9D                             ghi   R13
(1)  631/    66D5 : 52                             str   r2
(1)  632/    66D6 : 97                             ghi   F7
(1)  633/    66D7 : F1                             or
(1)  634/    66D8 : B7                             phi   F7
(1)  635/    66D9 : 8D                             glo   R13
(1)  636/    66DA : 52                             str   r2
(1)  637/    66DB : 87                             glo   F7
(1)  638/    66DC : F1                             or
(1)  639/    66DD : A7                             plo   F7
(1)  640/    66DE :                     div_nope:  				;18-02-09 moved label off macro
(1)  641/    66DE : (MACRO)             	   ccall fp_shr_fd              ; shift quotient right 17-03-06
(1)  642/    66E2 : 9A                             ghi   R10                    ; shift divisor right
(1)  643/    66E3 : F6                             shr
(1)  644/    66E4 : BA                             phi   R10
(1)  645/    66E5 : 8A                             glo   R10
(1)  646/    66E6 : 76                             shrc
(1)  647/    66E7 : AA                             plo   R10
(1)  648/    66E8 : 9B                             ghi   FB
(1)  649/    66E9 : 76                             shrc
(1)  650/    66EA : BB                             phi   FB
(1)  651/    66EB : 8B                             glo   FB
(1)  652/    66EC : 76                             shrc
(1)  653/    66ED : AB                             plo   FB
(1)  654/    66EE : C0 66 7D                       lbr   div_lp                ; loop back until done
(1)  655/    66F1 : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  656/    66F2 : B8                             phi   r8
(1)  657/    66F3 : 8C                             glo   R12
(1)  658/    66F4 : A8                             plo   r8
(1)  659/    66F5 : 97                             ghi   F7
(1)  660/    66F6 : B9                             phi   F9
(1)  661/    66F7 : 87                             glo   F7
(1)  662/    66F8 : A9                             plo   F9
(1)  663/    66F9 : 60                             irx                         ; recover sign
(1)  664/    66FA : 72                             ldxa
(1)  665/    66FB : A7                             plo   F7
(1)  666/    66FC : F0                             ldx                         ; recover answer exponent
(1)  667/    66FD : BF                             phi   R15
(1)  668/    66FE : C0 64 B6                       lbr   fp_sc_up              ; scale number and build answer
(1)  669/    6701 :                     
(1)  670/    6701 :                     ; ***************************************
(1)  671/    6701 :                     ; *** Mul 2 SP floating point numbers ***
(1)  672/    6701 :                     ; *** R8:F9 - Arg 1                   ***
(1)  673/    6701 :                     ; *** RA:FB - Arg 2                   ***
(1)  674/    6701 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  675/    6701 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  676/    6701 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  677/    6701 :                     ; ***        F7.0 - signs             ***
(1)  678/    6701 :                     ; ***************************************
(1)  679/    6701 :                     fp_mul:    		;separated from macro
(1)  680/    6701 : (MACRO)             	   pushr F7	;wjr save the C variable
(1)  681/    6705 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  682/    6709 : (MACRO)             	   pushr R13	;wjr
(1)  683/    670D : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  684/    670E :                     
(1)  685/    670E : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  686/    6712 : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  687/    6716 : 8F                             glo   R15                    ; get exp2
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 44 - 1/27/2021 10:36:34


(1)  688/    6717 : FF 7F                          smi   127                   ; remove bias
(1)  689/    6719 : 52                             str   r2                    ; place into memory
(1)  690/    671A : 9F                             ghi   R15                    ; get exp1
(1)  691/    671B : FF 7F                          smi   127                   ; remove bias
(1)  692/    671D : F4                             add                         ; add in exponent 2
(1)  693/    671E : FC 7F                          adi   127                   ; put bias back in
(1)  694/    6720 : 73                             stxd                        ; place onto stack
(1)  695/    6721 : 87                             glo   F7                    ; determine sign for answer
(1)  696/    6722 : 52                             str   r2
(1)  697/    6723 : F6                             shr
(1)  698/    6724 : F3                             xor
(1)  699/    6725 : 73                             stxd                        ; place onto stack
(1)  700/    6726 : 9E                             ghi   R14                    ; get baud constant
(1)  701/    6727 : 73                             stxd                        ; save on stack
(1)  702/    6728 : 96                             ghi   r6                    ; save return position on stack
(1)  703/    6729 : 73                             stxd
(1)  704/    672A : 86                             glo   r6
(1)  705/    672B : 73                             stxd
(1)  706/    672C : F8 00                          ldi   0                     ; initial value of ct
(1)  707/    672E : 73                             stxd
(1)  708/    672F : BE                             phi   R14                    ; set mulH to 0
(1)  709/    6730 : AE                             plo   R14
(1)  710/    6731 : B6                             phi   r6
(1)  711/    6732 : A6                             plo   r6
(1)  712/    6733 : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  713/    6734 : 88                             glo   r8                    ; be sure high bit is set
(1)  714/    6735 : F9 80                          ori   080h
(1)  715/    6737 : A8                             plo   r8
(1)  716/    6738 : F8 00                          ldi   0
(1)  717/    673A : BC                             phi   R12                    ; set result to 0
(1)  718/    673B : AC                             plo   R12
(1)  719/    673C : B7                             phi   F7
(1)  720/    673D : A7                             plo   F7
(1)  721/    673E : BF                             phi   R15
(1)  722/    673F : AF                             plo   R15
(1)  723/    6740 : BD                             phi   R13
(1)  724/    6741 : AD                             plo   R13
(1)  725/    6742 : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  726/    6743 : 8A                             glo   R10                    ; be sure high bit is set
(1)  727/    6744 : F9 80                          ori   080h
(1)  728/    6746 : AA                             plo   R10
(1)  729/    6747 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  730/    6748 : CA 67 57                       lbnz  mul_go1               ; jump if not zero
(1)  731/    674B : 9B                             ghi   FB
(1)  732/    674C : CA 67 57                       lbnz  mul_go1
(1)  733/    674F : 8A                             glo   R10
(1)  734/    6750 : CA 67 57                       lbnz  mul_go1
(1)  735/    6753 : 9A                             ghi   R10
(1)  736/    6754 : C2 67 CF                       lbz   mul_dn                ; jump if muliplier is zero
(1)  737/    6757 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  738/    6758 : F6                             shr
(1)  739/    6759 : BA                             phi   R10
(1)  740/    675A : 8A                             glo   R10
(1)  741/    675B : 76                             shrc
(1)  742/    675C : AA                             plo   R10
(1)  743/    675D : 9B                             ghi   FB
(1)  744/    675E : 76                             shrc
(1)  745/    675F : BB                             phi   FB
(1)  746/    6760 : 8B                             glo   FB
(1)  747/    6761 : 76                             shrc
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 45 - 1/27/2021 10:36:34


(1)  748/    6762 : AB                             plo   FB
(1)  749/    6763 : CB 67 A4                       lbnf  mul_no                ; jump if low bit was zero
(1)  750/    6766 : 89                             glo   F9                    ; res += mul
(1)  751/    6767 : 52                             str   r2
(1)  752/    6768 : 87                             glo   F7
(1)  753/    6769 : F4                             add
(1)  754/    676A : A7                             plo   F7
(1)  755/    676B : 99                             ghi   F9
(1)  756/    676C : 52                             str   r2
(1)  757/    676D : 97                             ghi   F7
(1)  758/    676E : 74                             adc
(1)  759/    676F : B7                             phi   F7
(1)  760/    6770 : 88                             glo   r8
(1)  761/    6771 : 52                             str   r2
(1)  762/    6772 : 8C                             glo   R12
(1)  763/    6773 : 74                             adc
(1)  764/    6774 : AC                             plo   R12
(1)  765/    6775 : 98                             ghi   r8
(1)  766/    6776 : 52                             str   r2
(1)  767/    6777 : 9C                             ghi   R12
(1)  768/    6778 : 74                             adc
(1)  769/    6779 : BC                             phi   R12
(1)  770/    677A : 86                             glo   r6                    ; now high 32 bits
(1)  771/    677B : 52                             str   r2
(1)  772/    677C : 8D                             glo   R13
(1)  773/    677D : F4                             add
(1)  774/    677E : AD                             plo   R13
(1)  775/    677F : 96                             ghi   r6
(1)  776/    6780 : 52                             str   r2
(1)  777/    6781 : 96                             ghi   r6
(1)  778/    6782 : 52                             str   r2
(1)  779/    6783 : 9D                             ghi   R13
(1)  780/    6784 : 74                             adc
(1)  781/    6785 : BD                             phi   R13
(1)  782/    6786 : 8E                             glo   R14
(1)  783/    6787 : 52                             str   r2
(1)  784/    6788 : 8F                             glo   R15
(1)  785/    6789 : 74                             adc
(1)  786/    678A : AF                             plo   R15
(1)  787/    678B : 9E                             ghi   R14
(1)  788/    678C : 52                             str   r2
(1)  789/    678D : 9F                             ghi   R15
(1)  790/    678E : 74                             adc
(1)  791/    678F : BF                             phi   R15
(1)  792/    6790 : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  793/    6791 : C2 67 A4                       lbz   mul_no                ; jump if no carry is needed
(1)  794/    6794 : 8D                             glo   R13                    ; move the carry on over
(1)  795/    6795 : FC 01                          adi   1
(1)  796/    6797 : AD                             plo   R13
(1)  797/    6798 : 9D                             ghi   R13
(1)  798/    6799 : 7C 00                          adci  0
(1)  799/    679B : BD                             phi   R13
(1)  800/    679C : 8F                             glo   R15
(1)  801/    679D : 7C 00                          adci  0
(1)  802/    679F : AF                             plo   R15
(1)  803/    67A0 : 9F                             ghi   R15
(1)  804/    67A1 : 7C 00                          adci  0
(1)  805/    67A3 : BF                             phi   R15
(1)  806/    67A4 : 60                  mul_no:    irx                         ; recover ct
(1)  807/    67A5 : F0                             ldx
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 46 - 1/27/2021 10:36:34


(1)  808/    67A6 : FC 01                          adi   1                     ; increment by 1
(1)  809/    67A8 : 73                             stxd                        ; and put it back
(1)  810/    67A9 : 89                             glo   F9                    ; shift mulL left
(1)  811/    67AA : FE                             shl
(1)  812/    67AB : A9                             plo   F9
(1)  813/    67AC : 99                             ghi   F9
(1)  814/    67AD : 7E                             shlc
(1)  815/    67AE : B9                             phi   F9
(1)  816/    67AF : 88                             glo   r8
(1)  817/    67B0 : 7E                             shlc
(1)  818/    67B1 : A8                             plo   r8
(1)  819/    67B2 : 98                             ghi   r8
(1)  820/    67B3 : 7E                             shlc
(1)  821/    67B4 : B8                             phi   r8
(1)  822/    67B5 : 86                             glo   r6                    ; shift mulH left
(1)  823/    67B6 : FE                             shl
(1)  824/    67B7 : A6                             plo   r6
(1)  825/    67B8 : 96                             ghi   r6
(1)  826/    67B9 : 7E                             shlc
(1)  827/    67BA : B6                             phi   r6
(1)  828/    67BB : 8E                             glo   R14
(1)  829/    67BC : 7E                             shlc
(1)  830/    67BD : AE                             plo   R14
(1)  831/    67BE : 9E                             ghi   R14
(1)  832/    67BF : 7E                             shlc
(1)  833/    67C0 : BE                             phi   R14
(1)  834/    67C1 : 98                             ghi   r8                    ; see if a carry is needed
(1)  835/    67C2 : C2 67 47                       lbz   mul_lp1               ; jump if not
(1)  836/    67C5 : F8 00                          ldi   0                     ; zero the high byte
(1)  837/    67C7 : B8                             phi   r8
(1)  838/    67C8 : 86                             glo   r6                    ; add in the carry
(1)  839/    67C9 : F9 01                          ori   1
(1)  840/    67CB : A6                             plo   r6
(1)  841/    67CC : C0 67 47                       lbr   mul_lp1               ; loop back for more
(1)  842/    67CF : 60                  mul_dn:    irx                         ; recover ct
(1)  843/    67D0 : 72                             ldxa
(1)  844/    67D1 : AE                             plo   R14                    ; set aside
(1)  845/    67D2 : 72                             ldxa
(1)  846/    67D3 : A6                             plo   r6
(1)  847/    67D4 : 72                             ldxa
(1)  848/    67D5 : B6                             phi   r6
(1)  849/    67D6 : F0                             ldx
(1)  850/    67D7 : BE                             phi   R14
(1)  851/    67D8 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  852/    67D9 : B8                             phi   r8
(1)  853/    67DA : 8C                             glo   R12
(1)  854/    67DB : A8                             plo   r8
(1)  855/    67DC : 97                             ghi   F7
(1)  856/    67DD : B9                             phi   F9
(1)  857/    67DE : 87                             glo   F7
(1)  858/    67DF : A9                             plo   F9
(1)  859/    67E0 : 8E                             glo   R14
(1)  860/    67E1 : AC                             plo   R12                    ; put ct into RC.0
(1)  861/    67E2 : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  862/    67E3 : FF 02                          smi   2                     ; see if <2
(1)  863/    67E5 : CB 67 FB                       lbnf  mul_nxt1              ; jump if so
(1)  864/    67E8 : (MACRO)                        ccall    fp_shr_1           ; shift answer to the right 17-03-06
(1)  865/    67EC : (MACRO)                        ccall    fp_shr_fd          ; shift resH right 17-03-06
(1)  866/    67F0 : CB 67 F7                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  867/    67F3 : 88                             glo   r8                    ; set high bit
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 47 - 1/27/2021 10:36:34


(1)  868/    67F4 : F9 80                          ori   080h
(1)  869/    67F6 : A8                             plo   r8
(1)  870/    67F7 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  871/    67F8 : C0 67 E2                       lbr   mul_lp2               ; loop back to keep checking
(1)  872/    67FB : 60                  mul_nxt1:  irx                         ; recover sign
(1)  873/    67FC : 72                             ldxa
(1)  874/    67FD : A7                             plo   F7
(1)  875/    67FE : F0                             ldx                         ; recover answer exponent
(1)  876/    67FF : AC                             plo   R12
(1)  877/    6800 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  878/    6801 : CA 68 13                       lbnz  mul_lp3a
(1)  879/    6804 : 8F                             glo   R15
(1)  880/    6805 : CA 68 13                       lbnz  mul_lp3a
(1)  881/    6808 : 9D                             ghi   R13
(1)  882/    6809 : CA 68 13                       lbnz  mul_lp3a
(1)  883/    680C : 8D                             glo   R13
(1)  884/    680D : CA 68 13                       lbnz  mul_lp3a
(1)  885/    6810 : C0 68 26                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  886/    6813 : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  887/    6814 : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  888/    6818 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  889/    681C : CB 68 00                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  890/    681F : 88                             glo   r8                    ; set high bit
(1)  891/    6820 : F9 80                          ori   080h
(1)  892/    6822 : A8                             plo   r8
(1)  893/    6823 : C0 68 00                       lbr   mul_lp3
(1)  894/    6826 : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  895/    6827 : BF                             phi   R15                    ; to high R15
(1)  896/    6828 : C0 64 B6                       lbr   fp_sc_up              ; scale number and build answer
(1)  897/    682B :                     
(1)  898/    682B :                     ; ***************************************
(1)  899/    682B :                     ; *** Convert ascii to floating point ***
(1)  900/    682B :                     ; *** RF - buffer to ascii text       ***
(1)  901/    682B :                     ; *** Returns: R8:F9 - number         ***
(1)  902/    682B :                     ; ***************************************
(1)  903/    682B : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  904/    682C : FF 20                          smi   ' '                   ; check for space
(1)  905/    682E : C2 68 2B                       lbz   fp_atof               ; move past any spaces
(1)  906/    6831 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  907/    6832 : 0F                             ldn   R15                    ; check for possible sign
(1)  908/    6833 : FF 2D                          smi   '-'                   ; first check for minus
(1)  909/    6835 : CA 68 3F                       lbnz   atof_nm              ; jump if not minus
(1)  910/    6838 : F8 80                          ldi   080h                  ; high bit set for minus
(1)  911/    683A : 73                             stxd                        ; place onto stack
(1)  912/    683B : 1F                             inc   R15                    ; move past sign
(1)  913/    683C : C0 68 49                       lbr   atof_go1              ; and continue
(1)  914/    683F : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  915/    6841 : 73                             stxd                        ; place onto stack
(1)  916/    6842 : 0F                             ldn   R15                    ; now check for + sign
(1)  917/    6843 : FF 2B                          smi   '+'
(1)  918/    6845 : CA 68 49                       lbnz  atof_go1              ; jump if not plus
(1)  919/    6848 : 1F                             inc   R15                    ; move past plus sign
(1)  920/    6849 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  921/    684B : B8                             phi   r8
(1)  922/    684C : A8                             plo   r8
(1)  923/    684D : B9                             phi   F9
(1)  924/    684E : A9                             plo   F9
(1)  925/    684F : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  926/    6850 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  927/    6854 : CB 68 85                       lbnf  atof_no1              ; jump if not
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 48 - 1/27/2021 10:36:34


(1)  928/    6857 : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  929/    6858 : BA                             phi   R10
(1)  930/    6859 : 88                             glo   r8
(1)  931/    685A : AA                             plo   R10
(1)  932/    685B : 99                             ghi   F9
(1)  933/    685C : BB                             phi   FB
(1)  934/    685D : 89                             glo   F9
(1)  935/    685E : AB                             plo   FB
(1)  936/    685F : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  937/    6863 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  938/    6867 : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  939/    686B : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  940/    686F : 4F                             lda   R15                    ; get number
(1)  941/    6870 : FF 30                          smi   '0'                   ; convert to binary
(1)  942/    6872 : 52                             str   r2                    ; setup for add
(1)  943/    6873 : 89                             glo   F9                    ; add in next digit
(1)  944/    6874 : F4                             add
(1)  945/    6875 : A9                             plo   F9
(1)  946/    6876 : 99                             ghi   F9                    ; propagate carry
(1)  947/    6877 : 7C 00                          adci  0
(1)  948/    6879 : B9                             phi   F9
(1)  949/    687A : 88                             glo   r8
(1)  950/    687B : 7C 00                          adci  0
(1)  951/    687D : A8                             plo   r8
(1)  952/    687E : 98                             ghi   r8
(1)  953/    687F : 7C 00                          adci  0
(1)  954/    6881 : B8                             phi   r8
(1)  955/    6882 : C0 68 4F                       lbr   atof_lp1              ; loop until no more digits
(1)  956/    6885 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  957/    6886 : FF 2E                          smi   '.'
(1)  958/    6888 : CA 68 8C                       lbnz  atof_ndp              ; jump if none
(1)  959/    688B : 1F                             inc   R15                    ; move past decimal
(1)  960/    688C : F8 69               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  961/    688E : BA                             phi   R10
(1)  962/    688F : F8 CA                          ldi   scratch&255
(1)  963/    6891 : AA                             plo   R10
(1)  964/    6892 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  965/    6894 : AC                             plo   R12
(1)  966/    6895 : F8 00               atof_lpx:  ldi   0
(1)  967/    6897 : 5A                             str   R10
(1)  968/    6898 : 1A                             inc   R10
(1)  969/    6899 : 2C                             dec   R12
(1)  970/    689A : 8C                             glo   R12
(1)  971/    689B : CA 68 95                       lbnz  atof_lpx
(1)  972/    689E : F8 69                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  973/    68A0 : BA                             phi   R10
(1)  974/    68A1 : F8 CB                          ldi   (scratch+1)&255
(1)  975/    68A3 : AA                             plo   R10
(1)  976/    68A4 : F8 01                          ldi   1                     ; setup count
(1)  977/    68A6 : AC                             plo   R12
(1)  978/    68A7 : F8 00                          ldi   0                     ; setup exp flag
(1)  979/    68A9 : BC                             phi   R12
(1)  980/    68AA : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  981/    68AB : FF 11                          smi   17
(1)  982/    68AD : C2 68 C7                       lbz   atof_dn3              ; jump if so
(1)  983/    68B0 : 0F                             ldn   R15                    ; get character
(1)  984/    68B1 : (MACRO)                        ccall    f_isnum                 ; is it numeric
(1)  985/    68B5 : CB 68 C7                       lbnf  atof_dn3              ; jump if not
(1)  986/    68B8 : 4F                             lda   R15                    ; get character
(1)  987/    68B9 : FF 30                          smi   '0'                   ; converto to binary
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 49 - 1/27/2021 10:36:34


(1)  988/    68BB : 5A                             str   R10                    ; write into bcd area
(1)  989/    68BC : 1A                             inc   R10
(1)  990/    68BD : 1C                             inc   R12                    ; increment count
(1)  991/    68BE : CA 68 AA                       lbnz  atof_lp2              ; loop back until done
(1)  992/    68C1 : F8 01                          ldi   1                     ; set non zero flag
(1)  993/    68C3 : BC                             phi   R12
(1)  994/    68C4 : C0 68 AA                       lbr   atof_lp2
(1)  995/    68C7 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  996/    68C8 : CA 68 E1                       lbnz  atof_nz
(1)  997/    68CB : 98                             ghi   r8                    ; check for non-zero integer
(1)  998/    68CC : CA 68 E1                       lbnz  atof_nz
(1)  999/    68CF : 88                             glo   r8
(1) 1000/    68D0 : CA 68 E1                       lbnz  atof_nz
(1) 1001/    68D3 : 99                             ghi   F9
(1) 1002/    68D4 : CA 68 E1                       lbnz  atof_nz
(1) 1003/    68D7 : 89                             glo   F9
(1) 1004/    68D8 : CA 68 E1                       lbnz  atof_nz
(1) 1005/    68DB : 60                             irx                         ; recover sign
(1) 1006/    68DC : F0                             ldx
(1) 1007/    68DD : B8                             phi   r8                    ; put in high of zero
(1) 1008/    68DE : C0 69 B8                       lbr	atof_end               ; and return
(1) 1009/    68E1 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1010/    68E3 : BC                             phi   R12
(1) 1011/    68E4 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1012/    68E5 : FA 80                          ani   080h
(1) 1013/    68E7 : CA 69 32                       lbnz  atof_dn4              ; jump if so
(1) 1014/    68EA : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1015/    68EE : F8 69                          ldi   scratch>>8          ; point to bcd number
(1) 1016/    68F0 : BA                             phi   R10
(1) 1017/    68F1 : F8 CA                          ldi   255&scratch
(1) 1018/    68F3 : AA                             plo   R10
(1) 1019/    68F4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1020/    68F6 : 5A                             str   R10
(1) 1021/    68F7 : F8 69                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1022/    68F9 : BA                             phi   R10
(1) 1023/    68FA : F8 D9                          ldi   255&(scratch+15)
(1) 1024/    68FC : AA                             plo   R10
(1) 1025/    68FD : F8 00                          ldi   0                     ; set carry forward
(1) 1026/    68FF : AE                             plo   R14
(1) 1027/    6900 : F8 10                          ldi   16                    ; setup count
(1) 1028/    6902 : AC                             plo   R12
(1) 1029/    6903 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1030/    6904 : 52                             str   r2                    ; in memory for add
(1) 1031/    6905 : 0A                             ldn   R10                    ; get bcd digit
(1) 1032/    6906 : F4                             add                         ; add in carry
(1) 1033/    6907 : 52                             str   r2                    ; place into memory
(1) 1034/    6908 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1035/    6909 : F4                             add                         ; digit now doubled with carry
(1) 1036/    690A : 5A                             str   R10                    ; put it back
(1) 1037/    690B : FF 0A                          smi   10
(1) 1038/    690D : CB 69 14                       lbnf  atof_no4              ; jump if below 10
(1) 1039/    6910 : 5A                             str   R10                    ; store value - 10
(1) 1040/    6911 : F8 01                          ldi   1                     ; carry set to 1
(1) 1041/    6913 : C8                             lskp                        ; skip next instruction
(1) 1042/    6914 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1043/    6916 : AE                             plo   R14
(1) 1044/    6917 : 2A                             dec   R10                    ; move to previous digit
(1) 1045/    6918 : 2C                             dec   R12                    ; decrement digit count
(1) 1046/    6919 : 8C                             glo   R12                    ; see if done
(1) 1047/    691A : CA 69 03                       lbnz  atof_lp4              ; jump if not
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 50 - 1/27/2021 10:36:34


(1) 1048/    691D : F8 69                          ldi   scratch>>8	       ; point to first digit
(1) 1049/    691F : BA                             phi   R10
(1) 1050/    6920 : F8 CA                          ldi   255&scratch
(1) 1051/    6922 : AA                             plo   R10
(1) 1052/    6923 : 0A                             ldn   R10                    ; retrieve it
(1) 1053/    6924 : C2 69 2B                       lbz   atof_nc4              ; jump if no carry
(1) 1054/    6927 : 89                             glo   F9                    ; add in the carry
(1) 1055/    6928 : F9 01                          ori   1
(1) 1056/    692A : A9                             plo   F9
(1) 1057/    692B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1058/    692C : FC 01                          adi   1
(1) 1059/    692E : BC                             phi   R12
(1) 1060/    692F : C0 68 E4                       lbr   atof_lp3              ; loop until full
(1) 1061/    6932 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1062/    6933 : 52                             str   r2                    ; into memory
(1) 1063/    6934 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1064/    6936 : F7                             sm
(1) 1065/    6937 : FC 7F                          adi   127                   ; add in bias
(1) 1066/    6939 : BD                             phi   R13                    ; set aside
(1) 1067/    693A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1068/    693B : A9                             plo   F9
(1) 1069/    693C : 88                             glo   r8
(1) 1070/    693D : B9                             phi   F9
(1) 1071/    693E : 98                             ghi   r8
(1) 1072/    693F : FE                             shl                         ; shift out high bit
(1) 1073/    6940 : A8                             plo   r8
(1) 1074/    6941 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1075/    6942 : F6                             shr
(1) 1076/    6943 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1077/    6944 : 88                             glo   r8                    ; get mantissa
(1) 1078/    6945 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1079/    6946 : A8                             plo   r8                    ; and write it
(1) 1080/    6947 : 60                             irx                         ; point to sign
(1) 1081/    6948 : 98                             ghi   r8                    ; high byte
(1) 1082/    6949 : F1                             or                          ; set sign
(1) 1083/    694A : B8                             phi   r8                    ; done with base conversion
(1) 1084/    694B : 0F                             ldn   R15                    ; get next byte
(1) 1085/    694C : FF 65                          smi   'e'                   ; check for exponents
(1) 1086/    694E : C2 69 57                       lbz   atof_exp
(1) 1087/    6951 : 0F                             ldn   R15
(1) 1088/    6952 : FF 45                          smi   'E'
(1) 1089/    6954 : CA 69 B8                       lbnz  atof_end
(1) 1090/    6957 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1091/    6958 : 0F                             ldn   R15                    ; check for sign
(1) 1092/    6959 : FF 2D                          smi   '-'
(1) 1093/    695B : C2 69 68                       lbz   atof_n
(1) 1094/    695E : 0F                             ldn   R15
(1) 1095/    695F : FF 2B                          smi   '+'
(1) 1096/    6961 : C2 69 65                       lbz   atof_p
(1) 1097/    6964 : 2F                             dec   R15                    ; positive if no sign
(1) 1098/    6965 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1099/    6967 : C8                             lskp
(1) 1100/    6968 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1101/    696A : BC                             phi   R12                    ; place into sign variable
(1) 1102/    696B : 1F                             inc   R15                    ; move past sign
(1) 1103/    696C : F8 00                          ldi   0                     ; setup intial count
(1) 1104/    696E : AC                             plo   R12
(1) 1105/    696F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1106/    6970 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1107/    6974 : CB 69 86                       lbnf  atof_dn5              ; jump if not
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802fp.inc) - Page 51 - 1/27/2021 10:36:34


(1) 1108/    6977 : 8C                             glo   R12                    ; make copy of exponent
(1) 1109/    6978 : 52                             str   r2
(1) 1110/    6979 : F6                             shr                         ; multiply by 2
(1) 1111/    697A : F6                             shr                         ; by 4
(1) 1112/    697B : F4                             add                         ; by 5
(1) 1113/    697C : F6                             shr                         ; by 10
(1) 1114/    697D : 52                             str   r2                    ; put here for add
(1) 1115/    697E : 4F                             lda   R15                    ; recover number
(1) 1116/    697F : FF 30                          smi   '0'                   ; convert to binary
(1) 1117/    6981 : F4                             add                         ; add with total
(1) 1118/    6982 : AC                             plo   R12                    ; copy back to R12
(1) 1119/    6983 : C0 69 6F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1120/    6986 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1121/    6987 : C2 69 B8                       lbz   atof_end              ; jump if so
(1) 1122/    698A : 2C                             dec   R12                    ; otherwise decrement count
(1) 1123/    698B : 8C                             glo   R12                    ; save count
(1) 1124/    698C : 73                             stxd
(1) 1125/    698D : 9C                             ghi   R12                    ; save sign
(1) 1126/    698E : 73                             stxd
(1) 1127/    698F : 8F                             glo   R15
(1) 1128/    6990 : 73                             stxd
(1) 1129/    6991 : 9F                             ghi   R15
(1) 1130/    6992 : 73                             stxd
(1) 1131/    6993 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1132/    6995 : BA                             phi   R10
(1) 1133/    6996 : F8 20                          ldi   020h
(1) 1134/    6998 : AA                             plo   R10
(1) 1135/    6999 : F8 00                          ldi   0
(1) 1136/    699B : BB                             phi   FB
(1) 1137/    699C : AB                             plo   FB
(1) 1138/    699D : 9C                             ghi   R12
(1) 1139/    699E : C2 69 A8                       lbz   atof_div              ; jump if negative
(1) 1140/    69A1 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1141/    69A5 : C0 69 AC                       lbr   atof_go5              ; clean up call
(1) 1142/    69A8 :                     atof_div:  				;18-02-09 moved label off macro statement
(1) 1143/    69A8 : (MACRO)                        Ccall fp_div                 ; divide by 10
(1) 1144/    69AC : 60                  atof_go5:  irx                         ; recover variables
(1) 1145/    69AD : 72                             ldxa
(1) 1146/    69AE : BF                             phi   R15
(1) 1147/    69AF : 72                             ldxa
(1) 1148/    69B0 : AF                             plo   R15
(1) 1149/    69B1 : 72                             ldxa
(1) 1150/    69B2 : BC                             phi   R12
(1) 1151/    69B3 : F0                             ldx
(1) 1152/    69B4 : AC                             plo   R12
(1) 1153/    69B5 : C0 69 86                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1154/    69B8 :                     atof_end:
(1) 1155/    69B8 : 12                  	   inc	r2	;wjr release work area
(1) 1156/    69B9 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1157/    69BE : (MACRO)             	   popr R12	;wjr
(1) 1158/    69C3 : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1159/    69C8 : (MACRO)             	   Cretn
(1) 1160/    69CA : 00 00               scratch:   db	00,00
    1306/    69CC :                     	include IO1802.inc
(1)    1/    69CC :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    69CC :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    69CC :                     ;18-02-23 changed label + to $$no0 in _inp: to eliminate this style of temporary
(1)    4/    69CC :                     	align 64
(1)    5/    6A00 :                     ;;function_start IO1802.inc void function(void)
(1)    6/    6A00 :                     _putc:
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(IO1802.inc) - Page 52 - 1/27/2021 10:36:34


(1)    7/    6A00 :                     _out5:	
(1)    8/    6A00 : 8C                  	glo	regArg1
(1)    9/    6A01 : 22                  	dec	sp
(1)   10/    6A02 : 52                  	str	sp
(1)   11/    6A03 : 65                  	out	5
(1)   12/    6A04 : (MACRO)             	Cretn
(1)   13/    6A06 :                     _inp:		;raw port input
(1)   14/    6A06 :                     		;stores a small tailored program on the stack and executes it
(1)   15/    6A06 : 22                  	dec	sp	;work backwards
(1)   16/    6A07 : F8 D3               	ldi	0xD3	;return instruction
(1)   17/    6A09 : 73                  	stxd		
(1)   18/    6A0A : 8C                  	glo	regarg1	;get the port number
(1)   19/    6A0B : FA 07               	ani	0x07	;clean it
(1)   20/    6A0D : 32 1D               	bz	$$no0	; inp(0) isn't valid
(1)   21/    6A0F : F9 68               	ori	0x68	;make it an input instruction
(1)   22/    6A11 : 73                  	stxd		;store it for execution
(1)   23/    6A12 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   24/    6A16 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   25/    6A17 : D8                  	sep	rt1	;execute it
(1)   26/    6A18 :                     ;we will come back to here with the input byte in D
(1)   27/    6A18 : 12                  	inc	sp	;step over the work area
(1)   28/    6A19 : AF                  	plo	retVal	;save it to return
(1)   29/    6A1A : F8 00               	ldi	0
(1)   30/    6A1C : BF                  	phi	retval	;clear top byte
(1)   31/    6A1D : 12                  $$no0	inc	sp	;need to get rid of the 6x instruction
(1)   32/    6A1E : 12                  	inc	sp	;and the D3
(1)   33/    6A1F : (MACRO)             	Cretn		;and we're done
(1)   34/    6A21 :                     	
(1)   35/    6A21 :                     _out:		;raw port output
(1)   36/    6A21 :                     		;stores a small tailored program on the stack and executes it
(1)   37/    6A21 :                     		;this could be bolder:
(1)   38/    6A21 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   39/    6A21 :                     		;then SEP sp
(1)   40/    6A21 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   41/    6A21 :                     		;saves 6 instructions but it's a bit tricky.
(1)   42/    6A21 : 22                  	dec	sp	;work backwards
(1)   43/    6A22 : F8 D3               	ldi	0xD3	;return instruction
(1)   44/    6A24 : 73                  	stxd		
(1)   45/    6A25 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   46/    6A29 : 8C                  	glo	regarg1	;get the port number
(1)   47/    6A2A : FA 07               	ani	0x07	;clean it
(1)   48/    6A2C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   49/    6A2E : 73                  	stxd		;store it for execution
(1)   50/    6A2F : 8D                  	glo	regarg2	;get the byte to be written
(1)   51/    6A30 : 52                  	str	sp	;store it where sp points
(1)   52/    6A31 : D8                  	sep	rt1	;execute it
(1)   53/    6A32 :                     ;we will come back to here with sp stepped up by one
(1)   54/    6A32 : 12                  	inc	sp	;need to get rid of the 6x instruction
(1)   55/    6A33 : 12                  	inc	sp	;and the D3
(1)   56/    6A34 : (MACRO)             	Cretn		;and we're done
(1)   57/    6A36 :                     ;;function_end IO1802.inc
(1)   58/    6A36 :                     
(1)   59/    6A36 :                     	
(1)   60/    6A36 :                     	
(1)   61/    6A36 :                     
    1307/    6A36 :                     	include LCC1802finale.inc
(1)    1/    6A36 :                     ;LCC1802finale.inc is the last code processed by the assembler
(1)    2/    6A36 :                     ;20-05-23 finale used to include comx/comx_final.inc with  comx load feature
(1)    3/    6A36 :                     ;20-06-11 renamed to basic_final to reflect this is a final addition to add BASIC routine
(1)    4/    6A36 :                     
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(LCC1802finale.inc) - Page 53 - 1/27/2021 10:36:34


(1)    5/    6A36 : =>DEFINED             IFDEF LCCCX
(1)    6/    6A36 :                         include devkit/system/basic_final.inc
(2)    1/    6A36 :                     ;comx_final.inc contains BASIC CALL routine as well as settings for BASIC SYSTEM paramters
(2)    2/    6A36 :                     ;
(2)    3/    6A36 :                     ; *******************************************************************
(2)    4/    6A36 :                     ; *** This software is copyright 2020 by Marcel van Tongeren      ***
(2)    5/    6A36 :                     ; *** with support from Bill Rowe and Fabrizio Caruso.            ***
(2)    6/    6A36 :                     ; ***                                                             ***
(2)    7/    6A36 :                     ; *** You have permission to use, modify, copy, and distribute    ***
(2)    8/    6A36 :                     ; *** this software so long as this copyright notice is retained. ***
(2)    9/    6A36 :                     ; *** This software may not be used in commercial applications    ***
(2)   10/    6A36 :                     ; *** without express written permission from the author.         ***
(2)   11/    6A36 :                     ; *******************************************************************
(2)   12/    6A36 :                     ; 
(2)   13/    6A36 :                     ;20-05-23 First version
(2)   14/    6A36 :                     ;;function_start basic_final.inc void function(void)    
(2)   15/    6A36 : =>DEFINED             IFDEF LCCCX
(2)   16/    6A36 :                         align 256
(2)   17/    6B00 :                     $$defus:
(2)   18/    6B00 : 00 00                   dw 0
(2)   19/    6B02 : 00 00                   dw 0
(2)   20/    6B04 : 00 00                   dw 0
(2)   21/    6B06 : 00 00                   dw 0
(2)   22/    6B08 : 00 00                   dw 0
(2)   23/    6B0A : 00 00                   dw 0
(2)   24/    6B0C :                     $$sop
(2)   25/    6B0C : 00 0A                   dw 0x000a
(2)   26/    6B0E : 0A A8                   dw 0x0aa8
(2)   27/    6B10 : D6 D0                   dw 0xd6d0
(2)   28/    6B12 :                     
(2)   29/    6B12 : =>UNDEFINED           IFDEF COMX
(2)   30/    6B12 :                         dw 0x3434
(2)   31/    6B12 :                         dw 0x3031
(2)   32/    6B12 :                         dw 0xc40d
(2)   33/    6B12 :                         dw 0xffff
(2)   34/    6B12 :                         dw 0x0384
(2)   35/    6B12 :                         db 0x0d
(2)   36/    6B12 :                     $$eop:
(2)   37/    6B12 :                     ;;function_end basic_final.inc
(2)   38/    6B12 :                         org 0x4281
(2)   39/    6B12 :                         dw $$sop
(2)   40/    6B12 :                         dw $$eop
(2)   41/    6B12 :                     
(2)   42/    6B12 :                         org 0x4292
(2)   43/    6B12 :                         dw $$defus+0x26
(2)   44/    6B12 :                         dw $$defus+0x26
(2)   45/    6B12 :                     
(2)   46/    6B12 :                         org 0x4400
(2)   47/    6B12 :                         db ($$defus >> 8) - 0x44
(2)   48/    6B12 :                     
(2)   49/    6B12 :                         org 0x4299    
(2)   50/    6B12 : [29]                  ENDIF
(2)   51/    6B12 :                       
(2)   52/    6B12 : =>UNDEFINED           IFDEF TMC600
(2)   53/    6B12 :                         dw 0x3633
(2)   54/    6B12 :                         dw 0x3030
(2)   55/    6B12 :                         dw 0xc40d
(2)   56/    6B12 :                         dw 0xffff
(2)   57/    6B12 :                         dw 0x0384
(2)   58/    6B12 :                         db 0x0d
 AS V1.42 Beta [Bld 172] - Source File mule.olasm(devkit/system/basic_final.inc) - Page 54 - 1/27/2021 10:36:34


(2)   59/    6B12 :                     $$eop:
(2)   60/    6B12 :                     
(2)   61/    6B12 :                         org 0x6181
(2)   62/    6B12 :                         dw $$sop
(2)   63/    6B12 :                         dw $$eop
(2)   64/    6B12 :                     
(2)   65/    6B12 :                         org 0x6192
(2)   66/    6B12 :                         dw $$defus+0x26
(2)   67/    6B12 :                         dw $$defus+0x26
(2)   68/    6B12 :                     
(2)   69/    6B12 :                         org 0x6199
(2)   70/    6B12 : [52]                  ENDIF
(2)   71/    6B12 :                       
(2)   72/    6B12 : =>UNDEFINED           IFDEF PECOM
(2)   73/    6B12 :                         dw 0x3032
(2)   74/    6B12 :                         dw 0x3031
(2)   75/    6B12 :                         dw 0xc40d
(2)   76/    6B12 :                         dw 0xffff
(2)   77/    6B12 :                         dw 0x0384
(2)   78/    6B12 :                         db 0x0d
(2)   79/    6B12 :                     $$eop:
(2)   80/    6B12 :                     
(2)   81/    6B12 :                         org 0x81
(2)   82/    6B12 :                         dw $$sop
(2)   83/    6B12 :                         dw $$eop
(2)   84/    6B12 :                     
(2)   85/    6B12 :                         org 0x92
(2)   86/    6B12 :                         dw $$defus+0x26
(2)   87/    6B12 :                         dw $$defus+0x26
(2)   88/    6B12 :                         
(2)   89/    6B12 :                         org 0x200
(2)   90/    6B12 :                         db ($$defus >> 8) - 2
(2)   91/    6B12 :                         
(2)   92/    6B12 :                         org 0x99
(2)   93/    6B12 : [72]                  ENDIF
(2)   94/    6B12 : 6B 26                   dw $$defus+0x26
(2)   95/    6B14 : [15]                  ENDIF
(1)    7/    6B14 : [5]                   ENDIF
    1308/    6B14 :                     
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 55 - 1/27/2021 10:36:34


  Symbol Table (* = unused):
  --------------------------

 ADD_A1NZ :                    6515 C |  ADD_A2NZ :                    6527 C |
 ADD_FNL :                     65CE C |  ADD_LP1 :                     6570 C |
 ADD_LP1DN :                   6585 C |  ADD_NM :                      6595 C |
 ADD_NO :                      65B7 C |  ADD_NS :                      655D C |
 ADD_NX :                      65FF C |  ADD_NZ :                      65F0 C |
 AGAIN176 :                    6046 C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
 ATOF_DIV :                    69A8 C |  ATOF_DN3 :                    68C7 C |
 ATOF_DN4 :                    6932 C |  ATOF_DN5 :                    6986 C |
 ATOF_END :                    69B8 C |  ATOF_EXP :                    6957 C |
 ATOF_GO1 :                    6849 C |  ATOF_GO5 :                    69AC C |
 ATOF_LP1 :                    684F C |  ATOF_LP2 :                    68AA C |
 ATOF_LP3 :                    68E4 C |  ATOF_LP4 :                    6903 C |
 ATOF_LP5 :                    696F C |  ATOF_LPX :                    6895 C |
 ATOF_N :                      6968 C |  ATOF_NC4 :                    692B C |
 ATOF_NDP :                    688C C |  ATOF_NM :                     683F C |
 ATOF_NO1 :                    6885 C |  ATOF_NO4 :                    6914 C |
 ATOF_NZ :                     68E1 C |  ATOF_P :                      6965 C |
*BIGENDIAN :                      0 - |  BITLOOP150 :                  5E43 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECK_SUB179 :                6197 C |  CKNEXT150 :                   5E92 C |
 CKTOP150 :                    5E2E C |  CLRLP150 :                    5E1F C |
 CODELOC :                     4401 - |  COMPUTEQUOT176 :              605C C |
*CONSTPI :        3.141592653589793 - |  CPUSPEED :                  186A00 - |
*CSEG :                           1 - |  CVFI4 :                       6400 C |
 CVIF4 :                       6300 C | *DATE :                 "1/27/2021" - |
 DCKLP150 :                    5E46 C |  DEFUS257 :                    6B00 C |
 DIV_A1NZ :                    661E C |  DIV_A2NZ :                    663D C |
 DIV_GO :                      66A3 C |  DIV_GO1 :                     6690 C |
 DIV_LP :                      667D C |  DIV_NOPE :                    66DE C |
 DIV_Z :                       66F1 C |  DNOADD150 :                   5E4E C |
 DONE150 :                     5E9C C |  DONE177 :                     60BF C |
 DONE180 :                     6277 C |  DONE186 :                     636F C |
 DONE187 :                     6461 C |  DSHLP150 :                    5E62 C |
 ENDLP178 :                    6161 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       646F C |
*FALSE :                          0 - |  FB :                            0B - |
 FP_ADD :                      64FB C |  FP_ADD_12 :                   6490 C |
 FP_ATOF :                     682B C |  FP_DIV :                      660C C |
 FP_GETEXP :                   64E7 C |  FP_GETSGN :                   64F3 C |
 FP_MUL :                      6701 C |  FP_SC_CLN :                   64C7 C |
 FP_SC_UP :                    64B6 C |  FP_SHL_1 :                    6482 C |
 FP_SHR_1 :                    6474 C |  FP_SHR_FD :                   64A8 C |
 FP_SUB :                      6605 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     6463 C | *HAS64 :                          0 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                          445C C |  L100 :                        5BA9 C |
 L102 :                        5C0F C | *L103 :                        5CFD C |
 L104 :                        5C66 C |  L105 :                        5CA4 C |
*L107 :                        5DE3 C |  L108 :                        5D37 C |
 L109 :                        5DA4 C | *L111 :                        5EE5 C |
 L12 :                         44DD C |  L13 :                         44FC C |
 L14 :                         4532 C | *L16 :                         45ED C |
 L17 :                         45BE C |  L18 :                         45E1 C |
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 56 - 1/27/2021 10:36:34


 L2 :                          5F08 C | *L20 :                         4620 C |
 L21 :                         4608 C |  L22 :                         461C C |
*L25 :                         4A50 C |  L26 :                         4750 C |
 L27 :                         4774 C |  L28 :                         5EF4 C |
 L29 :                         5EF0 C |  L3 :                          5EF8 C |
 L30 :                         4774 C |  L32 :                         47F5 C |
 L34 :                         4A44 C | *L36 :                         4DFB C |
 L37 :                         4B75 C |  L38 :                         4B98 C |
 L39 :                         4BA7 C |  L4 :                          4595 C |
 L40 :                         4DB5 C |  L42 :                         4BC9 C |
*L43 :                         4BC9 C |  L45 :                         4C47 C |
 L46 :                         4D95 C |  L49 :                         4D01 C |
 L5 :                          4487 C | *L50 :                         4F19 C |
 L51 :                         4EB1 C | *L53 :                         4F82 C |
*L54 :                         4FDB C | *L55 :                         5053 C |
*L56 :                         50C4 C |  L57 :                         509D C |
 L58 :                         50C4 C | *L59 :                         512C C |
*L6 :                          4532 C | *L60 :                         5A94 C |
 L61 :                         5201 C |  L62 :                         5A90 C |
 L64 :                         521C C |  L65 :                         5A90 C |
 L67 :                         5A71 C |  L68 :                         5A90 C |
 L70 :                         52EB C |  L71 :                         5368 C |
 L72 :                         53ED C |  L73 :                         543F C |
 L74 :                         547E C |  L75 :                         54C6 C |
 L76 :                         55F3 C |  L77 :                         5928 C |
 L79 :                         56C2 C |  L8 :                          4556 C |
 L81 :                         5716 C |  L82 :                         58E0 C |
 L83 :                         5928 C |  L84 :                         5A71 C |
 L86 :                         59E8 C |  L88 :                         5283 C |
 L89 :                         529E C |  L9 :                          4517 C |
 L90 :                         526F C | *L92 :                         52D0 C |
*L93 :                         5AF8 C |  L94 :                         5EE7 C |
 L95 :                         5AF5 C | *L96 :                         5AF5 C |
*L98 :                         5C1B C |  L99 :                         5B4C C |
 LCC1802INIT :                 5F0C C | *LCCCX :                          1 - |
*LISTON :                         1 - |  LOOP178 :                     610F C |
 LSH187 :                      642B C | *MACEXP :                         7 - |
 MEMADDR :                       0E - |  MLOOP179 :                    6178 C |
 MOMCPU :                      1802 - | *MOMCPUNAME :                "1802" - |
 MSLF174 :                     5FB2 C |  MULRDONE175 :                 6024 C |
 MULRLP175 :                   6004 C |  MULRNOADD175 :                6016 C |
 MULRSHFT175 :                 601C C |  MUL_DN :                      67CF C |
 MUL_GO1 :                     6757 C |  MUL_LP1 :                     6747 C |
 MUL_LP2 :                     67E2 C |  MUL_LP2A :                    67F7 C |
 MUL_LP3 :                     6800 C |  MUL_LP3A :                    6813 C |
 MUL_LP4 :                     6826 C |  MUL_NO :                      67A4 C |
 MUL_NXT1 :                    67FB C | *NESTMAX :                      100 - |
 NEY0Y176 :                    6075 C |  NO0256 :                      6A1D C |
 NORESTORE178 :                615D C |  NXT186 :                      6330 C |
 OUT176 :                      6083 C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      646C C |
 POS1177 :                     609C C |  POS1180 :                     6226 C |
 POS2177 :                     60AC C |  POS2180 :                     624D C |
*R0 :                             0 - | *R1 :                             1 - |
 R10 :                           0A - |  R11 :                           0B - |
 R12 :                           0C - |  R13 :                           0D - |
 R14 :                           0E - |  R15 :                           0F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 57 - 1/27/2021 10:36:34


 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                       0C - |
 REGARG2 :                       0D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                        0F - |
*RL0 :                            1 - |  RL10 :                          0B - |
 RL12 :                          0D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                         0D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                         0E - |  SCRATCH :                     69CA C |
 SETSGN186 :                   6368 C |  SGNPOS186 :                   6339 C |
 SHDN186 :                     635F C |  SHIFT179 :                    61AF C |
 SHL186 :                      634B C |  SHR187 :                      6419 C |
 SIGN187 :                     643B C | *SOP257 :                      6B0C C |
 SP :                             2 - |  SUBOVHD :                       1B - |
 TESTEXIT176 :                 606B C | *TIME :                  "10:36:34" - |
*TRUE :                           1 - |  UPNXT150 :                    5E7B C |
 VERSION :                     142F - | *Z80SYNTAX :                      0 - |
 _CALL :                       5F81 C |  _DIVI2 :                      608D C |
 _DIVI4 :                      6200 C |  _DIVU2 :                      6026 C |
 _DIVU4 :                      6100 C |  _DUBDABX :                    5E00 C |
*_EXIT :                       5AAC C |  _FTOA :                       466C C |
*_INP :                        6A06 C |  _ITOA :                       4A6C C |
 _LTOA :                       4E13 C |  _MAIN :                       4404 C |
*_MEMCMP :                     5B02 C | *_MEMCPY :                     5C2D C |
*_MEMSET :                     5D0D C | *_MODI2 :                      5F64 C |
*_MODI4 :                      6287 C | *_MODU2 :                      5F5A C |
*_MODU4 :                      6279 C |  _MULT_NUMS :                  464C C |
*_MULU2 :                      6000 C | *_MULU4 :                      6167 C |
*_NSTDLIBINCLUDER :            5DF1 C | *_ONEMS :                      5FB0 C |
 _OUT :                        6A21 C | *_OUT4 :                       5F6E C |
*_OUT5 :                       6A00 C |  _PRINTF :                     5132 C |
 _PRINTFLT :                   4FE5 C |  _PRINTINT :                   4F2F C |
 _PRINTLINT :                  4F8C C |  _PRINTSTR :                   45F9 C |
*_PUTC :                       6A00 C |  _PUTX :                       50CA C |
 _PUTXN :                      505D C |  _RETURN :                     5FA1 C |
 _ROUND_NUMS :                 462C C | *_SETQOFF :                    5F57 C |
*_SETQON :                     5F54 C | *_STRCMP :                     5ECB C |
 _STRCPY :                     5EC0 C |  _STRLEN :                     45A7 C |
*_STRNCMP :                    4466 C |  __STRCMPGT :                  5EE2 C |
 __STRCMPLP :                  5ED0 C |  __STRCMPNE :                  5EDC C |
 __STRCPY :                    5EC4 C |

    315 symbols
     78 unused symbols

 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 58 - 1/27/2021 10:36:34


  Defined Macros:
  ---------------

ALU1                                  | ALU2                                 
ALU2I                                 | ALU2RRS                              
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CCALLD                                | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | GLOBSS                               
INC4                                  | INCM                                 
JCF4                                  | JCI1I                                
JCI2                                  | JCI2I                                
JCI4                                  | JCU1                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI1                                
JEQI2                                 | JEQI4                                
JEQU1I                                | JEQU2I                               
JNEU1                                 | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | ORGC                                 
ORGD                                  | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST1I                                 
ST2                                   | ST2I                                 
ST4                                   | STR1                                 
STR1I                                 | STR2                                 
STR2I                                 | TESTSUB                              
 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 59 - 1/27/2021 10:36:34


ZEXT                                  | ZEXT4                                

    116 macros

 AS V1.42 Beta [Bld 172] - Source File mule.olasm - Page 60 - 1/27/2021 10:36:34


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.14 seconds assembly time

   4389 lines source file
  14846 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
