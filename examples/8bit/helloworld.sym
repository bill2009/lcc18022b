export main
segment text
function main type=void function(void) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=1
blockbeg off=0
blockend off=0
;{
helloworld.c:9.0:
;	printstr("hello World!\n");
helloworld.c:10.1:
 2. ADDRGP2 2
1' ARGP2 #2 2 1
4. ADDRGP2 printstr
3' CALLV #4 {void function(pointer to char)}
;}
helloworld.c:11.0:
 1:
maxoff=0
export strncmp
function strncmp type=int function(pointer to const char,pointer to const char,unsigned int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
caller s1 type=pointer to const char sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
caller s2 type=pointer to const char sclass=auto scope=PARAM flags=0 offset=2 ref=0.000000
caller n type=unsigned int sclass=auto scope=PARAM flags=0 offset=4 ref=0.000000
callee s1 type=pointer to const char sclass=register scope=PARAM flags=0 offset=0 ref=30.000000
callee s2 type=pointer to const char sclass=register scope=PARAM flags=0 offset=2 ref=25.000000
callee n type=unsigned int sclass=register scope=PARAM flags=0 offset=4 ref=20.000000
blockbeg off=0
local 10 type=int sclass=register scope=LOCAL flags=generated offset=0 ref=15.000000
blockend off=1
 2. ADDRFP2 s1
4. ADDRFP2 s1
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
 2. ADDRFP2 s2
4. ADDRFP2 s2
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
 2. ADDRFP2 n
4. ADDRFP2 n
3. INDIRU1 #4
1' ASGNU1 #2 #3 1 1
;{
./nstdlib.c:27.0:
;    for ( ; n > 0; s1++, s2++, --n)
./nstdlib.c:28.10:
 2. ADDRGP2 7
1' JUMPV #2
 4:
;	if (*s1 != *s2)
./nstdlib.c:29.5:
 4. ADDRFP2 s1
3. INDIRP2 #4
2. INDIRI1 #3
7. ADDRFP2 s2
6. INDIRP2 #7
5. INDIRI1 #6
1' EQI1 #2 #5 8
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? (int16_t)-1 : (int16_t)+1);
./nstdlib.c:30.12:
 5. ADDRFP2 s1
4. INDIRP2 #5
3. INDIRU1 #4
2. CVUI1 #3 1
9. ADDRFP2 s2
8. INDIRP2 #9
7. INDIRU1 #8
6. CVUI1 #7 1
1' GEI1 #2 #6 11
11. ADDRLP2 10
12. CNSTI1 -1
10' ASGNI1 #11 #12 1 1
14. ADDRGP2 12
13' JUMPV #14
11:
17. ADDRLP2 10
18. CNSTI1 1
16' ASGNI1 #17 #18 1 1
12:
22. ADDRLP2 10
21. INDIRI1 #22
20' RETI1 #21
 2. ADDRGP2 3
1' JUMPV #2
 8:
;	else if (*s1 == '\0')
./nstdlib.c:31.10:
 4. ADDRFP2 s1
3. INDIRP2 #4
2. INDIRI1 #3
5. CNSTI1 0
1' NEI1 #2 #5 13
;	    return 0;
./nstdlib.c:32.12:
 2. CNSTI1 0
1' RETI1 #2
 2. ADDRGP2 3
1' JUMPV #2
 13:
 5:
;    for ( ; n > 0; s1++, s2++, --n)
./nstdlib.c:28.19:
 2. ADDRFP2 count=2 s1
4. INDIRP2 #2
5. CNSTI2 count=2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
7. ADDRFP2 count=2 s2
9. INDIRP2 #7
8. ADDP2 #9 #5
6' ASGNP2 #7 #8 2 1
11. ADDRFP2 count=2 n
13. INDIRU1 #11
14. CNSTU1 1
12. SUBU1 #13 #14
10' ASGNU1 #11 #12 1 1
 7:
./nstdlib.c:28.12:
 3. ADDRFP2 n
2. INDIRU1 #3
4. CNSTU1 0
1' NEU1 #2 #4 4
;    return 0;
./nstdlib.c:33.11:
 2. CNSTI1 0
1' RETI1 #2
 3:
maxoff=1
export strlen
function strlen type=unsigned int function(pointer to char) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
caller str type=pointer to char sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee str type=pointer to char sclass=register scope=PARAM flags=0 offset=0 ref=20.000000
blockbeg off=0
local slen type=unsigned int sclass=register scope=LOCAL flags=0 offset=0 ref=12.000000
blockbeg off=1
blockend off=1
blockend off=1
 2. ADDRFP2 str
4. ADDRFP2 str
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;{
./nstdlib.c:37.0:
;	uint16_t slen = 0 ;
./nstdlib.c:38.17:
 2. ADDRLP2 slen
3. CNSTU1 0
1' ASGNU1 #2 #3 1 1
 2. ADDRGP2 17
1' JUMPV #2
 16:
;	while (*str != 0) {
./nstdlib.c:39.19:
;      slen++ ;
./nstdlib.c:40.6:
 2. ADDRLP2 count=2 slen
4. INDIRU1 #2
5. CNSTU1 1
3. ADDU1 #4 #5
1' ASGNU1 #2 #3 1 1
;      str++ ;
./nstdlib.c:41.6:
 2. ADDRFP2 count=2 str
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;   }
./nstdlib.c:42.3:
 17:
;	while (*str != 0) {
./nstdlib.c:39.8:
 4. ADDRFP2 str
3. INDIRP2 #4
2. INDIRI1 #3
5. CNSTI1 0
1' NEI1 #2 #5 16
;   return slen;
./nstdlib.c:43.10:
 3. ADDRLP2 slen
2. INDIRU1 #3
1' RETU1 #2
 15:
maxoff=1
export printstr
function printstr type=void function(pointer to char) sclass=auto scope=GLOBAL flags=0 ref=1.000000 ncalls=1
caller ptr type=pointer to char sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee ptr type=pointer to char sclass=register scope=PARAM flags=0 offset=0 ref=20.000000
blockbeg off=0
blockbeg off=0
blockend off=0
blockend off=0
 2. ADDRFP2 ptr
4. ADDRFP2 ptr
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;void printstr(char *ptr){
./nstdlib.c:45.24:
 2. ADDRGP2 21
1' JUMPV #2
 20:
;    while(*ptr){
./nstdlib.c:46.15:
;		putc(*ptr++); //jan 29
./nstdlib.c:47.1:
 2. CNSTI1 7
1' ARGI1 #2 1 1
4. ADDRFP2 count=2 ptr
3' INDIRP2 count=2 #4
7. CNSTI2 1
6. ADDP2 #3 #7
5' ASGNP2 #4 #6 2 1
9. INDIRI1 #3
8' ARGI1 #9 1 1
11. ADDRGP2 out
10' CALLI1 #11 {int function}
;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
./nstdlib.c:48.0:
;	}
./nstdlib.c:49.1:
 21:
;    while(*ptr){
./nstdlib.c:46.10:
 4. ADDRFP2 ptr
3. INDIRP2 #4
2. INDIRI1 #3
5. CNSTI1 0
1' NEI1 #2 #5 20
;}
./nstdlib.c:50.0:
 19:
maxoff=0
segment lit
global round_nums type=array 8 of const float sclass=static scope=GLOBAL flags=0 ref=0.000000
defconst float.4 0.5
defconst float.4 0.05
defconst float.4 0.005
defconst float.4 0.0005
defconst float.4 5e-05
defconst float.4 5e-06
defconst float.4 5e-07
defconst float.4 5e-08
global mult_nums type=array 8 of const float sclass=static scope=GLOBAL flags=0 ref=0.000000
defconst float.4 1
defconst float.4 10
defconst float.4 100
defconst float.4 1000
defconst float.4 10000
defconst float.4 100000
defconst float.4 1e+06
defconst float.4 1e+07
export ftoa
segment text
function ftoa type=pointer to char function(float,pointer to char,unsigned int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=5
caller flt type=float sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
caller outbfr type=pointer to char sclass=auto scope=PARAM flags=0 offset=4 ref=0.000000
caller dec_digits type=unsigned int sclass=auto scope=PARAM flags=0 offset=6 ref=0.000000
callee flt type=float sclass=register scope=PARAM flags=0 offset=0 ref=4.000000
callee outbfr type=pointer to char sclass=auto scope=PARAM flags=0 offset=4 ref=2.000000
callee dec_digits type=unsigned int sclass=register scope=PARAM flags=0 offset=6 ref=4.000000
blockbeg off=0
local output type=pointer to char sclass=register scope=LOCAL flags=0 offset=0 ref=7.250000
local wholeNum type=long int sclass=register scope=LOCAL flags=0 offset=2 ref=3.000000
local mult type=float sclass=auto scope=LOCAL flags=0 offset=4 ref=2.000000
local decimalNum type=long int sclass=auto scope=LOCAL flags=0 offset=8 ref=1.500000
local idx type=unsigned int sclass=auto scope=LOCAL flags=0 offset=10 ref=0.000000
local tbfr type=array 40 of char sclass=auto scope=LOCAL flags=addressed offset=11 ref=0.000000
blockbeg off=51
blockend off=51
blockbeg off=51
blockbeg off=51
blockend off=51
blockend off=51
blockbeg off=51
blockend off=51
blockbeg off=51
blockend off=51
blockend off=51
 2. ADDRFP2 flt
4. ADDRFP2 flt
3. INDIRF4 #4
1' ASGNF4 #2 #3 4 1
 2. ADDRFP2 dec_digits
4. ADDRFP2 dec_digits
3. INDIRU1 #4
1' ASGNU1 #2 #3 1 1
;{
./nstdlib.c:73.0:
;   char *output = outbfr ;
./nstdlib.c:78.18:
 2. ADDRLP2 output
4. ADDRFP2 outbfr
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;   if (flt < 0.0) {
./nstdlib.c:83.7:
 3. ADDRFP2 flt
2. INDIRF4 #3
5. ADDRGP2 26
4. INDIRF4 #5
1' GEF4 #2 #4 24
./nstdlib.c:83.18:
;      *output++ = '-' ;
./nstdlib.c:84.6:
 2. ADDRLP2 count=2 output
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. CNSTI1 45
6' ASGNI1 #1 #7 1 1
;      flt *= -1.0 ;
./nstdlib.c:85.6:
 2. ADDRFP2 count=2 flt
5. ADDRGP2 27
4. INDIRF4 #5
6. INDIRF4 #2
3. MULF4 #4 #6
1' ASGNF4 #2 #3 4 1
;   } else {
./nstdlib.c:86.3:
 2. ADDRGP2 25
1' JUMPV #2
 24:
./nstdlib.c:86.10:
;      if (use_leading_plus) {
./nstdlib.c:87.10:
 2. ADDRGP2 28
1' JUMPV #2
./nstdlib.c:87.13:
;         *output++ = '+' ;
./nstdlib.c:88.9:
 2. ADDRLP2 count=2 output
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. CNSTI1 43
6' ASGNI1 #1 #7 1 1
;      }
./nstdlib.c:89.6:
 28:
;   }
./nstdlib.c:90.3:
 25:
;   if (dec_digits < (uint16_t)8) {
./nstdlib.c:93.7:
 3. ADDRFP2 dec_digits
2. INDIRU1 #3
4. CNSTU1 8
1' GEU1 #2 #4 30
./nstdlib.c:93.33:
;      flt += round_nums[dec_digits] ;
./nstdlib.c:94.6:
 2. ADDRFP2 count=2 flt
4. INDIRF4 #2
10. ADDRFP2 dec_digits
9. INDIRU1 #10
8. CVUI2 #9 1
11. CNSTI1 2
7. LSHI2 #8 #11
12. ADDRGP2 round_nums
6. ADDP2 #7 #12
5. INDIRF4 #6
3. ADDF4 #4 #5
1' ASGNF4 #2 #3 4 1
;   }
./nstdlib.c:95.3:
 30:
;	mult=mult_nums[dec_digits];
./nstdlib.c:100.1:
 2. ADDRLP2 mult
8. ADDRFP2 dec_digits
7. INDIRU1 #8
6. CVUI2 #7 1
9. CNSTI1 2
5. LSHI2 #6 #9
10. ADDRGP2 mult_nums
4. ADDP2 #5 #10
3. INDIRF4 #4
1' ASGNF4 #2 #3 4 1
;   wholeNum = flt;
./nstdlib.c:102.3:
 2. ADDRLP2 wholeNum
5. ADDRFP2 flt
4. INDIRF4 #5
3. CVFI2 #4 4
1' ASGNI2 #2 #3 2 1
;   decimalNum = ((flt - wholeNum) * mult);
./nstdlib.c:103.3:
 2. ADDRLP2 decimalNum
7. ADDRFP2 flt
6. INDIRF4 #7
10. ADDRLP2 wholeNum
9. INDIRI2 #10
8. CVIF4 #9 2
5. SUBF4 #6 #8
12. ADDRLP2 mult
11. INDIRF4 #12
4. MULF4 #5 #11
3. CVFI2 #4 4
1' ASGNI2 #2 #3 2 1
;   strcpy(output,dubdabx(wholeNum,output,1));
./nstdlib.c:109.3:
 3. ADDRLP2 wholeNum
2. INDIRI2 #3
1' ARGI2 #2 2 1
6. ADDRLP2 output
5. INDIRP2 #6
4' ARGP2 #5 2 1
8. CNSTI1 1
7' ARGI1 #8 1 1
10. ADDRGP2 dubdabx
9' CALLP2 #10 {pointer to char function(long int,pointer to char,int)}
13. ADDRLP2 output
12. INDIRP2 #13
11' ARGP2 #12 2 1
14' ARGP2 #9 2 1
16. ADDRGP2 strcpy
15' CALLP2 #16 {pointer to char function(pointer to char,pointer to const char)}
;   output+=strlen(output);
./nstdlib.c:110.3:
 3. ADDRLP2 count=3 output
2. INDIRP2 #3
1' ARGP2 #2 2 1
5. ADDRGP2 strlen
4' CALLU1 #5 {unsigned int function(pointer to char)}
8. CVUU2 #4 1
9. INDIRP2 #3
7. ADDP2 #8 #9
6' ASGNP2 #3 #7 2 1
;   if (dec_digits > 0) {
./nstdlib.c:112.7:
 3. ADDRFP2 dec_digits
2. INDIRU1 #3
4. CNSTU1 0
1' EQU1 #2 #4 32
./nstdlib.c:112.23:
;		*output++ = '.' ;
./nstdlib.c:113.2:
 2. ADDRLP2 count=2 output
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. CNSTI1 46
6' ASGNI1 #1 #7 1 1
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
./nstdlib.c:117.2:
 3. ADDRLP2 decimalNum
2. INDIRI2 #3
1' ARGI2 #2 2 1
6. ADDRLP2 output
5. INDIRP2 #6
4' ARGP2 #5 2 1
10. ADDRFP2 dec_digits
9. INDIRU1 #10
8. CVUI1 #9 1
7' ARGI1 #8 1 1
12. ADDRGP2 dubdabx
11' CALLP2 #12 {pointer to char function(long int,pointer to char,int)}
15. ADDRLP2 output
14. INDIRP2 #15
13' ARGP2 #14 2 1
16' ARGP2 #11 2 1
18. ADDRGP2 strcpy
17' CALLP2 #18 {pointer to char function(pointer to char,pointer to const char)}
;	}
./nstdlib.c:118.1:
 32:
;   return outbfr;
./nstdlib.c:120.10:
 3. ADDRFP2 outbfr
2. INDIRP2 #3
1' RETP2 #2
 23:
maxoff=51
export itoa
function itoa type=pointer to char function(int,pointer to char) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
caller s type=int sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
caller buffer type=pointer to char sclass=auto scope=PARAM flags=0 offset=1 ref=0.000000
callee s type=int sclass=auto scope=PARAM flags=0 offset=0 ref=2.000000
callee buffer type=pointer to char sclass=auto scope=PARAM flags=0 offset=1 ref=2.000000
blockbeg off=0
local k type=unsigned int sclass=register scope=LOCAL flags=0 offset=0 ref=241.000000
local n type=unsigned int sclass=register scope=LOCAL flags=0 offset=1 ref=201.000000
local r type=unsigned int sclass=register scope=LOCAL flags=0 offset=2 ref=125.000000
local flag type=unsigned int sclass=register scope=LOCAL flags=0 offset=3 ref=16.000000
local bptr type=pointer to char sclass=register scope=LOCAL flags=0 offset=4 ref=13.000000
blockbeg off=6
blockend off=6
blockbeg off=6
blockend off=6
blockbeg off=6
blockbeg off=6
blockend off=6
blockend off=6
blockend off=6
;char * itoa(int16_t s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
./nstdlib.c:123.36:
;	uint16_t flag=0;
./nstdlib.c:125.15:
 2. ADDRLP2 flag
3. CNSTU1 0
1' ASGNU1 #2 #3 1 1
;	char * bptr; bptr=buffer;
./nstdlib.c:126.14:
 2. ADDRLP2 bptr
4. ADDRFP2 buffer
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;	if (s<0){
./nstdlib.c:127.5:
 3. ADDRFP2 s
2. INDIRI1 #3
4. CNSTI1 0
1' GEI1 #2 #4 35
./nstdlib.c:127.9:
;		*bptr='-';bptr++;
./nstdlib.c:128.2:
 3. ADDRLP2 bptr
2. INDIRP2 #3
4. CNSTI1 45
1' ASGNI1 #2 #4 1 1
./nstdlib.c:128.12:
 2. ADDRLP2 count=2 bptr
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;		n=-s;
./nstdlib.c:129.2:
 2. ADDRLP2 n
6. ADDRFP2 s
5. INDIRI1 #6
4. NEGI1 #5
3. CVIU1 #4 1
1' ASGNU1 #2 #3 1 1
;	} else{
./nstdlib.c:130.1:
 2. ADDRGP2 36
1' JUMPV #2
 35:
./nstdlib.c:130.7:
;		n=s;
./nstdlib.c:131.2:
 2. ADDRLP2 n
5. ADDRFP2 s
4. INDIRI1 #5
3. CVIU1 #4 1
1' ASGNU1 #2 #3 1 1
;	}
./nstdlib.c:132.1:
 36:
;	k=10000;
./nstdlib.c:133.1:
 2. ADDRLP2 k
4. CNSTI2 10000
3. CVIU1 #4 2
1' ASGNU1 #2 #3 1 1
 2. ADDRGP2 38
1' JUMPV #2
 37:
;	while(k>0){
./nstdlib.c:134.11:
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
./nstdlib.c:135.6:
 2. ADDRLP2 r
3. CNSTU1 0
1' ASGNU1 #2 #3 1 1
 2. ADDRGP2 43
1' JUMPV #2
 40:
./nstdlib.c:135.24:
 41:
./nstdlib.c:135.15:
 2. ADDRLP2 count=2 r
4. INDIRU1 #2
5. CNSTU1 1
3. ADDU1 #4 #5
1' ASGNU1 #2 #3 1 1
7. ADDRLP2 count=2 n
9. INDIRU1 #7
11. ADDRLP2 k
10. INDIRU1 #11
8. SUBU1 #9 #10
6' ASGNU1 #7 #8 1 1
 43:
./nstdlib.c:135.10:
 3. ADDRLP2 k
2. INDIRU1 #3
5. ADDRLP2 n
4. INDIRU1 #5
1' LEU1 #2 #4 40
;		if (flag || r>0||k==1){
./nstdlib.c:136.6:
 3. ADDRLP2 flag
2. INDIRU1 #3
4. CNSTU1 count=2 0
1' NEU1 #2 #4 47
7. ADDRLP2 r
6. INDIRU1 #7
5' NEU1 #6 #4 47
10. ADDRLP2 k
9. INDIRU1 #10
11. CNSTU1 1
8' NEU1 #9 #11 44
47:
./nstdlib.c:136.24:
;			*bptr=('0'+r);bptr++;
./nstdlib.c:137.3:
 3. ADDRLP2 bptr
2. INDIRP2 #3
7. ADDRLP2 r
6. INDIRU1 #7
8. CNSTU1 48
5. ADDU1 #6 #8
4. CVUI1 #5 1
1' ASGNI1 #2 #4 1 1
./nstdlib.c:137.17:
 2. ADDRLP2 count=2 bptr
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;			flag='y';
./nstdlib.c:138.3:
 2. ADDRLP2 flag
3. CNSTU1 121
1' ASGNU1 #2 #3 1 1
;		}
./nstdlib.c:139.2:
 44:
;		k=k/10;
./nstdlib.c:141.2:
 2. ADDRLP2 count=2 k
4. INDIRU1 #2
5. CNSTU1 10
3. DIVU1 #4 #5
1' ASGNU1 #2 #3 1 1
;	}
./nstdlib.c:142.1:
 38:
;	while(k>0){
./nstdlib.c:134.7:
 3. ADDRLP2 k
2. INDIRU1 #3
4. CNSTU1 0
1' NEU1 #2 #4 37
;	*bptr='\0';
./nstdlib.c:144.1:
 3. ADDRLP2 bptr
2. INDIRP2 #3
4. CNSTI1 0
1' ASGNI1 #2 #4 1 1
;	return buffer;
./nstdlib.c:145.8:
 3. ADDRFP2 buffer
2. INDIRP2 #3
1' RETP2 #2
 34:
maxoff=6
export ltoa
function ltoa type=pointer to char function(long int,pointer to char) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=2
caller s type=long int sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
caller buffer type=pointer to char sclass=auto scope=PARAM flags=0 offset=2 ref=0.000000
callee s type=long int sclass=register scope=PARAM flags=0 offset=0 ref=3.000000
callee buffer type=pointer to char sclass=auto scope=PARAM flags=0 offset=2 ref=2.000000
blockbeg off=0
local bptr type=pointer to char sclass=register scope=LOCAL flags=0 offset=0 ref=3.500000
blockbeg off=2
blockend off=2
blockend off=2
 2. ADDRFP2 s
4. ADDRFP2 s
3. INDIRI2 #4
1' ASGNI2 #2 #3 2 1
;char * ltoa(int32_t s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
./nstdlib.c:147.36:
;	char* bptr=buffer;
./nstdlib.c:148.12:
 2. ADDRLP2 bptr
4. ADDRFP2 buffer
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;	if (s<0){
./nstdlib.c:149.5:
 3. ADDRFP2 s
2. INDIRI2 #3
4. CNSTI2 0
1' GEI2 #2 #4 49
./nstdlib.c:149.9:
;		*bptr++='-';
./nstdlib.c:150.2:
 2. ADDRLP2 count=2 bptr
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. CNSTI1 45
6' ASGNI1 #1 #7 1 1
;		s=-s;
./nstdlib.c:151.2:
 2. ADDRFP2 count=2 s
4. INDIRI2 #2
3. NEGI2 #4
1' ASGNI2 #2 #3 2 1
;	}
./nstdlib.c:152.1:
 49:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
./nstdlib.c:153.1:
 3. ADDRFP2 s
2. INDIRI2 #3
1' ARGI2 #2 2 1
6. ADDRLP2 bptr
5. INDIRP2 #6
4' ARGP2 #5 2 1
8. CNSTI1 1
7' ARGI1 #8 1 1
10. ADDRGP2 dubdabx
9' CALLP2 #10 {pointer to char function(long int,pointer to char,int)}
13. ADDRLP2 bptr
12. INDIRP2 #13
11' ARGP2 #12 2 1
14' ARGP2 #9 2 1
16. ADDRGP2 strcpy
15' CALLP2 #16 {pointer to char function(pointer to char,pointer to const char)}
;	return buffer;
./nstdlib.c:154.8:
 3. ADDRFP2 buffer
2. INDIRP2 #3
1' RETP2 #2
 48:
maxoff=2
export printint
function printint type=void function(int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=2
caller s type=int sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee s type=int sclass=auto scope=PARAM flags=0 offset=0 ref=1.000000
blockbeg off=0
local buffer type=array 8 of char sclass=auto scope=LOCAL flags=addressed offset=0 ref=2.000000
blockend off=8
;void printint(int16_t s){ //print an integer
./nstdlib.c:156.24:
;	itoa(s,buffer);
./nstdlib.c:158.1:
 3. ADDRFP2 s
2. INDIRI1 #3
1' ARGI1 #2 1 1
5. ADDRLP2 buffer
4' ARGP2 #5 2 1
7. ADDRGP2 itoa
6' CALLP2 #7 {pointer to char function(int,pointer to char)}
;	printstr(buffer);
./nstdlib.c:159.1:
 2. ADDRLP2 buffer
1' ARGP2 #2 2 1
4. ADDRGP2 printstr
3' CALLV #4 {void function(pointer to char)}
;}
./nstdlib.c:160.0:
 51:
maxoff=8
export printlint
function printlint type=void function(long int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=2
caller s type=long int sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee s type=long int sclass=auto scope=PARAM flags=0 offset=0 ref=1.000000
blockbeg off=0
local buffer type=array 12 of char sclass=auto scope=LOCAL flags=addressed offset=0 ref=1.000000
blockend off=12
;void printlint(int32_t s){ //print a long integer
./nstdlib.c:161.25:
;	printstr(ltoa(s,buffer));
./nstdlib.c:163.1:
 3. ADDRFP2 s
2. INDIRI2 #3
1' ARGI2 #2 2 1
5. ADDRLP2 buffer
4' ARGP2 #5 2 1
7. ADDRGP2 ltoa
6' CALLP2 #7 {pointer to char function(long int,pointer to char)}
8' ARGP2 #6 2 1
10. ADDRGP2 printstr
9' CALLV #10 {void function(pointer to char)}
;}
./nstdlib.c:164.0:
 52:
maxoff=12
export printflt
function printflt type=void function(float) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=2
caller s type=float sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee s type=float sclass=auto scope=PARAM flags=0 offset=0 ref=1.000000
blockbeg off=0
local buffer type=array 20 of char sclass=auto scope=LOCAL flags=addressed offset=0 ref=1.000000
blockend off=20
;void printflt(float s){ //print a float
./nstdlib.c:166.22:
;	printstr(ftoa(s,buffer,3));
./nstdlib.c:168.1:
 3. ADDRFP2 s
2. INDIRF4 #3
1' ARGF4 #2 4 1
5. ADDRLP2 buffer
4' ARGP2 #5 2 1
7. CNSTU1 3
6' ARGU1 #7 1 1
9. ADDRGP2 ftoa
8' CALLP2 #9 {pointer to char function(float,pointer to char,unsigned int)}
10' ARGP2 #8 2 1
12. ADDRGP2 printstr
11' CALLV #12 {void function(pointer to char)}
;}
./nstdlib.c:169.0:
 53:
maxoff=20
export putxn
function putxn type=void function(unsigned char) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=2
caller x type=unsigned char sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee x type=unsigned char sclass=auto scope=PARAM flags=0 offset=0 ref=2.000000
blockbeg off=0
blockbeg off=0
blockend off=0
blockbeg off=0
blockend off=0
blockend off=0
;void putxn(unsigned char x){ //print a nibble as ascii hex
./nstdlib.c:171.27:
;	if (x<10){
./nstdlib.c:172.5:
 4. ADDRFP2 x
3. INDIRU1 #4
2. CVUI1 #3 1
5. CNSTI1 10
1' GEI1 #2 #5 55
./nstdlib.c:172.10:
;		putc(x+'0');
./nstdlib.c:173.1:
 2. CNSTI1 7
1' ARGI1 #2 1 1
7. ADDRFP2 x
6. INDIRU1 #7
5. CVUI1 #6 1
8. CNSTI1 48
4. ADDI1 #5 #8
3' ARGI1 #4 1 1
10. ADDRGP2 out
9' CALLI1 #10 {int function}
;	} else {
./nstdlib.c:174.1:
 2. ADDRGP2 56
1' JUMPV #2
 55:
./nstdlib.c:174.8:
;		putc(x+'A'-10);
./nstdlib.c:175.1:
 2. CNSTI1 7
1' ARGI1 #2 1 1
8. ADDRFP2 x
7. INDIRU1 #8
6. CVUI1 #7 1
9. CNSTI1 65
5. ADDI1 #6 #9
10. CNSTI1 10
4. SUBI1 #5 #10
3' ARGI1 #4 1 1
12. ADDRGP2 out
11' CALLI1 #12 {int function}
;	}
./nstdlib.c:176.1:
 56:
;}
./nstdlib.c:177.0:
 54:
maxoff=0
export putx
function putx type=void function(unsigned char) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=2
caller x type=unsigned char sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee x type=unsigned char sclass=auto scope=PARAM flags=0 offset=0 ref=2.000000
blockbeg off=0
blockend off=0
;void putx(unsigned char x){ //print a unsigned char as ascii hex
./nstdlib.c:178.26:
;	putxn(x>>4);
./nstdlib.c:179.1:
 4. ADDRFP2 x
3. INDIRU1 #4
5. CNSTI1 4
2. RSHU1 #3 #5
1' ARGU1 #2 1 1
7. ADDRGP2 putxn
6' CALLV #7 {void function(unsigned char)}
;	putxn(x & 0x0F);
./nstdlib.c:180.1:
 6. ADDRFP2 x
5. INDIRU1 #6
4. CVUI1 #5 1
7. CNSTI1 15
3. BANDI1 #4 #7
2. CVIU1 #3 1
1' ARGU1 #2 1 1
9. ADDRGP2 putxn
8' CALLV #9 {void function(unsigned char)}
;}
./nstdlib.c:181.0:
 57:
maxoff=0
export printf
function printf type=void function(pointer to char,...) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=15
caller pptr type=pointer to char sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee pptr type=pointer to char sclass=auto scope=PARAM flags=addressed offset=0 ref=2.000000
blockbeg off=0
local ptr type=pointer to char sclass=register scope=LOCAL flags=0 offset=0 ref=43.000000
local c type=unsigned char sclass=register scope=LOCAL flags=0 offset=2 ref=39.000000
local this type=pointer to int sclass=register scope=LOCAL flags=0 offset=3 ref=6.000000
local argslot type=int sclass=register scope=LOCAL flags=0 offset=5 ref=5.250000
local xord type=unsigned char sclass=auto scope=LOCAL flags=0 offset=6 ref=0.500000
blockbeg off=7
blockbeg off=7
blockend off=7
blockbeg off=7
blockbeg off=7
blockbeg off=7
blockend off=7
blockbeg off=7
blockend off=7
blockbeg off=7
blockbeg off=7
blockend off=7
blockbeg off=7
blockend off=7
blockbeg off=7
blockend off=7
blockend off=7
blockbeg off=7
blockbeg off=7
blockend off=7
blockend off=7
blockend off=7
blockend off=7
blockend off=7
blockend off=7
;void printf(char *pptr,...){ //limited implementation of printf
./nstdlib.c:182.27:
;	register char* ptr=pptr; //try to save on loads/spills
./nstdlib.c:185.20:
 2. ADDRLP2 ptr
4. ADDRFP2 pptr
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;	int16_t argslot=0;	//used to align longs
./nstdlib.c:186.17:
 2. ADDRLP2 argslot
3. CNSTI1 0
1' ASGNI1 #2 #3 1 1
;	int16_t * this=(int16_t *)&pptr;
./nstdlib.c:187.16:
 2. ADDRLP2 this
3. ADDRFP2 pptr
1' ASGNP2 #2 #3 2 1
;	this++; argslot++; //advance argument pointer and slot #
./nstdlib.c:188.1:
 2. ADDRLP2 count=2 this
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
./nstdlib.c:188.9:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 1
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
 2. ADDRGP2 60
1' JUMPV #2
 59:
;    while(*ptr) {
./nstdlib.c:189.16:
;		c=*ptr; ptr++;
./nstdlib.c:190.2:
 2. ADDRLP2 c
6. ADDRLP2 ptr
5. INDIRP2 #6
4. INDIRI1 #5
3. CVIU1 #4 1
1' ASGNU1 #2 #3 1 1
./nstdlib.c:190.10:
 2. ADDRLP2 count=2 ptr
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;		if (c!='%'){
./nstdlib.c:191.6:
 4. ADDRLP2 c
3. INDIRU1 #4
2. CVUI1 #3 1
5. CNSTI1 37
1' EQI1 #2 #5 62
./nstdlib.c:191.13:
;			putc(c);
./nstdlib.c:192.1:
 2. CNSTI1 7
1' ARGI1 #2 1 1
5. ADDRLP2 c
4. INDIRU1 #5
3' ARGU1 #4 1 1
7. ADDRGP2 out
6' CALLI1 #7 {int function}
;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
./nstdlib.c:193.0:
;		} else{
./nstdlib.c:194.2:
 2. ADDRGP2 63
1' JUMPV #2
 62:
./nstdlib.c:194.8:
;			c=*ptr;ptr++;
./nstdlib.c:195.3:
 2. ADDRLP2 c
6. ADDRLP2 ptr
5. INDIRP2 #6
4. INDIRI1 #5
3. CVIU1 #4 1
1' ASGNU1 #2 #3 1 1
./nstdlib.c:195.10:
 2. ADDRLP2 count=2 ptr
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;			switch (c){
./nstdlib.c:196.11:
 4. ADDRLP2 c
3. INDIRU1 #4
2. CVUI1 count=3 #3 1
5. CNSTI1 count=2 99
1' LTI1 #2 #5 84
7. CNSTI1 108
6' GTI1 #2 #7 85
13. SUBI1 #2 #5
12. CVIU2 #13 1
14. CNSTI1 1
11. LSHU2 #12 #14
15. ADDRGP2 86
10. ADDP2 #11 #15
9. INDIRP2 #10
8' JUMPV #9
segment lit
global 86 type=array 5 of pointer to void sclass=static scope=GLOBAL flags=generated ref=0.500000
defaddress 68
defaddress 66
defaddress 64
defaddress 79
defaddress 64
defaddress 64
defaddress 66
defaddress 64
defaddress 64
defaddress 72
segment text
 84:
 4. ADDRLP2 c
3. INDIRU1 #4
2. CVUI1 #3 1
5. CNSTI1 88
1' EQI1 #2 #5 71
 2. ADDRGP2 64
1' JUMPV #2
 85:
 4. ADDRLP2 c
3. INDIRU1 #4
2. CVUI1 count=2 #3 1
5. CNSTI1 count=2 115
1' EQI1 #2 #5 67
6' LTI1 #2 #5 64
 87:
 4. ADDRLP2 c
3. INDIRU1 #4
2. CVUI1 #3 1
5. CNSTI1 120
1' EQI1 #2 #5 71
 2. ADDRGP2 64
1' JUMPV #2
./nstdlib.c:196.13:
 66:
;					printint(*this++);
./nstdlib.c:198.5:
 2. ADDRLP2 count=2 this
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. INDIRI1 #1
6' ARGI1 #7 1 1
9. ADDRGP2 printint
8' CALLV #9 {void function(int)}
;					argslot+=1; //next argument slot
./nstdlib.c:199.5:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 1
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;					break;
./nstdlib.c:200.5:
 2. ADDRGP2 65
1' JUMPV #2
 67:
;					printstr((char*) *this++);
./nstdlib.c:202.5:
 2. ADDRLP2 count=2 this
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
9. INDIRI1 #1
8. CVIU2 #9 1
7. CVUP2 #8 2
6' ARGP2 #7 2 1
11. ADDRGP2 printstr
10' CALLV #11 {void function(pointer to char)}
;					argslot+=1; //next argument slot
./nstdlib.c:203.5:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 1
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;					break;
./nstdlib.c:204.5:
 2. ADDRGP2 65
1' JUMPV #2
 68:
;					if (*ptr=='x'){ //if there's an x
./nstdlib.c:206.9:
 4. ADDRLP2 ptr
3. INDIRP2 #4
2. INDIRI1 #3
5. CNSTI1 120
1' NEI1 #2 #5 69
./nstdlib.c:206.19:
;						ptr++; //skip over the x
./nstdlib.c:207.6:
 2. ADDRLP2 count=2 ptr
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
./nstdlib.c:208.6:
 2. ADDRLP2 count=2 this
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
11. INDIRI1 #1
10. CVIU1 #11 1
9. CVUI2 #10 1
12. CNSTI2 255
8. BANDI2 #9 #12
7. CVIU1 #8 2
6' ARGU1 #7 1 1
14. ADDRGP2 putx
13' CALLV #14 {void function(unsigned char)}
;					} else{
./nstdlib.c:209.5:
 2. ADDRGP2 70
1' JUMPV #2
 69:
./nstdlib.c:209.11:
;						putc((unsigned int) *this++);		//print as char
./nstdlib.c:210.1:
 2. CNSTI1 7
1' ARGI1 #2 1 1
4. ADDRLP2 count=2 this
3' INDIRP2 count=2 #4
7. CNSTI2 1
6. ADDP2 #3 #7
5' ASGNP2 #4 #6 2 1
10. INDIRI1 #3
9. CVIU1 #10 1
8' ARGU1 #9 1 1
12. ADDRGP2 out
11' CALLI1 #12 {int function}
;					}
./nstdlib.c:211.5:
 70:
;					argslot+=1; //next argument slot
./nstdlib.c:212.5:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 1
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;					break;
./nstdlib.c:213.5:
 2. ADDRGP2 65
1' JUMPV #2
 71:
;					putx(((uint16_t) *this)>>8);
./nstdlib.c:215.5:
 6. ADDRLP2 this
5. INDIRP2 #6
4. INDIRI1 #5
3. CVIU1 #4 1
7. CNSTI1 8
2. RSHU1 #3 #7
1' ARGU1 #2 1 1
9. ADDRGP2 putx
8' CALLV #9 {void function(unsigned char)}
;					putx(((uint16_t) *this++)&255);
./nstdlib.c:216.5:
 2. ADDRLP2 count=2 this
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
11. INDIRI1 #1
10. CVIU1 #11 1
9. CVUI2 #10 1
12. CNSTI2 255
8. BANDI2 #9 #12
7. CVIU1 #8 2
6' ARGU1 #7 1 1
14. ADDRGP2 putx
13' CALLV #14 {void function(unsigned char)}
;					argslot+=1; //next argument slot
./nstdlib.c:217.5:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 1
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;					break;
./nstdlib.c:218.5:
 2. ADDRGP2 65
1' JUMPV #2
 72:
;					if (*ptr){ //as long as there's something there
./nstdlib.c:220.9:
 4. ADDRLP2 ptr
3. INDIRP2 #4
2. INDIRI1 #3
5. CNSTI1 0
1' EQI1 #2 #5 73
./nstdlib.c:220.14:
;						xord=*ptr++;
./nstdlib.c:221.6:
 2. ADDRLP2 count=2 ptr
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. ADDRLP2 xord
9. INDIRI1 #1
8. CVIU1 #9 1
6' ASGNU1 #7 #8 1 1
;						if (argslot&1) {
./nstdlib.c:222.10:
 4. ADDRLP2 argslot
3. INDIRI1 #4
5. CNSTI1 1
2. BANDI1 #3 #5
6. CNSTI1 0
1' EQI1 #2 #6 75
./nstdlib.c:222.21:
;							this++;
./nstdlib.c:223.7:
 2. ADDRLP2 count=2 this
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;							argslot++;
./nstdlib.c:224.7:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 1
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;						}
./nstdlib.c:225.6:
 75:
;						if(xord=='d'){
./nstdlib.c:226.9:
 4. ADDRLP2 xord
3. INDIRU1 #4
2. CVUI1 #3 1
5. CNSTI1 100
1' NEI1 #2 #5 77
./nstdlib.c:226.19:
;							printlint(*(long *)this);//treats "this" as a pointer to long
./nstdlib.c:227.7:
 4. ADDRLP2 this
3. INDIRP2 #4
2. INDIRI2 #3
1' ARGI2 #2 2 1
6. ADDRGP2 printlint
5' CALLV #6 {void function(long int)}
;							this+=2;				// and advances it 4 bytes
./nstdlib.c:228.7:
 2. ADDRLP2 count=2 this
4. INDIRP2 #2
5. CNSTI2 2
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;						} else{
./nstdlib.c:229.6:
 2. ADDRGP2 78
1' JUMPV #2
 77:
./nstdlib.c:229.12:
;							putx(((uint16_t) *this)>>8);
./nstdlib.c:230.7:
 6. ADDRLP2 this
5. INDIRP2 #6
4. INDIRI1 #5
3. CVIU1 #4 1
7. CNSTI1 8
2. RSHU1 #3 #7
1' ARGU1 #2 1 1
9. ADDRGP2 putx
8' CALLV #9 {void function(unsigned char)}
;							putx(((uint16_t) *this++)&255);
./nstdlib.c:231.7:
 2. ADDRLP2 count=2 this
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
11. INDIRI1 #1
10. CVIU1 #11 1
9. CVUI2 #10 1
12. CNSTI2 255
8. BANDI2 #9 #12
7. CVIU1 #8 2
6' ARGU1 #7 1 1
14. ADDRGP2 putx
13' CALLV #14 {void function(unsigned char)}
;							putx(((uint16_t) *this)>>8);
./nstdlib.c:232.7:
 6. ADDRLP2 this
5. INDIRP2 #6
4. INDIRI1 #5
3. CVIU1 #4 1
7. CNSTI1 8
2. RSHU1 #3 #7
1' ARGU1 #2 1 1
9. ADDRGP2 putx
8' CALLV #9 {void function(unsigned char)}
;							putx(((uint16_t) *this++)&255);
./nstdlib.c:233.7:
 2. ADDRLP2 count=2 this
1' INDIRP2 count=2 #2
5. CNSTI2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
11. INDIRI1 #1
10. CVIU1 #11 1
9. CVUI2 #10 1
12. CNSTI2 255
8. BANDI2 #9 #12
7. CVIU1 #8 2
6' ARGU1 #7 1 1
14. ADDRGP2 putx
13' CALLV #14 {void function(unsigned char)}
;						}
./nstdlib.c:234.6:
 78:
;						argslot+=2;
./nstdlib.c:235.6:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 2
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;						break;
./nstdlib.c:236.6:
 2. ADDRGP2 65
1' JUMPV #2
 73:
 79:
;					if (*ptr){ //as long as there's something there
./nstdlib.c:240.9:
 4. ADDRLP2 ptr
3. INDIRP2 #4
2. INDIRI1 #3
5. CNSTI1 0
1' EQI1 #2 #5 80
./nstdlib.c:240.14:
;						if (argslot&1) { //adjust alignment
./nstdlib.c:241.10:
 4. ADDRLP2 argslot
3. INDIRI1 #4
5. CNSTI1 1
2. BANDI1 #3 #5
6. CNSTI1 0
1' EQI1 #2 #6 82
./nstdlib.c:241.21:
;							this++;
./nstdlib.c:242.7:
 2. ADDRLP2 count=2 this
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;							argslot++;
./nstdlib.c:243.7:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 1
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;						}
./nstdlib.c:244.6:
 82:
;						printflt(*(float *)this);//treats "this" as a pointer to float
./nstdlib.c:245.6:
 4. ADDRLP2 this
3. INDIRP2 #4
2. INDIRF4 #3
1' ARGF4 #2 4 1
6. ADDRGP2 printflt
5' CALLV #6 {void function(float)}
;						this+=2;				// and advances it 4 bytes
./nstdlib.c:246.6:
 2. ADDRLP2 count=2 this
4. INDIRP2 #2
5. CNSTI2 2
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;						argslot+=2;
./nstdlib.c:247.6:
 2. ADDRLP2 count=2 argslot
4. INDIRI1 #2
5. CNSTI1 2
3. ADDI1 #4 #5
1' ASGNI1 #2 #3 1 1
;						break;
./nstdlib.c:248.6:
 2. ADDRGP2 65
1' JUMPV #2
 80:
 64:
;					putc('%');putc(c);
./nstdlib.c:252.1:
 2. CNSTI1 7
1' ARGI1 #2 1 1
4. CNSTI1 37
3' ARGI1 #4 1 1
6. ADDRGP2 out
5' CALLI1 #6 {int function}
./nstdlib.c:252.12:
 2. CNSTI1 7
1' ARGI1 #2 1 1
5. ADDRLP2 c
4. INDIRU1 #5
3' ARGU1 #4 1 1
7. ADDRGP2 out
6' CALLI1 #7 {int function}
;			} //switch
./nstdlib.c:253.3:
 65:
;		} //%
./nstdlib.c:254.2:
 63:
;	} //while
./nstdlib.c:255.1:
 60:
;    while(*ptr) {
./nstdlib.c:189.10:
 4. ADDRLP2 ptr
3. INDIRP2 #4
2. INDIRI1 #3
5. CNSTI1 0
1' NEI1 #2 #5 59
;} //prtf
./nstdlib.c:256.0:
 58:
maxoff=7
export exit
function exit type=void function(int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=1
caller code type=int sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
callee code type=int sclass=auto scope=PARAM flags=0 offset=0 ref=1.000000
blockbeg off=0
blockend off=0
;void exit(int16_t code){
./nstdlib.c:257.23:
;	printf("exit %d\n",code);
./nstdlib.c:258.1:
 2. ADDRGP2 89
1' ARGP2 #2 2 1
5. ADDRFP2 code
4. INDIRI1 #5
3' ARGI1 #4 1 1
7. ADDRGP2 printf
6' CALLV #7 {void function(pointer to char,...)}
 90:
;	while(1);
./nstdlib.c:259.9:
 91:
./nstdlib.c:259.7:
 2. ADDRGP2 90
1' JUMPV #2
;}
./nstdlib.c:260.0:
 88:
maxoff=0
export memcmp
function memcmp type=int function(pointer to const void,pointer to const void,unsigned int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
caller Ptr1 type=pointer to const void sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
caller Ptr2 type=pointer to const void sclass=auto scope=PARAM flags=0 offset=2 ref=0.000000
caller Count type=unsigned int sclass=auto scope=PARAM flags=0 offset=4 ref=0.000000
callee Ptr1 type=pointer to const void sclass=auto scope=PARAM flags=0 offset=0 ref=1.000000
callee Ptr2 type=pointer to const void sclass=auto scope=PARAM flags=0 offset=2 ref=1.000000
callee Count type=unsigned int sclass=register scope=PARAM flags=0 offset=4 ref=10.000000
blockbeg off=0
local v type=int sclass=register scope=LOCAL flags=0 offset=0 ref=22.000000
local p1 type=pointer to unsigned char sclass=register scope=LOCAL flags=0 offset=1 ref=11.000000
local p2 type=pointer to unsigned char sclass=register scope=LOCAL flags=0 offset=3 ref=11.000000
blockbeg off=5
blockend off=5
blockend off=5
 2. ADDRFP2 Count
4. ADDRFP2 Count
3. INDIRU1 #4
1' ASGNU1 #2 #3 1 1
;int memcmp(const void *Ptr1, const void *Ptr2, uint16_t Count){
./nstdlib.c:261.62:
;    int v = 0;
./nstdlib.c:263.12:
 2. ADDRLP2 v
3. CNSTI1 0
1' ASGNI1 #2 #3 1 1
;    p1 = (unsigned char *)Ptr1;
./nstdlib.c:264.4:
 2. ADDRLP2 p1
4. ADDRFP2 Ptr1
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;    p2 = (unsigned char *)Ptr2;
./nstdlib.c:265.4:
 2. ADDRLP2 p2
4. ADDRFP2 Ptr2
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
 2. ADDRGP2 95
1' JUMPV #2
 94:
;    while(Count-- > 0 && v == 0) {
./nstdlib.c:267.33:
;        v = *(p1++) - *(p2++);
./nstdlib.c:268.8:
 2. ADDRLP2 count=2 p1
1' INDIRP2 count=2 #2
5. CNSTI2 count=2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. ADDRLP2 count=2 p2
6' INDIRP2 count=2 #7
9. ADDP2 #6 #5
8' ASGNP2 #7 #9 2 1
11. ADDRLP2 v
14. INDIRU1 #1
13. CVUI1 #14 1
16. INDIRU1 #6
15. CVUI1 #16 1
12. SUBI1 #13 #15
10' ASGNI1 #11 #12 1 1
;    }
./nstdlib.c:269.4:
 95:
;    while(Count-- > 0 && v == 0) {
./nstdlib.c:267.10:
 2. ADDRFP2 count=2 Count
1' INDIRU1 count=2 #2
5. CNSTU1 1
4. SUBU1 #1 #5
3' ASGNU1 #2 #4 1 1
7. CNSTU1 0
6' EQU1 #1 #7 97
10. ADDRLP2 v
9. INDIRI1 #10
11. CNSTI1 0
8' EQI1 #9 #11 94
97:
;    return v;
./nstdlib.c:271.11:
 3. ADDRLP2 v
2. INDIRI1 #3
1' RETI1 #2
 93:
maxoff=5
export memcpy
function memcpy type=pointer to void function(pointer to void,pointer to const void,unsigned int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
caller dest type=pointer to void sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
caller src type=pointer to const void sclass=auto scope=PARAM flags=0 offset=2 ref=0.000000
caller count type=unsigned int sclass=auto scope=PARAM flags=0 offset=4 ref=0.000000
callee dest type=pointer to void sclass=auto scope=PARAM flags=0 offset=0 ref=2.000000
callee src type=pointer to const void sclass=auto scope=PARAM flags=0 offset=2 ref=1.000000
callee count type=unsigned int sclass=register scope=PARAM flags=0 offset=4 ref=10.000000
blockbeg off=0
local dst8 type=pointer to char sclass=register scope=LOCAL flags=0 offset=0 ref=11.000000
local src8 type=pointer to char sclass=register scope=LOCAL flags=0 offset=2 ref=11.000000
blockbeg off=4
blockend off=4
blockend off=4
 2. ADDRFP2 count
4. ADDRFP2 count
3. INDIRU1 #4
1' ASGNU1 #2 #3 1 1
;void* memcpy(void* dest, const void* src, uint16_t count) {
./nstdlib.c:273.58:
;        char* dst8 = (char*)dest;
./nstdlib.c:274.21:
 2. ADDRLP2 dst8
4. ADDRFP2 dest
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
;        char* src8 = (char*)src;
./nstdlib.c:275.21:
 2. ADDRLP2 src8
4. ADDRFP2 src
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
 2. ADDRGP2 100
1' JUMPV #2
 99:
;        while (count--) {
./nstdlib.c:277.24:
;            *dst8++ = *src8++;
./nstdlib.c:278.12:
 2. ADDRLP2 count=2 dst8
1' INDIRP2 count=2 #2
5. CNSTI2 count=2 1
4. ADDP2 #1 #5
3' ASGNP2 #2 #4 2 1
7. ADDRLP2 count=2 src8
6' INDIRP2 count=2 #7
9. ADDP2 #6 #5
8' ASGNP2 #7 #9 2 1
11. INDIRI1 #6
10' ASGNI1 #1 #11 1 1
;        }
./nstdlib.c:279.8:
 100:
;        while (count--) {
./nstdlib.c:277.15:
 2. ADDRFP2 count=2 count
1' INDIRU1 count=2 #2
5. CNSTU1 1
4. SUBU1 #1 #5
3' ASGNU1 #2 #4 1 1
7. CNSTU1 0
6' NEU1 #1 #7 99
;        return dest;
./nstdlib.c:280.15:
 3. ADDRFP2 dest
2. INDIRP2 #3
1' RETP2 #2
 98:
maxoff=4
export memset
function memset type=pointer to void function(pointer to void,int,unsigned int) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
caller s type=pointer to void sclass=auto scope=PARAM flags=0 offset=0 ref=0.000000
caller c type=int sclass=auto scope=PARAM flags=0 offset=2 ref=0.000000
caller n type=unsigned int sclass=auto scope=PARAM flags=0 offset=3 ref=0.000000
callee s type=pointer to void sclass=auto scope=PARAM flags=0 offset=0 ref=2.000000
callee c type=int sclass=register scope=PARAM flags=0 offset=2 ref=10.000000
callee n type=unsigned int sclass=register scope=PARAM flags=0 offset=3 ref=20.000000
blockbeg off=0
local p type=pointer to unsigned char sclass=register scope=LOCAL flags=0 offset=0 ref=21.000000
blockbeg off=2
blockend off=2
blockend off=2
 2. ADDRFP2 c
4. ADDRFP2 c
3. INDIRI1 #4
1' ASGNI1 #2 #3 1 1
 2. ADDRFP2 n
4. ADDRFP2 n
3. INDIRU1 #4
1' ASGNU1 #2 #3 1 1
;{
./nstdlib.c:284.0:
;    unsigned char* p=s;
./nstdlib.c:285.21:
 2. ADDRLP2 p
4. ADDRFP2 s
3. INDIRP2 #4
1' ASGNP2 #2 #3 2 1
 2. ADDRGP2 104
1' JUMPV #2
 103:
;    while(n){
./nstdlib.c:286.12:
;        *p = (unsigned char)c;
./nstdlib.c:287.8:
 3. ADDRLP2 p
2. INDIRP2 #3
6. ADDRFP2 c
5. INDIRI1 #6
4. CVIU1 #5 1
1' ASGNU1 #2 #4 1 1
;        p++;
./nstdlib.c:288.8:
 2. ADDRLP2 count=2 p
4. INDIRP2 #2
5. CNSTI2 1
3. ADDP2 #4 #5
1' ASGNP2 #2 #3 2 1
;        n--;
./nstdlib.c:289.8:
 2. ADDRFP2 count=2 n
4. INDIRU1 #2
5. CNSTU1 1
3. SUBU1 #4 #5
1' ASGNU1 #2 #3 1 1
;	}
./nstdlib.c:290.1:
 104:
;    while(n){
./nstdlib.c:286.10:
 3. ADDRFP2 n
2. INDIRU1 #3
4. CNSTU1 0
1' NEU1 #2 #4 103
;    return s;
./nstdlib.c:291.11:
 3. ADDRFP2 s
2. INDIRP2 #3
1' RETP2 #2
 102:
maxoff=2
export nstdlibincluder
function nstdlibincluder type=void function(void) sclass=auto scope=GLOBAL flags=0 ref=0.000000 ncalls=0
blockbeg off=0
blockend off=0
;void nstdlibincluder(){
./nstdlib.c:293.22:
;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
./nstdlib.c:294.0:
;}
./nstdlib.c:295.0:
 106:
maxoff=0

import out
import dubdabx
import int16_tmemcmp
import putc
import strcpy
segment lit
global 89 type=array 9 of char sclass=static scope=GLOBAL flags=generated ref=1.000000
defstring "exit %d\012\000"
global 27 type=double sclass=static scope=GLOBAL flags=generated ref=0.500000
defconst float.4 -1
global 26 type=double sclass=static scope=GLOBAL flags=generated ref=1.000000
defconst float.4 0.0
global 2 type=array 14 of char sclass=static scope=GLOBAL flags=generated ref=1.000000
defstring "hello World!\012\000"
progend
